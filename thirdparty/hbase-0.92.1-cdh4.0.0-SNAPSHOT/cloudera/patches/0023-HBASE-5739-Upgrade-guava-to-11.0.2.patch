From 1398432c0980002ff9e106b4ce17b8e67fed48f5 Mon Sep 17 00:00:00 2001
From: Michael Stack <stack@apache.org>
Date: Tue, 10 Apr 2012 19:23:38 +0000
Subject: [PATCH 23/36] HBASE-5739 Upgrade guava to 11.0.2

Reason: Improvement
Author: Todd Lipcon
Ref: CDH-5732
---
 pom.xml                                            |    2 +-
 .../hbase/io/hfile/slab/SingleSizeCache.java       |   39 +++++++++++++-------
 2 files changed, 27 insertions(+), 14 deletions(-)

diff --git a/pom.xml b/pom.xml
index e9c5f5e..14bf429 100644
--- a/pom.xml
+++ b/pom.xml
@@ -849,7 +849,7 @@
     <commons-logging.version>1.1.1</commons-logging.version>
     <commons-math.version>2.1</commons-math.version>
     <commons-configuration.version>1.6</commons-configuration.version>
-    <guava.version>r09</guava.version>
+    <guava.version>11.0.2</guava.version>
     <jackson.version>1.5.5</jackson.version>
     <jasper.version>5.5.23</jasper.version>
     <jaxb-api.version>2.1</jaxb-api.version>
diff --git a/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SingleSizeCache.java b/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SingleSizeCache.java
index 4d9f518..152f197 100644
--- a/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SingleSizeCache.java
+++ b/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SingleSizeCache.java
@@ -38,8 +38,9 @@ import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.hbase.util.ClassSize;
 import org.apache.hadoop.util.StringUtils;
 
-import com.google.common.collect.MapEvictionListener;
-import com.google.common.collect.MapMaker;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.RemovalListener;
+import com.google.common.cache.RemovalNotification;
 
 /**
  * SingleSizeCache is a slab allocated cache that caches elements up to a single
@@ -91,18 +92,30 @@ public class SingleSizeCache implements BlockCache, HeapSize {
     // This evictionListener is called whenever the cache automatically
     // evicts
     // something.
-    MapEvictionListener<BlockCacheKey, CacheablePair> listener = new MapEvictionListener<BlockCacheKey, CacheablePair>() {
-      @Override
-      public void onEviction(BlockCacheKey key, CacheablePair value) {
-        timeSinceLastAccess.set(System.nanoTime()
-            - value.recentlyAccessed.get());
-        stats.evict();
-        doEviction(key, value);
-      }
-    };
+    RemovalListener<BlockCacheKey, CacheablePair> listener =
+      new RemovalListener<BlockCacheKey, CacheablePair>() {
+        @Override
+        public void onRemoval(
+            RemovalNotification<BlockCacheKey, CacheablePair> notification) {
+          if (!notification.wasEvicted()) {
+            // Only process removals by eviction, not by replacement or
+            // explicit removal
+            return;
+          }
+          CacheablePair value = notification.getValue();
+          timeSinceLastAccess.set(System.nanoTime()
+              - value.recentlyAccessed.get());
+          stats.evict();
+          doEviction(notification.getKey(), value);
+        }
+      };
+
+    backingMap = CacheBuilder.newBuilder()
+        .maximumSize(numBlocks - 1)
+        .removalListener(listener)
+        .<BlockCacheKey, CacheablePair>build()
+        .asMap();
 
-    backingMap = new MapMaker().maximumSize(numBlocks - 1)
-        .evictionListener(listener).makeMap();
 
   }
 
-- 
1.7.0.4

