From 38e7637b1d2234c4534a564d6ecaf03f82fe9491 Mon Sep 17 00:00:00 2001
From: Xuefu Zhang <xzhang@xzlt.(none)>
Date: Fri, 24 May 2013 10:24:04 -0700
Subject: [PATCH 124/218] CDH-10427 Unable to create a table from existing file if file path has spaces

---
 .../org/apache/hadoop/hive/ql/parse/EximUtil.java  |    2 +-
 .../hadoop/hive/ql/parse/LoadSemanticAnalyzer.java |   10 +++++-----
 .../load_file_with_space_in_the_name.q             |    5 +++++
 .../load_file_with_space_in_the_name.q.out         |   17 +++++++++++++++++
 4 files changed, 28 insertions(+), 6 deletions(-)
 create mode 100644 ql/src/test/queries/clientpositive/load_file_with_space_in_the_name.q
 create mode 100644 ql/src/test/results/clientpositive/load_file_with_space_in_the_name.q.out

diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/parse/EximUtil.java b/src/ql/src/java/org/apache/hadoop/hive/ql/parse/EximUtil.java
index 3031d1c..7ee9e26 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/parse/EximUtil.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/parse/EximUtil.java
@@ -155,7 +155,7 @@ public class EximUtil {
       } catch (URISyntaxException e) {
         throw new SemanticException(ErrorMsg.INVALID_PATH.getMsg(), e);
       }
-      return uri.toString();
+      return uri.getPath();
     } else {
       //no-op for non-test mode for now
       return location;
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/parse/LoadSemanticAnalyzer.java b/src/ql/src/java/org/apache/hadoop/hive/ql/parse/LoadSemanticAnalyzer.java
index 9400acb..9bc7c81 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/parse/LoadSemanticAnalyzer.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/parse/LoadSemanticAnalyzer.java
@@ -84,7 +84,7 @@ public class LoadSemanticAnalyzer extends BaseSemanticAnalyzer {
     // directory
     if (!path.startsWith("/")) {
       if (isLocal) {
-        path = new Path(System.getProperty("user.dir"), path).toUri().toString();
+        path = new Path(System.getProperty("user.dir"), path).toUri().getPath();
       } else {
         path = new Path(new Path("/user/" + System.getProperty("user.name")),
           path).toString();
@@ -151,8 +151,8 @@ public class LoadSemanticAnalyzer extends BaseSemanticAnalyzer {
     if (!isLocal
         && (!StringUtils.equals(fromURI.getScheme(), toURI.getScheme()) || !StringUtils
         .equals(fromURI.getAuthority(), toURI.getAuthority()))) {
-      String reason = "Move from: " + fromURI.toString() + " to: "
-          + toURI.toString() + " is not valid. "
+      String reason = "Move from: " + fromURI.getPath() + " to: "
+          + toURI.getPath() + " is not valid. "
           + "Please check that values for params \"default.fs.name\" and "
           + "\"hive.metastore.warehouse.dir\" do not conflict.";
       throw new SemanticException(ErrorMsg.ILLEGAL_PATH.getMsg(ast, reason));
@@ -236,7 +236,7 @@ public class LoadSemanticAnalyzer extends BaseSemanticAnalyzer {
       // that's just a test case.
       String copyURIStr = ctx.getExternalTmpFileURI(toURI);
       URI copyURI = URI.create(copyURIStr);
-      rTask = TaskFactory.get(new CopyWork(fromURI.toString(), copyURIStr),
+      rTask = TaskFactory.get(new CopyWork(fromURI.getPath(), copyURIStr),
           conf);
       fromURI = copyURI;
     }
@@ -266,7 +266,7 @@ public class LoadSemanticAnalyzer extends BaseSemanticAnalyzer {
     }
 
 
-    LoadTableDesc loadTableWork = new LoadTableDesc(fromURI.toString(),
+    LoadTableDesc loadTableWork = new LoadTableDesc(fromURI.getPath(),
         loadTmpPath, Utilities.getTableDesc(ts.tableHandle), partSpec, isOverWrite);
 
     Task<? extends Serializable> childTask = TaskFactory.get(new MoveWork(getInputs(),
diff --git a/src/ql/src/test/queries/clientpositive/load_file_with_space_in_the_name.q b/src/ql/src/test/queries/clientpositive/load_file_with_space_in_the_name.q
new file mode 100644
index 0000000..3b8951a
--- /dev/null
+++ b/src/ql/src/test/queries/clientpositive/load_file_with_space_in_the_name.q
@@ -0,0 +1,5 @@
+-- test for loading into tables with the file with space in the name
+
+
+CREATE TABLE load_file_with_space_in_the_name(name STRING, age INT);
+LOAD DATA LOCAL INPATH '../data/files/person age.txt' INTO TABLE load_file_with_space_in_the_name;
diff --git a/src/ql/src/test/results/clientpositive/load_file_with_space_in_the_name.q.out b/src/ql/src/test/results/clientpositive/load_file_with_space_in_the_name.q.out
new file mode 100644
index 0000000..b159114
--- /dev/null
+++ b/src/ql/src/test/results/clientpositive/load_file_with_space_in_the_name.q.out
@@ -0,0 +1,17 @@
+PREHOOK: query: -- test for loading into tables with the file with space in the name
+
+
+CREATE TABLE load_file_with_space_in_the_name(name STRING, age INT)
+PREHOOK: type: CREATETABLE
+POSTHOOK: query: -- test for loading into tables with the file with space in the name
+
+
+CREATE TABLE load_file_with_space_in_the_name(name STRING, age INT)
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: default@load_file_with_space_in_the_name
+PREHOOK: query: LOAD DATA LOCAL INPATH '../data/files/person age.txt' INTO TABLE load_file_with_space_in_the_name
+PREHOOK: type: LOAD
+PREHOOK: Output: default@load_file_with_space_in_the_name
+POSTHOOK: query: LOAD DATA LOCAL INPATH '../data/files/person age.txt' INTO TABLE load_file_with_space_in_the_name
+POSTHOOK: type: LOAD
+POSTHOOK: Output: default@load_file_with_space_in_the_name
-- 
1.7.0.4

