From fac54342934abd9e052e10f4ec758b4738e73dfd Mon Sep 17 00:00:00 2001
From: Xuefu Zhang <xzhang@xzlt.(none)>
Date: Tue, 5 Nov 2013 15:46:39 -0800
Subject: [PATCH 207/218] CDH-15255: HiveServer2 doesn't not pass the proxy user specified by Hue to the remote metastore

---
 .../hive/service/cli/session/SessionManager.java   |   50 +++-------------
 .../hive/service/cli/thrift/ThriftCLIService.java  |   61 +++++++++++++++++++-
 2 files changed, 69 insertions(+), 42 deletions(-)

diff --git a/src/service/src/java/org/apache/hive/service/cli/session/SessionManager.java b/src/service/src/java/org/apache/hive/service/cli/session/SessionManager.java
index e6742c8..cc5ab7f 100644
--- a/src/service/src/java/org/apache/hive/service/cli/session/SessionManager.java
+++ b/src/service/src/java/org/apache/hive/service/cli/session/SessionManager.java
@@ -18,7 +18,6 @@
 
 package org.apache.hive.service.cli.session;
 
-import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -80,11 +79,6 @@ public class SessionManager extends CompositeService {
   public SessionHandle openSession(String username, String password, Map<String, String> sessionConf,
           boolean withImpersonation, String delegationToken) throws HiveSQLException {
     HiveSession session;
-    if (username == null) {
-      username = threadLocalUserName.get();
-    }
-
-    username = getProxyUser(username, sessionConf, threadLocalIpAddress.get());
     if (withImpersonation) {
           HiveSessionImplwithUGI hiveSessionUgi = new HiveSessionImplwithUGI(username, password, sessionConf,
               threadLocalIpAddress.get(), delegationToken);
@@ -138,7 +132,7 @@ public class SessionManager extends CompositeService {
   public LogManager getLogManager() {
     return logManager;
   }
-
+  
   private static ThreadLocal<String> threadLocalIpAddress = new ThreadLocal<String>() {
     @Override
     protected synchronized String initialValue() {
@@ -154,6 +148,10 @@ public class SessionManager extends CompositeService {
     threadLocalIpAddress.remove();
   }
 
+  public static String getIpAddress() {
+    return threadLocalIpAddress.get();
+  }
+
   private static ThreadLocal<String> threadLocalUserName = new ThreadLocal<String>(){
     @Override
     protected synchronized String initialValue() {
@@ -174,6 +172,10 @@ public class SessionManager extends CompositeService {
     clearUserName();
   }
 
+  public static String getUserName() {
+    return threadLocalUserName.get();
+  }
+
   // execute session hooks
   private void executeSessionHooks(HiveSession session) throws Exception {
     String hookList = hiveConf.getVar(HiveConf.ConfVars.HIVE_SERVER2_SESSION_HOOK).trim();
@@ -189,38 +191,4 @@ public class SessionManager extends CompositeService {
     }
   }
 
-  /**
-   * If the proxy user name is provided then check privileges to substitute the user.
-   * @param realUser
-   * @param sessionConf
-   * @param ipAddress
-   * @return
-   * @throws HiveSQLException
-   */
-  private String getProxyUser(String realUser, Map<String, String> sessionConf, String ipAddress)
-      throws HiveSQLException {
-    if (sessionConf == null || !sessionConf.containsKey(HiveAuthFactory.HS2_PROXY_USER)) {
-      return realUser;
-    }
-
-    // Extract the proxy user name and check if we are allowed to do the substitution
-    String proxyUser = sessionConf.get(HiveAuthFactory.HS2_PROXY_USER);
-    if (!hiveConf.getBoolVar(HiveConf.ConfVars.HIVE_SERVER2_ALLOW_USER_SUBSTITUTION)) {
-      throw new HiveSQLException("Proxy user substitution is not allowed");
-    }
-    if (!ShimLoader.getHadoopShims().isSecurityEnabled()) {
-      throw new HiveSQLException("Proxy user substitution is not supported for unsecure hadoop");
-    }
-
-    // Verify proxy user privilege of the realUser for the proxyUser
-    try {
-      UserGroupInformation sessionUgi = ShimLoader.getHadoopShims().createProxyUser(realUser);
-      ShimLoader.getHadoopShims().
-          authorizeProxyAccess(proxyUser, sessionUgi, ipAddress, hiveConf);
-      return proxyUser;
-    } catch (IOException e) {
-      throw new HiveSQLException("Failed to validate proxy privilage of " + realUser +
-          " for " + proxyUser, " 08004", e);
-    }
-  }
 }
diff --git a/src/service/src/java/org/apache/hive/service/cli/thrift/ThriftCLIService.java b/src/service/src/java/org/apache/hive/service/cli/thrift/ThriftCLIService.java
index 0ec60d4..cd79c19 100644
--- a/src/service/src/java/org/apache/hive/service/cli/thrift/ThriftCLIService.java
+++ b/src/service/src/java/org/apache/hive/service/cli/thrift/ThriftCLIService.java
@@ -19,6 +19,7 @@
 package org.apache.hive.service.cli.thrift;
 
 import java.net.InetSocketAddress;
+import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -26,6 +27,8 @@ import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hive.conf.HiveConf;
 import org.apache.hadoop.hive.conf.HiveConf.ConfVars;
+import org.apache.hadoop.hive.shims.ShimLoader;
+import org.apache.hadoop.security.UserGroupInformation;
 import org.apache.hive.service.AbstractService;
 import org.apache.hive.service.auth.HiveAuthFactory;
 import org.apache.hive.service.cli.CLIService;
@@ -38,6 +41,7 @@ import org.apache.hive.service.cli.OperationState;
 import org.apache.hive.service.cli.RowSet;
 import org.apache.hive.service.cli.SessionHandle;
 import org.apache.hive.service.cli.TableSchema;
+import org.apache.hive.service.cli.session.SessionManager;
 import org.apache.thrift.TException;
 import org.apache.thrift.TProcessorFactory;
 import org.apache.thrift.protocol.TBinaryProtocol;
@@ -106,7 +110,13 @@ public class ThriftCLIService extends AbstractService implements TCLIService.Ifa
     super.stop();
   }
 
-
+  private String getIpAddress() {
+    if(hiveAuthFactory != null) {
+      return hiveAuthFactory.getIpAddress();
+    }
+    return SessionManager.getIpAddress();
+  }
+  
   @Override
   public TOpenSessionResp OpenSession(TOpenSessionReq req) throws TException {
     TOpenSessionResp resp = new TOpenSessionResp();
@@ -118,8 +128,15 @@ public class ThriftCLIService extends AbstractService implements TCLIService.Ifa
         userName = hiveAuthFactory.getRemoteUser();
         ipAddress = hiveAuthFactory.getIpAddress();
       } else {
+        userName = SessionManager.getUserName();
+      }
+      
+      if (userName == null) {
         userName = req.getUsername();
       }
+      
+      userName =  getProxyUser(userName, req.getConfiguration(), getIpAddress());
+      
       SessionHandle sessionHandle = null;
       if (cliService.getHiveConf().
           getBoolVar(HiveConf.ConfVars.HIVE_SERVER2_KERBEROS_IMPERSONATION)) {
@@ -532,4 +549,46 @@ public class ThriftCLIService extends AbstractService implements TCLIService.Ifa
     }
   }
 
+  /**
+   * If the proxy user name is provided then check privileges to substitute the user.
+   * @param realUser
+   * @param sessionConf
+   * @param ipAddress
+   * @return
+   * @throws HiveSQLException
+   */
+  private String getProxyUser(String realUser, Map<String, String> sessionConf, String ipAddress)
+      throws HiveSQLException {
+    if (sessionConf == null || !sessionConf.containsKey(HiveAuthFactory.HS2_PROXY_USER)) {
+      return realUser;
+    }
+
+    // Extract the proxy user name and check if we are allowed to do the substitution
+    String proxyUser = sessionConf.get(HiveAuthFactory.HS2_PROXY_USER);
+    if (!hiveConf.getBoolVar(HiveConf.ConfVars.HIVE_SERVER2_ALLOW_USER_SUBSTITUTION)) {
+      throw new HiveSQLException("Proxy user substitution is not allowed");
+    }
+
+    // If there's no authentication, then directly substitute the user
+    if (HiveAuthFactory.AuthTypes.NONE.toString().
+        equalsIgnoreCase(hiveConf.getVar(ConfVars.HIVE_SERVER2_AUTHENTICATION))) {
+      return proxyUser;
+    }
+
+    // Verify proxy user privilege of the realUser for the proxyUser
+    try {
+      UserGroupInformation sessionUgi;
+      if (!ShimLoader.getHadoopShims().isSecurityEnabled()) {
+        sessionUgi = ShimLoader.getHadoopShims().createProxyUser(realUser);
+      } else {
+        sessionUgi = ShimLoader.getHadoopShims().createRemoteUser(realUser, null);
+      }
+      ShimLoader.getHadoopShims().
+      authorizeProxyAccess(proxyUser, sessionUgi, ipAddress, hiveConf);
+      return proxyUser;
+    } catch (IOException e) {
+      throw new HiveSQLException("Failed to validate proxy privilage of " + realUser +
+          " for " + proxyUser, e);
+    }
+  }
 }
-- 
1.7.0.4

