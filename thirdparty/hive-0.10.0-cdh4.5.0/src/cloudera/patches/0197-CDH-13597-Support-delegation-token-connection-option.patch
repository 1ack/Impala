From 5d969ff335e6ec8ab4d3080cf33f14ee0aed78f5 Mon Sep 17 00:00:00 2001
From: Prasad Mujumdar <prasadm@cloudera.com>
Date: Wed, 14 Aug 2013 00:12:59 -0700
Subject: [PATCH 197/218] CDH-13597: Support delegation token connection option beeline option

---
 .../src/java/org/apache/hive/beeline/BeeLine.java  |    8 ++++++--
 .../src/java/org/apache/hive/beeline/Commands.java |    9 +++++++--
 .../apache/hive/beeline/DatabaseConnection.java    |   11 +++++------
 .../java/org/apache/hive/jdbc/HiveConnection.java  |    7 ++++---
 jdbc/src/java/org/apache/hive/jdbc/Utils.java      |    2 +-
 .../hive/service/cli/session/SessionManager.java   |    2 +-
 .../hive/service/cli/thrift/ThriftCLIService.java  |    8 +++++++-
 7 files changed, 31 insertions(+), 16 deletions(-)

diff --git a/src/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/src/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index aeb1e8b..20c6d98 100644
--- a/src/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/src/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -118,7 +118,7 @@ import jline.SimpleCompletor;
 public class BeeLine {
   private static final ResourceBundle resourceBundle =
       ResourceBundle.getBundle(BeeLine.class.getName());
-  private BeeLineSignalHandler signalHandler = null;
+  private final BeeLineSignalHandler signalHandler = null;
   private static final String separator = System.getProperty("line.separator");
   private boolean exit = false;
   private final DatabaseConnections connections = new DatabaseConnections();
@@ -519,6 +519,7 @@ public class BeeLine {
     List<String> commands = new LinkedList<String>();
     List<String> files = new LinkedList<String>();
     String driver = null, user = null, pass = null, url = null, cmd = null;
+    String auth = null;
 
     for (int i = 0; i < args.length; i++) {
       if (args[i].equals("--help") || args[i].equals("-h")) {
@@ -551,6 +552,8 @@ public class BeeLine {
         driver = args[i++ + 1];
       } else if (args[i].equals("-n")) {
         user = args[i++ + 1];
+      } else if (args[i].equals("-a")) {
+        auth = args[i++ + 1];
       } else if (args[i].equals("-p")) {
         pass = args[i++ + 1];
       } else if (args[i].equals("-u")) {
@@ -579,7 +582,8 @@ public class BeeLine {
           + url + " "
           + (user == null || user.length() == 0 ? "''" : user) + " "
           + (pass == null || pass.length() == 0 ? "''" : pass) + " "
-          + (driver == null ? "" : driver);
+          + (driver == null || driver.length() == 0 ? "''" : driver) + " "
+          + ( auth == null ? "" : auth);
       debug("issuing: " + com);
       dispatch(com);
     }
diff --git a/src/beeline/src/java/org/apache/hive/beeline/Commands.java b/src/beeline/src/java/org/apache/hive/beeline/Commands.java
index 3799cc1..7bdd20c 100644
--- a/src/beeline/src/java/org/apache/hive/beeline/Commands.java
+++ b/src/beeline/src/java/org/apache/hive/beeline/Commands.java
@@ -864,7 +864,7 @@ public class Commands {
 
 
   public boolean connect(String line) throws Exception {
-    String example = "Usage: connect <url> <username> <password> [driver]"
+    String example = "Usage: connect <url> <username> <password> [driver] [auth]"
         + BeeLine.getSeparator();
 
     String[] parts = beeLine.split(line);
@@ -880,6 +880,7 @@ public class Commands {
     String user = parts.length < 3 ? null : parts[2];
     String pass = parts.length < 4 ? null : parts[3];
     String driver = parts.length < 5 ? null : parts[4];
+    String auth = parts.length < 6 ? null : parts[5];
 
     Properties props = new Properties();
     if (url != null) {
@@ -894,6 +895,10 @@ public class Commands {
     if (pass != null) {
       props.setProperty("password", pass);
     }
+    if (auth != null) {
+      props.setProperty("auth", auth);
+    }
+
     return connect(props);
   }
 
@@ -962,7 +967,7 @@ public class Commands {
 
     try {
       beeLine.getDatabaseConnections().setConnection(
-          new DatabaseConnection(beeLine, driver, url, username, password));
+          new DatabaseConnection(beeLine, driver, url, props));
       beeLine.getDatabaseConnection().getConnection();
 
       beeLine.setCompletions();
diff --git a/src/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java b/src/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
index 68d82ca..7c188a6 100644
--- a/src/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
+++ b/src/beeline/src/java/org/apache/hive/beeline/DatabaseConnection.java
@@ -52,6 +52,7 @@ import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.Properties;
 import java.util.Set;
 import java.util.TreeSet;
 
@@ -64,19 +65,17 @@ class DatabaseConnection {
   private DatabaseMetaData meta;
   private final String driver;
   private final String url;
-  private final String username;
-  private final String password;
+  private final Properties props;
   private Schema schema = null;
   private Completor sqlCompletor = null;
 
 
   public DatabaseConnection(BeeLine beeLine, String driver, String url,
-      String username, String password) throws SQLException {
+      Properties props) throws SQLException {
     this.beeLine = beeLine;
     this.driver = driver;
     this.url = url;
-    this.username = username;
-    this.password = password;
+    this.props = props;
   }
 
 
@@ -149,7 +148,7 @@ class DatabaseConnection {
       return beeLine.error(e);
     }
 
-    setConnection(DriverManager.getConnection(getUrl(), username, password));
+    setConnection(DriverManager.getConnection(getUrl(), props));
     setDatabaseMetaData(getConnection().getMetaData());
 
     try {
diff --git a/src/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java b/src/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java
index 2f3a47a..f1ec2cd 100644
--- a/src/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java
+++ b/src/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java
@@ -113,6 +113,9 @@ public class HiveConnection implements java.sql.Connection {
             connParams.getSessionVars().put(HIVE_AUTH_PASSWD, info.getProperty(HIVE_AUTH_PASSWD));
         }
       }
+      if (info.containsKey(HIVE_AUTH_TYPE)) {
+        connParams.getSessionVars().put(HIVE_AUTH_TYPE, info.getProperty(HIVE_AUTH_TYPE));
+      }
 
       openTransport(uri, connParams.getHost(), connParams.getPort(), connParams.getSessionVars());
     }
@@ -200,9 +203,7 @@ public class HiveConnection implements java.sql.Connection {
   private String getClientDelegationToken(Map<String, String> jdbcConnConf)
       throws SQLException {
     String tokenStr = null;
-    if (jdbcConnConf.get(HIVE_AUTH_TOKEN) != null) {
-      tokenStr = jdbcConnConf.get(HIVE_AUTH_TOKEN);
-    } else {
+    if (HIVE_AUTH_TOKEN.equalsIgnoreCase(jdbcConnConf.get(HIVE_AUTH_TYPE))) {
       // check delegation token in job conf if any
       try {
         tokenStr = ShimLoader.getHadoopShims().getTokenStrForm(HiveAuthFactory.HS2_CLIENT_TOKEN);
diff --git a/src/jdbc/src/java/org/apache/hive/jdbc/Utils.java b/src/jdbc/src/java/org/apache/hive/jdbc/Utils.java
index 4c5d90a..485c8c8 100644
--- a/src/jdbc/src/java/org/apache/hive/jdbc/Utils.java
+++ b/src/jdbc/src/java/org/apache/hive/jdbc/Utils.java
@@ -158,7 +158,7 @@ public class Utils {
   // Verify success and optionally with_info status, else throw SQLException
   public static void verifySuccess(TStatus status, boolean withInfo) throws SQLException {
     if ((status.getStatusCode() != TStatusCode.SUCCESS_STATUS) &&
-        (withInfo && (status.getStatusCode() != TStatusCode.SUCCESS_WITH_INFO_STATUS))) {
+        (!withInfo || (status.getStatusCode() != TStatusCode.SUCCESS_WITH_INFO_STATUS))) {
       throw new SQLException(status.getErrorMessage(),
            status.getSqlState(), status.getErrorCode());
       }
diff --git a/src/service/src/java/org/apache/hive/service/cli/session/SessionManager.java b/src/service/src/java/org/apache/hive/service/cli/session/SessionManager.java
index 1c3bff6..e6742c8 100644
--- a/src/service/src/java/org/apache/hive/service/cli/session/SessionManager.java
+++ b/src/service/src/java/org/apache/hive/service/cli/session/SessionManager.java
@@ -220,7 +220,7 @@ public class SessionManager extends CompositeService {
       return proxyUser;
     } catch (IOException e) {
       throw new HiveSQLException("Failed to validate proxy privilage of " + realUser +
-          " for " + proxyUser, e);
+          " for " + proxyUser, " 08004", e);
     }
   }
 }
diff --git a/src/service/src/java/org/apache/hive/service/cli/thrift/ThriftCLIService.java b/src/service/src/java/org/apache/hive/service/cli/thrift/ThriftCLIService.java
index 485b8e4..9e8da87 100644
--- a/src/service/src/java/org/apache/hive/service/cli/thrift/ThriftCLIService.java
+++ b/src/service/src/java/org/apache/hive/service/cli/thrift/ThriftCLIService.java
@@ -410,11 +410,16 @@ public class ThriftCLIService extends AbstractService implements TCLIService.Ifa
         String token = cliService.getDelegationToken(
             new SessionHandle(req.getSessionHandle()),
             hiveAuthFactory, req.getOwner(), req.getRenewer());
+        if (token == null || token.isEmpty()) {
+          throw new HiveSQLException("Got empty token");
+        }
         resp.setDelegationToken(token);
         resp.setStatus(OK_STATUS);
       } catch (HiveSQLException e) {
         e.printStackTrace();
-        resp.setStatus(HiveSQLException.toTStatus(e));
+        TStatus tokenErrorStatus = HiveSQLException.toTStatus(e);
+        tokenErrorStatus.setSqlState("42000");
+        resp.setStatus(tokenErrorStatus);
       }
     }
     return resp;
@@ -462,6 +467,7 @@ public class ThriftCLIService extends AbstractService implements TCLIService.Ifa
     TStatus errorStatus = new TStatus(TStatusCode.ERROR_STATUS);
     errorStatus.setErrorMessage("Delegation token only supported over remote " +
     		"client with kerberos authentication");
+    errorStatus.setSqlState("42000");
     return errorStatus;
   }
 
-- 
1.7.0.4

