From 37cf736bcbe6c440c606add862335ee0f35bb9a7 Mon Sep 17 00:00:00 2001
From: Zhenxiao Luo <zhenxiao@cloudera.com>
Date: Fri, 24 Aug 2012 11:31:37 -0700
Subject: [PATCH 130/148] HIVE-3240. Fix non-deterministic results in newline.q and timestamp_lazy.q

Reason: Bug
Author: Zhenxiao Luo
Ref: CDH-6677
---
 ql/src/test/queries/clientpositive/newline.q       |   14 +++---
 .../test/queries/clientpositive/timestamp_lazy.q   |    4 +-
 ql/src/test/results/clientpositive/newline.q.out   |   44 ++++++++++----------
 .../results/clientpositive/timestamp_lazy.q.out    |   20 ++++----
 4 files changed, 41 insertions(+), 41 deletions(-)

diff --git a/src/ql/src/test/queries/clientpositive/newline.q b/src/ql/src/test/queries/clientpositive/newline.q
index aa28f54..0072a49 100644
--- a/src/ql/src/test/queries/clientpositive/newline.q
+++ b/src/ql/src/test/queries/clientpositive/newline.q
@@ -6,7 +6,7 @@ insert overwrite table tmp_tmp
 SELECT TRANSFORM(key, value) USING
 'python newline.py' AS key, value FROM src limit 6;
 
-select * from tmp_tmp;
+select * from tmp_tmp ORDER BY key ASC, value ASC;
 
 drop table tmp_tmp;
 
@@ -20,7 +20,7 @@ insert overwrite table tmp_tmp
 SELECT TRANSFORM(key, value) USING
 'python escapednewline.py' AS key, value FROM src limit 5;
 
-select * from tmp_tmp;
+select * from tmp_tmp ORDER BY key ASC, value ASC;
 
 SELECT TRANSFORM(key, value) USING
 '/bin/cat' AS (key, value) FROM tmp_tmp;
@@ -29,7 +29,7 @@ insert overwrite table tmp_tmp
 SELECT TRANSFORM(key, value) USING
 'python escapedcarriagereturn.py' AS key, value FROM src limit 5;
 
-select * from tmp_tmp;
+select * from tmp_tmp ORDER BY key ASC, value ASC;
 
 SELECT TRANSFORM(key, value) USING
 '/bin/cat' AS (key, value) FROM tmp_tmp;
@@ -38,7 +38,7 @@ insert overwrite table tmp_tmp
 SELECT TRANSFORM(key, value) USING
 'python escapedtab.py' AS key, value FROM src limit 5;
 
-select * from tmp_tmp;
+select * from tmp_tmp ORDER BY key ASC, value ASC;
 
 SELECT TRANSFORM(key, value) USING
 '/bin/cat' AS (key, value) FROM tmp_tmp;
@@ -47,11 +47,11 @@ insert overwrite table tmp_tmp
 SELECT TRANSFORM(key, value) USING
 'python doubleescapedtab.py' AS key, value FROM src limit 5;
 
-select * from tmp_tmp;
+select * from tmp_tmp ORDER BY key ASC, value ASC;
 
 SELECT TRANSFORM(key, value) USING
 '/bin/cat' AS (key, value) FROM tmp_tmp;
 
-SELECT key FROM (SELECT TRANSFORM ('a\tb', 'c') USING '/bin/cat' AS (key, value) FROM src limit 1)a;
+SELECT key FROM (SELECT TRANSFORM ('a\tb', 'c') USING '/bin/cat' AS (key, value) FROM src limit 1)a ORDER BY key ASC;
 
-SELECT value FROM (SELECT TRANSFORM ('a\tb', 'c') USING '/bin/cat' AS (key, value) FROM src limit 1)a;
+SELECT value FROM (SELECT TRANSFORM ('a\tb', 'c') USING '/bin/cat' AS (key, value) FROM src limit 1)a ORDER BY value ASC;
diff --git a/src/ql/src/test/queries/clientpositive/timestamp_lazy.q b/src/ql/src/test/queries/clientpositive/timestamp_lazy.q
index 2b42a43..7a10052 100644
--- a/src/ql/src/test/queries/clientpositive/timestamp_lazy.q
+++ b/src/ql/src/test/queries/clientpositive/timestamp_lazy.q
@@ -2,5 +2,5 @@ drop table timestamp_lazy;
 create table timestamp_lazy (t timestamp, key string, value string);
 insert overwrite table timestamp_lazy select cast('2011-01-01 01:01:01' as timestamp), key, value from src limit 5;
 
-select t,key,value from timestamp_lazy;
-select t,key,value from timestamp_lazy distribute by t;
\ No newline at end of file
+select t,key,value from timestamp_lazy ORDER BY key ASC, value ASC;
+select t,key,value from timestamp_lazy distribute by t sort by key ASC, value ASC;
diff --git a/src/ql/src/test/results/clientpositive/newline.q.out b/src/ql/src/test/results/clientpositive/newline.q.out
index 73c42b0..fa29a92 100644
--- a/src/ql/src/test/results/clientpositive/newline.q.out
+++ b/src/ql/src/test/results/clientpositive/newline.q.out
@@ -17,26 +17,26 @@ POSTHOOK: Input: default@src
 POSTHOOK: Output: default@tmp_tmp
 POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
-PREHOOK: query: select * from tmp_tmp
+PREHOOK: query: select * from tmp_tmp ORDER BY key ASC, value ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@tmp_tmp
 #### A masked pattern was here ####
-POSTHOOK: query: select * from tmp_tmp
+POSTHOOK: query: select * from tmp_tmp ORDER BY key ASC, value ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@tmp_tmp
 #### A masked pattern was here ####
 POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
-1
+1	2	NULL
+1	2	NULL
+1	NULL
 2	NULL
-1
+1	NULL
 2	NULL
-1	2	NULL
-1
+1	NULL
 2	NULL
-1
+1	NULL
 2	NULL
-1	2	NULL
 PREHOOK: query: drop table tmp_tmp
 PREHOOK: type: DROPTABLE
 PREHOOK: Input: default@tmp_tmp
@@ -70,11 +70,11 @@ POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:strin
 POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
-PREHOOK: query: select * from tmp_tmp
+PREHOOK: query: select * from tmp_tmp ORDER BY key ASC, value ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@tmp_tmp
 #### A masked pattern was here ####
-POSTHOOK: query: select * from tmp_tmp
+POSTHOOK: query: select * from tmp_tmp ORDER BY key ASC, value ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@tmp_tmp
 #### A masked pattern was here ####
@@ -124,11 +124,11 @@ POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:strin
 POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
-PREHOOK: query: select * from tmp_tmp
+PREHOOK: query: select * from tmp_tmp ORDER BY key ASC, value ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@tmp_tmp
 #### A masked pattern was here ####
-POSTHOOK: query: select * from tmp_tmp
+POSTHOOK: query: select * from tmp_tmp ORDER BY key ASC, value ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@tmp_tmp
 #### A masked pattern was here ####
@@ -184,11 +184,11 @@ POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:str
 POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
-PREHOOK: query: select * from tmp_tmp
+PREHOOK: query: select * from tmp_tmp ORDER BY key ASC, value ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@tmp_tmp
 #### A masked pattern was here ####
-POSTHOOK: query: select * from tmp_tmp
+POSTHOOK: query: select * from tmp_tmp ORDER BY key ASC, value ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@tmp_tmp
 #### A masked pattern was here ####
@@ -250,11 +250,11 @@ POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:str
 POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
-PREHOOK: query: select * from tmp_tmp
+PREHOOK: query: select * from tmp_tmp ORDER BY key ASC, value ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@tmp_tmp
 #### A masked pattern was here ####
-POSTHOOK: query: select * from tmp_tmp
+POSTHOOK: query: select * from tmp_tmp ORDER BY key ASC, value ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@tmp_tmp
 #### A masked pattern was here ####
@@ -269,10 +269,10 @@ POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:str
 POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
 1\	2	NULL
-1\\t2	NULL
 1\	2	NULL
-1\\t2	NULL
 1\	2	NULL
+1\\t2	NULL
+1\\t2	NULL
 PREHOOK: query: SELECT TRANSFORM(key, value) USING
 '/bin/cat' AS (key, value) FROM tmp_tmp
 PREHOOK: type: QUERY
@@ -298,11 +298,11 @@ POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:str
 1\	2	NULL
 1\\t2	NULL
 1\	2	NULL
-PREHOOK: query: SELECT key FROM (SELECT TRANSFORM ('a\tb', 'c') USING '/bin/cat' AS (key, value) FROM src limit 1)a
+PREHOOK: query: SELECT key FROM (SELECT TRANSFORM ('a\tb', 'c') USING '/bin/cat' AS (key, value) FROM src limit 1)a ORDER BY key ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
 #### A masked pattern was here ####
-POSTHOOK: query: SELECT key FROM (SELECT TRANSFORM ('a\tb', 'c') USING '/bin/cat' AS (key, value) FROM src limit 1)a
+POSTHOOK: query: SELECT key FROM (SELECT TRANSFORM ('a\tb', 'c') USING '/bin/cat' AS (key, value) FROM src limit 1)a ORDER BY key ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 #### A masked pattern was here ####
@@ -317,11 +317,11 @@ POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:str
 POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
 a	b
-PREHOOK: query: SELECT value FROM (SELECT TRANSFORM ('a\tb', 'c') USING '/bin/cat' AS (key, value) FROM src limit 1)a
+PREHOOK: query: SELECT value FROM (SELECT TRANSFORM ('a\tb', 'c') USING '/bin/cat' AS (key, value) FROM src limit 1)a ORDER BY value ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
 #### A masked pattern was here ####
-POSTHOOK: query: SELECT value FROM (SELECT TRANSFORM ('a\tb', 'c') USING '/bin/cat' AS (key, value) FROM src limit 1)a
+POSTHOOK: query: SELECT value FROM (SELECT TRANSFORM ('a\tb', 'c') USING '/bin/cat' AS (key, value) FROM src limit 1)a ORDER BY value ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 #### A masked pattern was here ####
diff --git a/src/ql/src/test/results/clientpositive/timestamp_lazy.q.out b/src/ql/src/test/results/clientpositive/timestamp_lazy.q.out
index 9f68281..fff9784 100644
--- a/src/ql/src/test/results/clientpositive/timestamp_lazy.q.out
+++ b/src/ql/src/test/results/clientpositive/timestamp_lazy.q.out
@@ -18,35 +18,35 @@ POSTHOOK: Output: default@timestamp_lazy
 POSTHOOK: Lineage: timestamp_lazy.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
 POSTHOOK: Lineage: timestamp_lazy.t EXPRESSION []
 POSTHOOK: Lineage: timestamp_lazy.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
-PREHOOK: query: select t,key,value from timestamp_lazy
+PREHOOK: query: select t,key,value from timestamp_lazy ORDER BY key ASC, value ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@timestamp_lazy
 #### A masked pattern was here ####
-POSTHOOK: query: select t,key,value from timestamp_lazy
+POSTHOOK: query: select t,key,value from timestamp_lazy ORDER BY key ASC, value ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@timestamp_lazy
 #### A masked pattern was here ####
 POSTHOOK: Lineage: timestamp_lazy.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
 POSTHOOK: Lineage: timestamp_lazy.t EXPRESSION []
 POSTHOOK: Lineage: timestamp_lazy.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+2011-01-01 01:01:01	165	val_165
 2011-01-01 01:01:01	238	val_238
-2011-01-01 01:01:01	86	val_86
-2011-01-01 01:01:01	311	val_311
 2011-01-01 01:01:01	27	val_27
-2011-01-01 01:01:01	165	val_165
-PREHOOK: query: select t,key,value from timestamp_lazy distribute by t
+2011-01-01 01:01:01	311	val_311
+2011-01-01 01:01:01	86	val_86
+PREHOOK: query: select t,key,value from timestamp_lazy distribute by t sort by key ASC, value ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@timestamp_lazy
 #### A masked pattern was here ####
-POSTHOOK: query: select t,key,value from timestamp_lazy distribute by t
+POSTHOOK: query: select t,key,value from timestamp_lazy distribute by t sort by key ASC, value ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@timestamp_lazy
 #### A masked pattern was here ####
 POSTHOOK: Lineage: timestamp_lazy.key SIMPLE [(src)src.FieldSchema(name:key, type:string, comment:default), ]
 POSTHOOK: Lineage: timestamp_lazy.t EXPRESSION []
 POSTHOOK: Lineage: timestamp_lazy.value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
+2011-01-01 01:01:01	165	val_165
 2011-01-01 01:01:01	238	val_238
-2011-01-01 01:01:01	86	val_86
-2011-01-01 01:01:01	311	val_311
 2011-01-01 01:01:01	27	val_27
-2011-01-01 01:01:01	165	val_165
+2011-01-01 01:01:01	311	val_311
+2011-01-01 01:01:01	86	val_86
-- 
1.7.0.4

