From e76648fae0296a6f9ced90a1ab741cac885f14fc Mon Sep 17 00:00:00 2001
From: Zhenxiao Luo <zhenxiao@cloudera.com>
Date: Mon, 9 Jul 2012 22:15:47 -0700
Subject: [PATCH 106/144] Hive thrift code doesnt generate quality hashCode()
 (Liu Tim via Carl Steinbach)

Summary:

Hive thrift code doesnt generate quality hashCode(). Right now, it all has
@Override
public int hashCode() { return 0; }

It will cause all entries go to the same bucket if it's used as hash key.

Test Plan:
ant clean package test

pass 1946 tests

Reviewers: njain, kevinwilfong, cwsteinbach

Reviewed By: cwsteinbach

Differential Revision: https://reviews.facebook.net/D3759

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1353720 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit fc069edbe13def89277746757b9e27014837cc6d)
---
 build-common.xml                                   |    4 +-
 .../hive/metastore/api/AlreadyExistsException.java |   10 +-
 .../metastore/api/ConfigValSecurityException.java  |   10 +-
 .../hadoop/hive/metastore/api/Constants.java       |    1 +
 .../apache/hadoop/hive/metastore/api/Database.java |   30 +-
 .../hive/metastore/api/EnvironmentContext.java     |   10 +-
 .../hadoop/hive/metastore/api/FieldSchema.java     |   20 +-
 .../hive/metastore/api/HiveObjectPrivilege.java    |   25 +-
 .../hadoop/hive/metastore/api/HiveObjectRef.java   |   30 +-
 .../apache/hadoop/hive/metastore/api/Index.java    |   55 +-
 .../metastore/api/IndexAlreadyExistsException.java |   10 +-
 .../hive/metastore/api/InvalidObjectException.java |   10 +-
 .../metastore/api/InvalidOperationException.java   |   10 +-
 .../metastore/api/InvalidPartitionException.java   |   10 +-
 .../hadoop/hive/metastore/api/MetaException.java   |   10 +-
 .../hive/metastore/api/NoSuchObjectException.java  |   10 +-
 .../apache/hadoop/hive/metastore/api/Order.java    |   15 +-
 .../hadoop/hive/metastore/api/Partition.java       |   45 +-
 .../hive/metastore/api/PrincipalPrivilegeSet.java  |   20 +-
 .../hadoop/hive/metastore/api/PrivilegeBag.java    |   10 +-
 .../hive/metastore/api/PrivilegeGrantInfo.java     |   30 +-
 .../org/apache/hadoop/hive/metastore/api/Role.java |   20 +-
 .../apache/hadoop/hive/metastore/api/Schema.java   |   15 +-
 .../hadoop/hive/metastore/api/SerDeInfo.java       |   20 +-
 .../hive/metastore/api/StorageDescriptor.java      |   55 +-
 .../apache/hadoop/hive/metastore/api/Table.java    |   70 +-
 .../hive/metastore/api/ThriftHiveMetastore.java    | 2373 ++++++++++++++++++--
 .../org/apache/hadoop/hive/metastore/api/Type.java |   25 +-
 .../hive/metastore/api/UnknownDBException.java     |   10 +-
 .../metastore/api/UnknownPartitionException.java   |   10 +-
 .../hive/metastore/api/UnknownTableException.java  |   10 +-
 .../apache/hadoop/hive/metastore/api/Version.java  |   15 +-
 .../apache/hadoop/hive/ql/plan/api/Adjacency.java  |   20 +-
 .../org/apache/hadoop/hive/ql/plan/api/Graph.java  |   20 +-
 .../apache/hadoop/hive/ql/plan/api/Operator.java   |   35 +-
 .../org/apache/hadoop/hive/ql/plan/api/Query.java  |   45 +-
 .../apache/hadoop/hive/ql/plan/api/QueryPlan.java  |   20 +-
 .../org/apache/hadoop/hive/ql/plan/api/Stage.java  |   40 +-
 .../org/apache/hadoop/hive/ql/plan/api/Task.java   |   45 +-
 .../org/apache/hadoop/hive/serde/Constants.java    |    1 +
 .../hadoop/hive/service/HiveClusterStatus.java     |   35 +-
 .../hadoop/hive/service/HiveServerException.java   |   20 +-
 .../org/apache/hadoop/hive/service/ThriftHive.java |  158 ++-
 43 files changed, 3243 insertions(+), 194 deletions(-)

diff --git a/src/build-common.xml b/src/build-common.xml
index 43efcef..c626034 100644
--- a/src/build-common.xml
+++ b/src/build-common.xml
@@ -64,7 +64,7 @@
   <property name="build.classes" location="${build.dir}/classes"/>
   <property name="build.encoding" value="ISO-8859-1"/>
 
-  <property name="thrift.args" value="-I ${thrift.home} --gen java:beans --gen cpp --gen php --gen py --gen rb"/>
+  <property name="thrift.args" value="-I ${thrift.home} --gen java:beans,hashcode --gen cpp --gen php --gen py --gen rb"/>
 
   <property name="hadoop.conf.dir" location="${hadoop.root}/conf"/>
 
@@ -496,7 +496,7 @@
     <property name="hadoop.testcp" refid="test.hadoop.classpath"/>
     <if>
       <equals arg1="${test.print.classpath}" arg2="true" />
-      <then>        
+      <then>
         <echo message="Test Classpath: ${hadoop.testcp}"/>
       </then>
     </if>
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/AlreadyExistsException.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/AlreadyExistsException.java
index 09cb891..dd4ac82 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/AlreadyExistsException.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/AlreadyExistsException.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -209,7 +210,14 @@ public class AlreadyExistsException extends Exception implements org.apache.thri
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_message = true && (isSetMessage());
+    builder.append(present_message);
+    if (present_message)
+      builder.append(message);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(AlreadyExistsException other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ConfigValSecurityException.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ConfigValSecurityException.java
index 102f4cf..e0b0b2f 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ConfigValSecurityException.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ConfigValSecurityException.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -209,7 +210,14 @@ public class ConfigValSecurityException extends Exception implements org.apache.
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_message = true && (isSetMessage());
+    builder.append(present_message);
+    if (present_message)
+      builder.append(message);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(ConfigValSecurityException other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Constants.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Constants.java
index dd4ac9c..cf84603 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Constants.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Constants.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Database.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Database.java
index 5780a5c..46125bc 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Database.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Database.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -464,7 +465,34 @@ public class Database implements org.apache.thrift.TBase<Database, Database._Fie
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_name = true && (isSetName());
+    builder.append(present_name);
+    if (present_name)
+      builder.append(name);
+
+    boolean present_description = true && (isSetDescription());
+    builder.append(present_description);
+    if (present_description)
+      builder.append(description);
+
+    boolean present_locationUri = true && (isSetLocationUri());
+    builder.append(present_locationUri);
+    if (present_locationUri)
+      builder.append(locationUri);
+
+    boolean present_parameters = true && (isSetParameters());
+    builder.append(present_parameters);
+    if (present_parameters)
+      builder.append(parameters);
+
+    boolean present_privileges = true && (isSetPrivileges());
+    builder.append(present_privileges);
+    if (present_privileges)
+      builder.append(privileges);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(Database other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/EnvironmentContext.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/EnvironmentContext.java
index 83a6939..18048a1 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/EnvironmentContext.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/EnvironmentContext.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -234,7 +235,14 @@ public class EnvironmentContext implements org.apache.thrift.TBase<EnvironmentCo
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_properties = true && (isSetProperties());
+    builder.append(present_properties);
+    if (present_properties)
+      builder.append(properties);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(EnvironmentContext other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FieldSchema.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FieldSchema.java
index 6df5577..0d2e20b 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FieldSchema.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FieldSchema.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -325,7 +326,24 @@ public class FieldSchema implements org.apache.thrift.TBase<FieldSchema, FieldSc
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_name = true && (isSetName());
+    builder.append(present_name);
+    if (present_name)
+      builder.append(name);
+
+    boolean present_type = true && (isSetType());
+    builder.append(present_type);
+    if (present_type)
+      builder.append(type);
+
+    boolean present_comment = true && (isSetComment());
+    builder.append(present_comment);
+    if (present_comment)
+      builder.append(comment);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(FieldSchema other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/HiveObjectPrivilege.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/HiveObjectPrivilege.java
index 0cb1927..cb0ced8 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/HiveObjectPrivilege.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/HiveObjectPrivilege.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -395,7 +396,29 @@ public class HiveObjectPrivilege implements org.apache.thrift.TBase<HiveObjectPr
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_hiveObject = true && (isSetHiveObject());
+    builder.append(present_hiveObject);
+    if (present_hiveObject)
+      builder.append(hiveObject);
+
+    boolean present_principalName = true && (isSetPrincipalName());
+    builder.append(present_principalName);
+    if (present_principalName)
+      builder.append(principalName);
+
+    boolean present_principalType = true && (isSetPrincipalType());
+    builder.append(present_principalType);
+    if (present_principalType)
+      builder.append(principalType.getValue());
+
+    boolean present_grantInfo = true && (isSetGrantInfo());
+    builder.append(present_grantInfo);
+    if (present_grantInfo)
+      builder.append(grantInfo);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(HiveObjectPrivilege other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/HiveObjectRef.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/HiveObjectRef.java
index 8d3370e..cd25830 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/HiveObjectRef.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/HiveObjectRef.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -473,7 +474,34 @@ public class HiveObjectRef implements org.apache.thrift.TBase<HiveObjectRef, Hiv
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_objectType = true && (isSetObjectType());
+    builder.append(present_objectType);
+    if (present_objectType)
+      builder.append(objectType.getValue());
+
+    boolean present_dbName = true && (isSetDbName());
+    builder.append(present_dbName);
+    if (present_dbName)
+      builder.append(dbName);
+
+    boolean present_objectName = true && (isSetObjectName());
+    builder.append(present_objectName);
+    if (present_objectName)
+      builder.append(objectName);
+
+    boolean present_partValues = true && (isSetPartValues());
+    builder.append(present_partValues);
+    if (present_partValues)
+      builder.append(partValues);
+
+    boolean present_columnName = true && (isSetColumnName());
+    builder.append(present_columnName);
+    if (present_columnName)
+      builder.append(columnName);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(HiveObjectRef other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Index.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Index.java
index 389f927..1d13c11 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Index.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Index.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -759,7 +760,59 @@ public class Index implements org.apache.thrift.TBase<Index, Index._Fields>, jav
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_indexName = true && (isSetIndexName());
+    builder.append(present_indexName);
+    if (present_indexName)
+      builder.append(indexName);
+
+    boolean present_indexHandlerClass = true && (isSetIndexHandlerClass());
+    builder.append(present_indexHandlerClass);
+    if (present_indexHandlerClass)
+      builder.append(indexHandlerClass);
+
+    boolean present_dbName = true && (isSetDbName());
+    builder.append(present_dbName);
+    if (present_dbName)
+      builder.append(dbName);
+
+    boolean present_origTableName = true && (isSetOrigTableName());
+    builder.append(present_origTableName);
+    if (present_origTableName)
+      builder.append(origTableName);
+
+    boolean present_createTime = true;
+    builder.append(present_createTime);
+    if (present_createTime)
+      builder.append(createTime);
+
+    boolean present_lastAccessTime = true;
+    builder.append(present_lastAccessTime);
+    if (present_lastAccessTime)
+      builder.append(lastAccessTime);
+
+    boolean present_indexTableName = true && (isSetIndexTableName());
+    builder.append(present_indexTableName);
+    if (present_indexTableName)
+      builder.append(indexTableName);
+
+    boolean present_sd = true && (isSetSd());
+    builder.append(present_sd);
+    if (present_sd)
+      builder.append(sd);
+
+    boolean present_parameters = true && (isSetParameters());
+    builder.append(present_parameters);
+    if (present_parameters)
+      builder.append(parameters);
+
+    boolean present_deferredRebuild = true;
+    builder.append(present_deferredRebuild);
+    if (present_deferredRebuild)
+      builder.append(deferredRebuild);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(Index other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/IndexAlreadyExistsException.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/IndexAlreadyExistsException.java
index 00f79f6..742aa28 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/IndexAlreadyExistsException.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/IndexAlreadyExistsException.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -209,7 +210,14 @@ public class IndexAlreadyExistsException extends Exception implements org.apache
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_message = true && (isSetMessage());
+    builder.append(present_message);
+    if (present_message)
+      builder.append(message);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(IndexAlreadyExistsException other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InvalidObjectException.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InvalidObjectException.java
index 7df883f..3a50fbf 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InvalidObjectException.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InvalidObjectException.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -209,7 +210,14 @@ public class InvalidObjectException extends Exception implements org.apache.thri
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_message = true && (isSetMessage());
+    builder.append(present_message);
+    if (present_message)
+      builder.append(message);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(InvalidObjectException other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InvalidOperationException.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InvalidOperationException.java
index 1b13f53..d9ba0df 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InvalidOperationException.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InvalidOperationException.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -209,7 +210,14 @@ public class InvalidOperationException extends Exception implements org.apache.t
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_message = true && (isSetMessage());
+    builder.append(present_message);
+    if (present_message)
+      builder.append(message);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(InvalidOperationException other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InvalidPartitionException.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InvalidPartitionException.java
index 0e3bc4b..9fe3685 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InvalidPartitionException.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InvalidPartitionException.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -209,7 +210,14 @@ public class InvalidPartitionException extends Exception implements org.apache.t
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_message = true && (isSetMessage());
+    builder.append(present_message);
+    if (present_message)
+      builder.append(message);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(InvalidPartitionException other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/MetaException.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/MetaException.java
index 58f5b23..e950e52 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/MetaException.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/MetaException.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -209,7 +210,14 @@ public class MetaException extends Exception implements org.apache.thrift.TBase<
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_message = true && (isSetMessage());
+    builder.append(present_message);
+    if (present_message)
+      builder.append(message);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(MetaException other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/NoSuchObjectException.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/NoSuchObjectException.java
index 1a1b64b..a1aae4f 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/NoSuchObjectException.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/NoSuchObjectException.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -209,7 +210,14 @@ public class NoSuchObjectException extends Exception implements org.apache.thrif
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_message = true && (isSetMessage());
+    builder.append(present_message);
+    if (present_message)
+      builder.append(message);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(NoSuchObjectException other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Order.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Order.java
index 137ad01..95ef317 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Order.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Order.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -270,7 +271,19 @@ public class Order implements org.apache.thrift.TBase<Order, Order._Fields>, jav
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_col = true && (isSetCol());
+    builder.append(present_col);
+    if (present_col)
+      builder.append(col);
+
+    boolean present_order = true;
+    builder.append(present_order);
+    if (present_order)
+      builder.append(order);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(Order other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Partition.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Partition.java
index ea9286e..de78955 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Partition.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Partition.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -661,7 +662,49 @@ public class Partition implements org.apache.thrift.TBase<Partition, Partition._
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_values = true && (isSetValues());
+    builder.append(present_values);
+    if (present_values)
+      builder.append(values);
+
+    boolean present_dbName = true && (isSetDbName());
+    builder.append(present_dbName);
+    if (present_dbName)
+      builder.append(dbName);
+
+    boolean present_tableName = true && (isSetTableName());
+    builder.append(present_tableName);
+    if (present_tableName)
+      builder.append(tableName);
+
+    boolean present_createTime = true;
+    builder.append(present_createTime);
+    if (present_createTime)
+      builder.append(createTime);
+
+    boolean present_lastAccessTime = true;
+    builder.append(present_lastAccessTime);
+    if (present_lastAccessTime)
+      builder.append(lastAccessTime);
+
+    boolean present_sd = true && (isSetSd());
+    builder.append(present_sd);
+    if (present_sd)
+      builder.append(sd);
+
+    boolean present_parameters = true && (isSetParameters());
+    builder.append(present_parameters);
+    if (present_parameters)
+      builder.append(parameters);
+
+    boolean present_privileges = true && (isSetPrivileges());
+    builder.append(present_privileges);
+    if (present_privileges)
+      builder.append(privileges);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(Partition other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PrincipalPrivilegeSet.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PrincipalPrivilegeSet.java
index 3cbd50b..8b288cf 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PrincipalPrivilegeSet.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PrincipalPrivilegeSet.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -412,7 +413,24 @@ public class PrincipalPrivilegeSet implements org.apache.thrift.TBase<PrincipalP
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_userPrivileges = true && (isSetUserPrivileges());
+    builder.append(present_userPrivileges);
+    if (present_userPrivileges)
+      builder.append(userPrivileges);
+
+    boolean present_groupPrivileges = true && (isSetGroupPrivileges());
+    builder.append(present_groupPrivileges);
+    if (present_groupPrivileges)
+      builder.append(groupPrivileges);
+
+    boolean present_rolePrivileges = true && (isSetRolePrivileges());
+    builder.append(present_rolePrivileges);
+    if (present_rolePrivileges)
+      builder.append(rolePrivileges);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(PrincipalPrivilegeSet other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PrivilegeBag.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PrivilegeBag.java
index ab94b1c..0b5efa8 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PrivilegeBag.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PrivilegeBag.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -229,7 +230,14 @@ public class PrivilegeBag implements org.apache.thrift.TBase<PrivilegeBag, Privi
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_privileges = true && (isSetPrivileges());
+    builder.append(present_privileges);
+    if (present_privileges)
+      builder.append(privileges);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(PrivilegeBag other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PrivilegeGrantInfo.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PrivilegeGrantInfo.java
index d390341..dbc0b96 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PrivilegeGrantInfo.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PrivilegeGrantInfo.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -456,7 +457,34 @@ public class PrivilegeGrantInfo implements org.apache.thrift.TBase<PrivilegeGran
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_privilege = true && (isSetPrivilege());
+    builder.append(present_privilege);
+    if (present_privilege)
+      builder.append(privilege);
+
+    boolean present_createTime = true;
+    builder.append(present_createTime);
+    if (present_createTime)
+      builder.append(createTime);
+
+    boolean present_grantor = true && (isSetGrantor());
+    builder.append(present_grantor);
+    if (present_grantor)
+      builder.append(grantor);
+
+    boolean present_grantorType = true && (isSetGrantorType());
+    builder.append(present_grantorType);
+    if (present_grantorType)
+      builder.append(grantorType.getValue());
+
+    boolean present_grantOption = true;
+    builder.append(present_grantOption);
+    if (present_grantOption)
+      builder.append(grantOption);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(PrivilegeGrantInfo other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Role.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Role.java
index ae31225..b922fd6 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Role.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Role.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -328,7 +329,24 @@ public class Role implements org.apache.thrift.TBase<Role, Role._Fields>, java.i
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_roleName = true && (isSetRoleName());
+    builder.append(present_roleName);
+    if (present_roleName)
+      builder.append(roleName);
+
+    boolean present_createTime = true;
+    builder.append(present_createTime);
+    if (present_createTime)
+      builder.append(createTime);
+
+    boolean present_ownerName = true && (isSetOwnerName());
+    builder.append(present_ownerName);
+    if (present_ownerName)
+      builder.append(ownerName);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(Role other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Schema.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Schema.java
index 25f5e42..93c1761 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Schema.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Schema.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -312,7 +313,19 @@ public class Schema implements org.apache.thrift.TBase<Schema, Schema._Fields>,
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_fieldSchemas = true && (isSetFieldSchemas());
+    builder.append(present_fieldSchemas);
+    if (present_fieldSchemas)
+      builder.append(fieldSchemas);
+
+    boolean present_properties = true && (isSetProperties());
+    builder.append(present_properties);
+    if (present_properties)
+      builder.append(properties);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(Schema other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SerDeInfo.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SerDeInfo.java
index 208ece2..b592376 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SerDeInfo.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SerDeInfo.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -350,7 +351,24 @@ public class SerDeInfo implements org.apache.thrift.TBase<SerDeInfo, SerDeInfo._
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_name = true && (isSetName());
+    builder.append(present_name);
+    if (present_name)
+      builder.append(name);
+
+    boolean present_serializationLib = true && (isSetSerializationLib());
+    builder.append(present_serializationLib);
+    if (present_serializationLib)
+      builder.append(serializationLib);
+
+    boolean present_parameters = true && (isSetParameters());
+    builder.append(present_parameters);
+    if (present_parameters)
+      builder.append(parameters);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(SerDeInfo other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/StorageDescriptor.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/StorageDescriptor.java
index 3f7d7cc..5ea0121 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/StorageDescriptor.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/StorageDescriptor.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -819,7 +820,59 @@ public class StorageDescriptor implements org.apache.thrift.TBase<StorageDescrip
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_cols = true && (isSetCols());
+    builder.append(present_cols);
+    if (present_cols)
+      builder.append(cols);
+
+    boolean present_location = true && (isSetLocation());
+    builder.append(present_location);
+    if (present_location)
+      builder.append(location);
+
+    boolean present_inputFormat = true && (isSetInputFormat());
+    builder.append(present_inputFormat);
+    if (present_inputFormat)
+      builder.append(inputFormat);
+
+    boolean present_outputFormat = true && (isSetOutputFormat());
+    builder.append(present_outputFormat);
+    if (present_outputFormat)
+      builder.append(outputFormat);
+
+    boolean present_compressed = true;
+    builder.append(present_compressed);
+    if (present_compressed)
+      builder.append(compressed);
+
+    boolean present_numBuckets = true;
+    builder.append(present_numBuckets);
+    if (present_numBuckets)
+      builder.append(numBuckets);
+
+    boolean present_serdeInfo = true && (isSetSerdeInfo());
+    builder.append(present_serdeInfo);
+    if (present_serdeInfo)
+      builder.append(serdeInfo);
+
+    boolean present_bucketCols = true && (isSetBucketCols());
+    builder.append(present_bucketCols);
+    if (present_bucketCols)
+      builder.append(bucketCols);
+
+    boolean present_sortCols = true && (isSetSortCols());
+    builder.append(present_sortCols);
+    if (present_sortCols)
+      builder.append(sortCols);
+
+    boolean present_parameters = true && (isSetParameters());
+    builder.append(present_parameters);
+    if (present_parameters)
+      builder.append(parameters);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(StorageDescriptor other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Table.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Table.java
index a8417a2..8a724a7 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Table.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Table.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -951,7 +952,74 @@ public class Table implements org.apache.thrift.TBase<Table, Table._Fields>, jav
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_tableName = true && (isSetTableName());
+    builder.append(present_tableName);
+    if (present_tableName)
+      builder.append(tableName);
+
+    boolean present_dbName = true && (isSetDbName());
+    builder.append(present_dbName);
+    if (present_dbName)
+      builder.append(dbName);
+
+    boolean present_owner = true && (isSetOwner());
+    builder.append(present_owner);
+    if (present_owner)
+      builder.append(owner);
+
+    boolean present_createTime = true;
+    builder.append(present_createTime);
+    if (present_createTime)
+      builder.append(createTime);
+
+    boolean present_lastAccessTime = true;
+    builder.append(present_lastAccessTime);
+    if (present_lastAccessTime)
+      builder.append(lastAccessTime);
+
+    boolean present_retention = true;
+    builder.append(present_retention);
+    if (present_retention)
+      builder.append(retention);
+
+    boolean present_sd = true && (isSetSd());
+    builder.append(present_sd);
+    if (present_sd)
+      builder.append(sd);
+
+    boolean present_partitionKeys = true && (isSetPartitionKeys());
+    builder.append(present_partitionKeys);
+    if (present_partitionKeys)
+      builder.append(partitionKeys);
+
+    boolean present_parameters = true && (isSetParameters());
+    builder.append(present_parameters);
+    if (present_parameters)
+      builder.append(parameters);
+
+    boolean present_viewOriginalText = true && (isSetViewOriginalText());
+    builder.append(present_viewOriginalText);
+    if (present_viewOriginalText)
+      builder.append(viewOriginalText);
+
+    boolean present_viewExpandedText = true && (isSetViewExpandedText());
+    builder.append(present_viewExpandedText);
+    if (present_viewExpandedText)
+      builder.append(viewExpandedText);
+
+    boolean present_tableType = true && (isSetTableType());
+    builder.append(present_tableType);
+    if (present_tableType)
+      builder.append(tableType);
+
+    boolean present_privileges = true && (isSetPrivileges());
+    builder.append(present_privileges);
+    if (present_privileges)
+      builder.append(privileges);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(Table other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
index 0b28b64..47fee29 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -6643,7 +6644,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_database = true && (isSetDatabase());
+      builder.append(present_database);
+      if (present_database)
+        builder.append(database);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(create_database_args other) {
@@ -7054,7 +7062,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(create_database_result other) {
@@ -7408,7 +7433,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_name = true && (isSetName());
+      builder.append(present_name);
+      if (present_name)
+        builder.append(name);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_database_args other) {
@@ -7818,7 +7850,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_database_result other) {
@@ -8291,7 +8340,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_name = true && (isSetName());
+      builder.append(present_name);
+      if (present_name)
+        builder.append(name);
+
+      boolean present_deleteData = true;
+      builder.append(present_deleteData);
+      if (present_deleteData)
+        builder.append(deleteData);
+
+      boolean present_cascade = true;
+      builder.append(present_cascade);
+      if (present_cascade)
+        builder.append(cascade);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(drop_database_args other) {
@@ -8753,7 +8819,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(drop_database_result other) {
@@ -9107,7 +9190,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_pattern = true && (isSetPattern());
+      builder.append(present_pattern);
+      if (present_pattern)
+        builder.append(pattern);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_databases_args other) {
@@ -9479,7 +9569,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_databases_result other) {
@@ -9754,7 +9856,9 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_all_databases_args other) {
@@ -10097,7 +10201,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_all_databases_result other) {
@@ -10495,7 +10611,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_dbname = true && (isSetDbname());
+      builder.append(present_dbname);
+      if (present_dbname)
+        builder.append(dbname);
+
+      boolean present_db = true && (isSetDb());
+      builder.append(present_db);
+      if (present_db)
+        builder.append(db);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(alter_database_args other) {
@@ -10878,7 +11006,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(alter_database_result other) {
@@ -11202,7 +11342,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_name = true && (isSetName());
+      builder.append(present_name);
+      if (present_name)
+        builder.append(name);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_type_args other) {
@@ -11612,7 +11759,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_type_result other) {
@@ -11966,7 +12130,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_type = true && (isSetType());
+      builder.append(present_type);
+      if (present_type)
+        builder.append(type);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(create_type_args other) {
@@ -12438,7 +12609,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true;
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(create_type_result other) {
@@ -12621,6 +12814,8 @@ public class ThriftHiveMetastore {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bit_vector = new BitSet(1);
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -12818,7 +13013,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_type = true && (isSetType());
+      builder.append(present_type);
+      if (present_type)
+        builder.append(type);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(drop_type_args other) {
@@ -13231,7 +13433,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true;
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(drop_type_result other) {
@@ -13384,6 +13603,8 @@ public class ThriftHiveMetastore {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bit_vector = new BitSet(1);
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -13581,7 +13802,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_name = true && (isSetName());
+      builder.append(present_name);
+      if (present_name)
+        builder.append(name);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_type_all_args other) {
@@ -13958,7 +14186,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_type_all_result other) {
@@ -14360,7 +14600,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_table_name = true && (isSetTable_name());
+      builder.append(present_table_name);
+      if (present_table_name)
+        builder.append(table_name);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_fields_args other) {
@@ -14878,7 +15130,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_fields_result other) {
@@ -15337,7 +15611,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_table_name = true && (isSetTable_name());
+      builder.append(present_table_name);
+      if (present_table_name)
+        builder.append(table_name);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_schema_args other) {
@@ -15855,7 +16141,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_schema_result other) {
@@ -16256,7 +16564,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_tbl = true && (isSetTbl());
+      builder.append(present_tbl);
+      if (present_tbl)
+        builder.append(tbl);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(create_table_args other) {
@@ -16725,7 +17040,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      boolean present_o4 = true && (isSetO4());
+      builder.append(present_o4);
+      if (present_o4)
+        builder.append(o4);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(create_table_result other) {
@@ -17167,7 +17504,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_tbl = true && (isSetTbl());
+      builder.append(present_tbl);
+      if (present_tbl)
+        builder.append(tbl);
+
+      boolean present_environment_context = true && (isSetEnvironment_context());
+      builder.append(present_environment_context);
+      if (present_environment_context)
+        builder.append(environment_context);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(create_table_with_environment_context_args other) {
@@ -17667,7 +18016,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      boolean present_o4 = true && (isSetO4());
+      builder.append(present_o4);
+      if (present_o4)
+        builder.append(o4);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(create_table_with_environment_context_result other) {
@@ -18170,7 +18541,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_dbname = true && (isSetDbname());
+      builder.append(present_dbname);
+      if (present_dbname)
+        builder.append(dbname);
+
+      boolean present_name = true && (isSetName());
+      builder.append(present_name);
+      if (present_name)
+        builder.append(name);
+
+      boolean present_deleteData = true;
+      builder.append(present_deleteData);
+      if (present_deleteData)
+        builder.append(deleteData);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(drop_table_args other) {
@@ -18579,7 +18967,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(drop_table_result other) {
@@ -18961,7 +19361,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_pattern = true && (isSetPattern());
+      builder.append(present_pattern);
+      if (present_pattern)
+        builder.append(pattern);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_tables_args other) {
@@ -19363,7 +19775,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_tables_result other) {
@@ -19703,7 +20127,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_all_tables_args other) {
@@ -20075,7 +20506,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_all_tables_result other) {
@@ -20473,7 +20916,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_dbname = true && (isSetDbname());
+      builder.append(present_dbname);
+      if (present_dbname)
+        builder.append(dbname);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_table_args other) {
@@ -20913,7 +21368,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_table_result other) {
@@ -21345,7 +21817,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_dbname = true && (isSetDbname());
+      builder.append(present_dbname);
+      if (present_dbname)
+        builder.append(dbname);
+
+      boolean present_tbl_names = true && (isSetTbl_names());
+      builder.append(present_tbl_names);
+      if (present_tbl_names)
+        builder.append(tbl_names);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_table_objects_by_name_args other) {
@@ -21880,7 +22364,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_table_objects_by_name_result other) {
@@ -22402,7 +22908,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_dbname = true && (isSetDbname());
+      builder.append(present_dbname);
+      if (present_dbname)
+        builder.append(dbname);
+
+      boolean present_filter = true && (isSetFilter());
+      builder.append(present_filter);
+      if (present_filter)
+        builder.append(filter);
+
+      boolean present_max_tables = true;
+      builder.append(present_max_tables);
+      if (present_max_tables)
+        builder.append(max_tables);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_table_names_by_filter_args other) {
@@ -22947,7 +23470,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_table_names_by_filter_result other) {
@@ -23463,7 +24008,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_dbname = true && (isSetDbname());
+      builder.append(present_dbname);
+      if (present_dbname)
+        builder.append(dbname);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_new_tbl = true && (isSetNew_tbl());
+      builder.append(present_new_tbl);
+      if (present_new_tbl)
+        builder.append(new_tbl);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(alter_table_args other) {
@@ -23876,7 +24438,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(alter_table_result other) {
@@ -24374,7 +24948,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_dbname = true && (isSetDbname());
+      builder.append(present_dbname);
+      if (present_dbname)
+        builder.append(dbname);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_new_tbl = true && (isSetNew_tbl());
+      builder.append(present_new_tbl);
+      if (present_new_tbl)
+        builder.append(new_tbl);
+
+      boolean present_environment_context = true && (isSetEnvironment_context());
+      builder.append(present_environment_context);
+      if (present_environment_context)
+        builder.append(environment_context);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(alter_table_with_environment_context_args other) {
@@ -24818,7 +25414,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(alter_table_with_environment_context_result other) {
@@ -25142,7 +25750,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_new_part = true && (isSetNew_part());
+      builder.append(present_new_part);
+      if (present_new_part)
+        builder.append(new_part);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(add_partition_args other) {
@@ -25611,7 +26226,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(add_partition_result other) {
@@ -26053,7 +26690,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_new_part = true && (isSetNew_part());
+      builder.append(present_new_part);
+      if (present_new_part)
+        builder.append(new_part);
+
+      boolean present_environment_context = true && (isSetEnvironment_context());
+      builder.append(present_environment_context);
+      if (present_environment_context)
+        builder.append(environment_context);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(add_partition_with_environment_context_args other) {
@@ -26553,7 +27202,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(add_partition_with_environment_context_result other) {
@@ -26957,7 +27628,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_new_parts = true && (isSetNew_parts());
+      builder.append(present_new_parts);
+      if (present_new_parts)
+        builder.append(new_parts);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(add_partitions_args other) {
@@ -27446,7 +28124,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true;
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(add_partitions_result other) {
@@ -27629,6 +28329,8 @@ public class ThriftHiveMetastore {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bit_vector = new BitSet(1);
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -27962,7 +28664,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_part_vals = true && (isSetPart_vals());
+      builder.append(present_part_vals);
+      if (present_part_vals)
+        builder.append(part_vals);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(append_partition_args other) {
@@ -28507,7 +29226,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(append_partition_result other) {
@@ -29007,7 +29748,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_part_name = true && (isSetPart_name());
+      builder.append(present_part_name);
+      if (present_part_name)
+        builder.append(part_name);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(append_partition_by_name_args other) {
@@ -29535,7 +30293,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(append_partition_by_name_result other) {
@@ -30116,7 +30896,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_part_vals = true && (isSetPart_vals());
+      builder.append(present_part_vals);
+      if (present_part_vals)
+        builder.append(part_vals);
+
+      boolean present_deleteData = true;
+      builder.append(present_deleteData);
+      if (present_deleteData)
+        builder.append(deleteData);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(drop_partition_args other) {
@@ -30633,7 +31435,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true;
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(drop_partition_result other) {
@@ -30786,6 +31605,8 @@ public class ThriftHiveMetastore {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bit_vector = new BitSet(1);
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -31160,7 +31981,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_part_name = true && (isSetPart_name());
+      builder.append(present_part_name);
+      if (present_part_name)
+        builder.append(part_name);
+
+      boolean present_deleteData = true;
+      builder.append(present_deleteData);
+      if (present_deleteData)
+        builder.append(deleteData);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(drop_partition_by_name_args other) {
@@ -31660,7 +32503,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true;
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(drop_partition_by_name_result other) {
@@ -31813,6 +32673,8 @@ public class ThriftHiveMetastore {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bit_vector = new BitSet(1);
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -32146,7 +33008,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_part_vals = true && (isSetPart_vals());
+      builder.append(present_part_vals);
+      if (present_part_vals)
+        builder.append(part_vals);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partition_args other) {
@@ -32633,7 +33512,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partition_result other) {
@@ -33259,7 +34155,34 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_part_vals = true && (isSetPart_vals());
+      builder.append(present_part_vals);
+      if (present_part_vals)
+        builder.append(part_vals);
+
+      boolean present_user_name = true && (isSetUser_name());
+      builder.append(present_user_name);
+      if (present_user_name)
+        builder.append(user_name);
+
+      boolean present_group_names = true && (isSetGroup_names());
+      builder.append(present_group_names);
+      if (present_group_names)
+        builder.append(group_names);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partition_with_auth_args other) {
@@ -33823,7 +34746,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partition_with_auth_result other) {
@@ -34293,7 +35233,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_part_name = true && (isSetPart_name());
+      builder.append(present_part_name);
+      if (present_part_name)
+        builder.append(part_name);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partition_by_name_args other) {
@@ -34763,7 +35720,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partition_by_name_result other) {
@@ -35238,7 +36212,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_max_parts = true;
+      builder.append(present_max_parts);
+      if (present_max_parts)
+        builder.append(max_parts);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partitions_args other) {
@@ -35725,7 +36716,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partitions_result other) {
@@ -36353,7 +37361,34 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_max_parts = true;
+      builder.append(present_max_parts);
+      if (present_max_parts)
+        builder.append(max_parts);
+
+      boolean present_user_name = true && (isSetUser_name());
+      builder.append(present_user_name);
+      if (present_user_name)
+        builder.append(user_name);
+
+      boolean present_group_names = true && (isSetGroup_names());
+      builder.append(present_group_names);
+      if (present_group_names)
+        builder.append(group_names);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partitions_with_auth_args other) {
@@ -36917,7 +37952,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partitions_with_auth_result other) {
@@ -37409,7 +38461,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_max_parts = true;
+      builder.append(present_max_parts);
+      if (present_max_parts)
+        builder.append(max_parts);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partition_names_args other) {
@@ -37838,7 +38907,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partition_names_result other) {
@@ -38377,7 +39458,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_part_vals = true && (isSetPart_vals());
+      builder.append(present_part_vals);
+      if (present_part_vals)
+        builder.append(part_vals);
+
+      boolean present_max_parts = true;
+      builder.append(present_max_parts);
+      if (present_max_parts)
+        builder.append(max_parts);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partitions_ps_args other) {
@@ -38911,7 +40014,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partitions_ps_result other) {
@@ -39617,7 +40737,39 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_part_vals = true && (isSetPart_vals());
+      builder.append(present_part_vals);
+      if (present_part_vals)
+        builder.append(part_vals);
+
+      boolean present_max_parts = true;
+      builder.append(present_max_parts);
+      if (present_max_parts)
+        builder.append(max_parts);
+
+      boolean present_user_name = true && (isSetUser_name());
+      builder.append(present_user_name);
+      if (present_user_name)
+        builder.append(user_name);
+
+      boolean present_group_names = true && (isSetGroup_names());
+      builder.append(present_group_names);
+      if (present_group_names)
+        builder.append(group_names);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partitions_ps_with_auth_args other) {
@@ -40228,7 +41380,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partitions_ps_with_auth_result other) {
@@ -40798,7 +41967,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_part_vals = true && (isSetPart_vals());
+      builder.append(present_part_vals);
+      if (present_part_vals)
+        builder.append(part_vals);
+
+      boolean present_max_parts = true;
+      builder.append(present_max_parts);
+      if (present_max_parts)
+        builder.append(max_parts);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partition_names_ps_args other) {
@@ -41332,7 +42523,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partition_names_ps_result other) {
@@ -41881,7 +43089,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_filter = true && (isSetFilter());
+      builder.append(present_filter);
+      if (present_filter)
+        builder.append(filter);
+
+      boolean present_max_parts = true;
+      builder.append(present_max_parts);
+      if (present_max_parts)
+        builder.append(max_parts);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partitions_by_filter_args other) {
@@ -42398,7 +43628,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partitions_by_filter_result other) {
@@ -42905,7 +44152,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_names = true && (isSetNames());
+      builder.append(present_names);
+      if (present_names)
+        builder.append(names);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partitions_by_names_args other) {
@@ -43412,7 +44676,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_partitions_by_names_result other) {
@@ -43899,7 +45180,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_new_part = true && (isSetNew_part());
+      builder.append(present_new_part);
+      if (present_new_part)
+        builder.append(new_part);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(alter_partition_args other) {
@@ -44312,7 +45610,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(alter_partition_result other) {
@@ -44810,7 +46120,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_new_part = true && (isSetNew_part());
+      builder.append(present_new_part);
+      if (present_new_part)
+        builder.append(new_part);
+
+      boolean present_environment_context = true && (isSetEnvironment_context());
+      builder.append(present_environment_context);
+      if (present_environment_context)
+        builder.append(environment_context);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(alter_partition_with_environment_context_args other) {
@@ -45254,7 +46586,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(alter_partition_with_environment_context_result other) {
@@ -45772,7 +47116,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_part_vals = true && (isSetPart_vals());
+      builder.append(present_part_vals);
+      if (present_part_vals)
+        builder.append(part_vals);
+
+      boolean present_new_part = true && (isSetNew_part());
+      builder.append(present_new_part);
+      if (present_new_part)
+        builder.append(new_part);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(rename_partition_args other) {
@@ -46232,7 +47598,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(rename_partition_result other) {
@@ -46614,7 +47992,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_name = true && (isSetName());
+      builder.append(present_name);
+      if (present_name)
+        builder.append(name);
+
+      boolean present_defaultValue = true && (isSetDefaultValue());
+      builder.append(present_defaultValue);
+      if (present_defaultValue)
+        builder.append(defaultValue);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_config_value_args other) {
@@ -46996,7 +48386,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_config_value_result other) {
@@ -47319,7 +48721,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_part_name = true && (isSetPart_name());
+      builder.append(present_part_name);
+      if (present_part_name)
+        builder.append(part_name);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(partition_name_to_vals_args other) {
@@ -47691,7 +49100,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(partition_name_to_vals_result other) {
@@ -48031,7 +49452,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_part_name = true && (isSetPart_name());
+      builder.append(present_part_name);
+      if (present_part_name)
+        builder.append(part_name);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(partition_name_to_spec_args other) {
@@ -48408,7 +49836,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(partition_name_to_spec_result other) {
@@ -48962,7 +50402,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_part_vals = true && (isSetPart_vals());
+      builder.append(present_part_vals);
+      if (present_part_vals)
+        builder.append(part_vals);
+
+      boolean present_eventType = true && (isSetEventType());
+      builder.append(present_eventType);
+      if (present_eventType)
+        builder.append(eventType.getValue());
+
+      return builder.toHashCode();
     }
 
     public int compareTo(markPartitionForEvent_args other) {
@@ -49656,7 +51118,39 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      boolean present_o4 = true && (isSetO4());
+      builder.append(present_o4);
+      if (present_o4)
+        builder.append(o4);
+
+      boolean present_o5 = true && (isSetO5());
+      builder.append(present_o5);
+      if (present_o5)
+        builder.append(o5);
+
+      boolean present_o6 = true && (isSetO6());
+      builder.append(present_o6);
+      if (present_o6)
+        builder.append(o6);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(markPartitionForEvent_result other) {
@@ -50311,7 +51805,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_part_vals = true && (isSetPart_vals());
+      builder.append(present_part_vals);
+      if (present_part_vals)
+        builder.append(part_vals);
+
+      boolean present_eventType = true && (isSetEventType());
+      builder.append(present_eventType);
+      if (present_eventType)
+        builder.append(eventType.getValue());
+
+      return builder.toHashCode();
     }
 
     public int compareTo(isPartitionMarkedForEvent_args other) {
@@ -51066,7 +52582,44 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true;
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      boolean present_o4 = true && (isSetO4());
+      builder.append(present_o4);
+      if (present_o4)
+        builder.append(o4);
+
+      boolean present_o5 = true && (isSetO5());
+      builder.append(present_o5);
+      if (present_o5)
+        builder.append(o5);
+
+      boolean present_o6 = true && (isSetO6());
+      builder.append(present_o6);
+      if (present_o6)
+        builder.append(o6);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(isPartitionMarkedForEvent_result other) {
@@ -51339,6 +52892,8 @@ public class ThriftHiveMetastore {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bit_vector = new BitSet(1);
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -51594,7 +53149,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_new_index = true && (isSetNew_index());
+      builder.append(present_new_index);
+      if (present_new_index)
+        builder.append(new_index);
+
+      boolean present_index_table = true && (isSetIndex_table());
+      builder.append(present_index_table);
+      if (present_index_table)
+        builder.append(index_table);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(add_index_args other) {
@@ -52094,7 +53661,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(add_index_result other) {
@@ -52652,7 +54241,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_dbname = true && (isSetDbname());
+      builder.append(present_dbname);
+      if (present_dbname)
+        builder.append(dbname);
+
+      boolean present_base_tbl_name = true && (isSetBase_tbl_name());
+      builder.append(present_base_tbl_name);
+      if (present_base_tbl_name)
+        builder.append(base_tbl_name);
+
+      boolean present_idx_name = true && (isSetIdx_name());
+      builder.append(present_idx_name);
+      if (present_idx_name)
+        builder.append(idx_name);
+
+      boolean present_new_idx = true && (isSetNew_idx());
+      builder.append(present_new_idx);
+      if (present_new_idx)
+        builder.append(new_idx);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(alter_index_args other) {
@@ -53095,7 +54706,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(alter_index_result other) {
@@ -53596,7 +55219,29 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_index_name = true && (isSetIndex_name());
+      builder.append(present_index_name);
+      if (present_index_name)
+        builder.append(index_name);
+
+      boolean present_deleteData = true;
+      builder.append(present_deleteData);
+      if (present_deleteData)
+        builder.append(deleteData);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(drop_index_by_name_args other) {
@@ -54096,7 +55741,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true;
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(drop_index_by_name_result other) {
@@ -54249,6 +55911,8 @@ public class ThriftHiveMetastore {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bit_vector = new BitSet(1);
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -54562,7 +56226,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_index_name = true && (isSetIndex_name());
+      builder.append(present_index_name);
+      if (present_index_name)
+        builder.append(index_name);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_index_by_name_args other) {
@@ -55032,7 +56713,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_index_by_name_result other) {
@@ -55507,7 +57205,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_max_indexes = true;
+      builder.append(present_max_indexes);
+      if (present_max_indexes)
+        builder.append(max_indexes);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_indexes_args other) {
@@ -55994,7 +57709,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_indexes_result other) {
@@ -56486,7 +58218,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_tbl_name = true && (isSetTbl_name());
+      builder.append(present_tbl_name);
+      if (present_tbl_name)
+        builder.append(tbl_name);
+
+      boolean present_max_indexes = true;
+      builder.append(present_max_indexes);
+      if (present_max_indexes)
+        builder.append(max_indexes);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_index_names_args other) {
@@ -56915,7 +58664,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_index_names_result other) {
@@ -57255,7 +59016,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_role = true && (isSetRole());
+      builder.append(present_role);
+      if (present_role)
+        builder.append(role);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(create_role_args other) {
@@ -57611,7 +59379,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true;
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(create_role_result other) {
@@ -57734,6 +59514,8 @@ public class ThriftHiveMetastore {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bit_vector = new BitSet(1);
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -57931,7 +59713,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_role_name = true && (isSetRole_name());
+      builder.append(present_role_name);
+      if (present_role_name)
+        builder.append(role_name);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(drop_role_args other) {
@@ -58286,7 +60075,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true;
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(drop_role_result other) {
@@ -58409,6 +60210,8 @@ public class ThriftHiveMetastore {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bit_vector = new BitSet(1);
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -58541,7 +60344,9 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_role_names_args other) {
@@ -58884,7 +60689,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_role_names_result other) {
@@ -59541,7 +61358,39 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_role_name = true && (isSetRole_name());
+      builder.append(present_role_name);
+      if (present_role_name)
+        builder.append(role_name);
+
+      boolean present_principal_name = true && (isSetPrincipal_name());
+      builder.append(present_principal_name);
+      if (present_principal_name)
+        builder.append(principal_name);
+
+      boolean present_principal_type = true && (isSetPrincipal_type());
+      builder.append(present_principal_type);
+      if (present_principal_type)
+        builder.append(principal_type.getValue());
+
+      boolean present_grantor = true && (isSetGrantor());
+      builder.append(present_grantor);
+      if (present_grantor)
+        builder.append(grantor);
+
+      boolean present_grantorType = true && (isSetGrantorType());
+      builder.append(present_grantorType);
+      if (present_grantorType)
+        builder.append(grantorType.getValue());
+
+      boolean present_grant_option = true;
+      builder.append(present_grant_option);
+      if (present_grant_option)
+        builder.append(grant_option);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(grant_role_args other) {
@@ -60043,7 +61892,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true;
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(grant_role_result other) {
@@ -60166,6 +62027,8 @@ public class ThriftHiveMetastore {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bit_vector = new BitSet(1);
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -60491,7 +62354,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_role_name = true && (isSetRole_name());
+      builder.append(present_role_name);
+      if (present_role_name)
+        builder.append(role_name);
+
+      boolean present_principal_name = true && (isSetPrincipal_name());
+      builder.append(present_principal_name);
+      if (present_principal_name)
+        builder.append(principal_name);
+
+      boolean present_principal_type = true && (isSetPrincipal_type());
+      builder.append(present_principal_type);
+      if (present_principal_type)
+        builder.append(principal_type.getValue());
+
+      return builder.toHashCode();
     }
 
     public int compareTo(revoke_role_args other) {
@@ -60906,7 +62786,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true;
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(revoke_role_result other) {
@@ -61029,6 +62921,8 @@ public class ThriftHiveMetastore {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bit_vector = new BitSet(1);
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -61296,7 +63190,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_principal_name = true && (isSetPrincipal_name());
+      builder.append(present_principal_name);
+      if (present_principal_name)
+        builder.append(principal_name);
+
+      boolean present_principal_type = true && (isSetPrincipal_type());
+      builder.append(present_principal_type);
+      if (present_principal_type)
+        builder.append(principal_type.getValue());
+
+      return builder.toHashCode();
     }
 
     public int compareTo(list_roles_args other) {
@@ -61698,7 +63604,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(list_roles_result other) {
@@ -62175,7 +64093,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_hiveObject = true && (isSetHiveObject());
+      builder.append(present_hiveObject);
+      if (present_hiveObject)
+        builder.append(hiveObject);
+
+      boolean present_user_name = true && (isSetUser_name());
+      builder.append(present_user_name);
+      if (present_user_name)
+        builder.append(user_name);
+
+      boolean present_group_names = true && (isSetGroup_names());
+      builder.append(present_group_names);
+      if (present_group_names)
+        builder.append(group_names);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_privilege_set_args other) {
@@ -62605,7 +64540,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_privilege_set_result other) {
@@ -63057,7 +65004,24 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_principal_name = true && (isSetPrincipal_name());
+      builder.append(present_principal_name);
+      if (present_principal_name)
+        builder.append(principal_name);
+
+      boolean present_principal_type = true && (isSetPrincipal_type());
+      builder.append(present_principal_type);
+      if (present_principal_type)
+        builder.append(principal_type.getValue());
+
+      boolean present_hiveObject = true && (isSetHiveObject());
+      builder.append(present_hiveObject);
+      if (present_hiveObject)
+        builder.append(hiveObject);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(list_privileges_args other) {
@@ -63490,7 +65454,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(list_privileges_result other) {
@@ -63831,7 +65807,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_privileges = true && (isSetPrivileges());
+      builder.append(present_privileges);
+      if (present_privileges)
+        builder.append(privileges);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(grant_privileges_args other) {
@@ -64187,7 +66170,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true;
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(grant_privileges_result other) {
@@ -64310,6 +66305,8 @@ public class ThriftHiveMetastore {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bit_vector = new BitSet(1);
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -64507,7 +66504,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_privileges = true && (isSetPrivileges());
+      builder.append(present_privileges);
+      if (present_privileges)
+        builder.append(privileges);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(revoke_privileges_args other) {
@@ -64863,7 +66867,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true;
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(revoke_privileges_result other) {
@@ -64986,6 +67002,8 @@ public class ThriftHiveMetastore {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bit_vector = new BitSet(1);
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -65261,7 +67279,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_user_name = true && (isSetUser_name());
+      builder.append(present_user_name);
+      if (present_user_name)
+        builder.append(user_name);
+
+      boolean present_group_names = true && (isSetGroup_names());
+      builder.append(present_group_names);
+      if (present_group_names)
+        builder.append(group_names);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(set_ugi_args other) {
@@ -65680,7 +67710,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(set_ugi_result other) {
@@ -66078,7 +68120,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_token_owner = true && (isSetToken_owner());
+      builder.append(present_token_owner);
+      if (present_token_owner)
+        builder.append(token_owner);
+
+      boolean present_renewer_kerberos_principal_name = true && (isSetRenewer_kerberos_principal_name());
+      builder.append(present_renewer_kerberos_principal_name);
+      if (present_renewer_kerberos_principal_name)
+        builder.append(renewer_kerberos_principal_name);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_delegation_token_args other) {
@@ -66460,7 +68514,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_delegation_token_result other) {
@@ -66783,7 +68849,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_token_str_form = true && (isSetToken_str_form());
+      builder.append(present_token_str_form);
+      if (present_token_str_form)
+        builder.append(token_str_form);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(renew_delegation_token_args other) {
@@ -67138,7 +69211,19 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true;
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(renew_delegation_token_result other) {
@@ -67261,6 +69346,8 @@ public class ThriftHiveMetastore {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bit_vector = new BitSet(1);
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -67458,7 +69545,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_token_str_form = true && (isSetToken_str_form());
+      builder.append(present_token_str_form);
+      if (present_token_str_form)
+        builder.append(token_str_form);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(cancel_delegation_token_args other) {
@@ -67752,7 +69846,14 @@ public class ThriftHiveMetastore {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(cancel_delegation_token_result other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Type.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Type.java
index fb9aa1f..e46072f 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Type.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Type.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -397,7 +398,29 @@ public class Type implements org.apache.thrift.TBase<Type, Type._Fields>, java.i
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_name = true && (isSetName());
+    builder.append(present_name);
+    if (present_name)
+      builder.append(name);
+
+    boolean present_type1 = true && (isSetType1());
+    builder.append(present_type1);
+    if (present_type1)
+      builder.append(type1);
+
+    boolean present_type2 = true && (isSetType2());
+    builder.append(present_type2);
+    if (present_type2)
+      builder.append(type2);
+
+    boolean present_fields = true && (isSetFields());
+    builder.append(present_fields);
+    if (present_fields)
+      builder.append(fields);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(Type other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/UnknownDBException.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/UnknownDBException.java
index b33670a..802bac3 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/UnknownDBException.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/UnknownDBException.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -209,7 +210,14 @@ public class UnknownDBException extends Exception implements org.apache.thrift.T
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_message = true && (isSetMessage());
+    builder.append(present_message);
+    if (present_message)
+      builder.append(message);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(UnknownDBException other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/UnknownPartitionException.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/UnknownPartitionException.java
index f0f1189..6d15716 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/UnknownPartitionException.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/UnknownPartitionException.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -209,7 +210,14 @@ public class UnknownPartitionException extends Exception implements org.apache.t
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_message = true && (isSetMessage());
+    builder.append(present_message);
+    if (present_message)
+      builder.append(message);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(UnknownPartitionException other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/UnknownTableException.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/UnknownTableException.java
index 05cfc76..d7bb8b0 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/UnknownTableException.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/UnknownTableException.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -209,7 +210,14 @@ public class UnknownTableException extends Exception implements org.apache.thrif
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_message = true && (isSetMessage());
+    builder.append(present_message);
+    if (present_message)
+      builder.append(message);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(UnknownTableException other) {
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Version.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Version.java
index 010b421..37cd3d6 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Version.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Version.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.metastore.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -267,7 +268,19 @@ public class Version implements org.apache.thrift.TBase<Version, Version._Fields
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_version = true && (isSetVersion());
+    builder.append(present_version);
+    if (present_version)
+      builder.append(version);
+
+    boolean present_comments = true && (isSetComments());
+    builder.append(present_comments);
+    if (present_comments)
+      builder.append(comments);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(Version other) {
diff --git a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Adjacency.java b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Adjacency.java
index 7cd482f..0a1cde2 100644
--- a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Adjacency.java
+++ b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Adjacency.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.ql.plan.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -357,7 +358,24 @@ public class Adjacency implements org.apache.thrift.TBase<Adjacency, Adjacency._
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_node = true && (isSetNode());
+    builder.append(present_node);
+    if (present_node)
+      builder.append(node);
+
+    boolean present_children = true && (isSetChildren());
+    builder.append(present_children);
+    if (present_children)
+      builder.append(children);
+
+    boolean present_adjacencyType = true && (isSetAdjacencyType());
+    builder.append(present_adjacencyType);
+    if (present_adjacencyType)
+      builder.append(adjacencyType.getValue());
+
+    return builder.toHashCode();
   }
 
   public int compareTo(Adjacency other) {
diff --git a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Graph.java b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Graph.java
index 7fa8d8e..801bbeb 100644
--- a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Graph.java
+++ b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Graph.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.ql.plan.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -377,7 +378,24 @@ public class Graph implements org.apache.thrift.TBase<Graph, Graph._Fields>, jav
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_nodeType = true && (isSetNodeType());
+    builder.append(present_nodeType);
+    if (present_nodeType)
+      builder.append(nodeType.getValue());
+
+    boolean present_roots = true && (isSetRoots());
+    builder.append(present_roots);
+    if (present_roots)
+      builder.append(roots);
+
+    boolean present_adjacencyList = true && (isSetAdjacencyList());
+    builder.append(present_adjacencyList);
+    if (present_adjacencyList)
+      builder.append(adjacencyList);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(Graph other) {
diff --git a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Operator.java b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Operator.java
index 2ef602d..ee34012 100644
--- a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Operator.java
+++ b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Operator.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.ql.plan.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -564,7 +565,39 @@ public class Operator implements org.apache.thrift.TBase<Operator, Operator._Fie
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_operatorId = true && (isSetOperatorId());
+    builder.append(present_operatorId);
+    if (present_operatorId)
+      builder.append(operatorId);
+
+    boolean present_operatorType = true && (isSetOperatorType());
+    builder.append(present_operatorType);
+    if (present_operatorType)
+      builder.append(operatorType.getValue());
+
+    boolean present_operatorAttributes = true && (isSetOperatorAttributes());
+    builder.append(present_operatorAttributes);
+    if (present_operatorAttributes)
+      builder.append(operatorAttributes);
+
+    boolean present_operatorCounters = true && (isSetOperatorCounters());
+    builder.append(present_operatorCounters);
+    if (present_operatorCounters)
+      builder.append(operatorCounters);
+
+    boolean present_done = true;
+    builder.append(present_done);
+    if (present_done)
+      builder.append(done);
+
+    boolean present_started = true;
+    builder.append(present_started);
+    if (present_started)
+      builder.append(started);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(Operator other) {
diff --git a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Query.java b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Query.java
index f7469c4..cdabef7 100644
--- a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Query.java
+++ b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Query.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.ql.plan.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -688,7 +689,49 @@ public class Query implements org.apache.thrift.TBase<Query, Query._Fields>, jav
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_queryId = true && (isSetQueryId());
+    builder.append(present_queryId);
+    if (present_queryId)
+      builder.append(queryId);
+
+    boolean present_queryType = true && (isSetQueryType());
+    builder.append(present_queryType);
+    if (present_queryType)
+      builder.append(queryType);
+
+    boolean present_queryAttributes = true && (isSetQueryAttributes());
+    builder.append(present_queryAttributes);
+    if (present_queryAttributes)
+      builder.append(queryAttributes);
+
+    boolean present_queryCounters = true && (isSetQueryCounters());
+    builder.append(present_queryCounters);
+    if (present_queryCounters)
+      builder.append(queryCounters);
+
+    boolean present_stageGraph = true && (isSetStageGraph());
+    builder.append(present_stageGraph);
+    if (present_stageGraph)
+      builder.append(stageGraph);
+
+    boolean present_stageList = true && (isSetStageList());
+    builder.append(present_stageList);
+    if (present_stageList)
+      builder.append(stageList);
+
+    boolean present_done = true;
+    builder.append(present_done);
+    if (present_done)
+      builder.append(done);
+
+    boolean present_started = true;
+    builder.append(present_started);
+    if (present_started)
+      builder.append(started);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(Query other) {
diff --git a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/QueryPlan.java b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/QueryPlan.java
index ce8827d..71f79a3 100644
--- a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/QueryPlan.java
+++ b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/QueryPlan.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.ql.plan.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -348,7 +349,24 @@ public class QueryPlan implements org.apache.thrift.TBase<QueryPlan, QueryPlan._
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_queries = true && (isSetQueries());
+    builder.append(present_queries);
+    if (present_queries)
+      builder.append(queries);
+
+    boolean present_done = true;
+    builder.append(present_done);
+    if (present_done)
+      builder.append(done);
+
+    boolean present_started = true;
+    builder.append(present_started);
+    if (present_started)
+      builder.append(started);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(QueryPlan other) {
diff --git a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Stage.java b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Stage.java
index e27a4dc..b3b51bf 100644
--- a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Stage.java
+++ b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Stage.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.ql.plan.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -642,7 +643,44 @@ public class Stage implements org.apache.thrift.TBase<Stage, Stage._Fields>, jav
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_stageId = true && (isSetStageId());
+    builder.append(present_stageId);
+    if (present_stageId)
+      builder.append(stageId);
+
+    boolean present_stageType = true && (isSetStageType());
+    builder.append(present_stageType);
+    if (present_stageType)
+      builder.append(stageType.getValue());
+
+    boolean present_stageAttributes = true && (isSetStageAttributes());
+    builder.append(present_stageAttributes);
+    if (present_stageAttributes)
+      builder.append(stageAttributes);
+
+    boolean present_stageCounters = true && (isSetStageCounters());
+    builder.append(present_stageCounters);
+    if (present_stageCounters)
+      builder.append(stageCounters);
+
+    boolean present_taskList = true && (isSetTaskList());
+    builder.append(present_taskList);
+    if (present_taskList)
+      builder.append(taskList);
+
+    boolean present_done = true;
+    builder.append(present_done);
+    if (present_done)
+      builder.append(done);
+
+    boolean present_started = true;
+    builder.append(present_started);
+    if (present_started)
+      builder.append(started);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(Stage other) {
diff --git a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Task.java b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Task.java
index 3652ca4..88b9bf0 100644
--- a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Task.java
+++ b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Task.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.ql.plan.api;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -696,7 +697,49 @@ public class Task implements org.apache.thrift.TBase<Task, Task._Fields>, java.i
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_taskId = true && (isSetTaskId());
+    builder.append(present_taskId);
+    if (present_taskId)
+      builder.append(taskId);
+
+    boolean present_taskType = true && (isSetTaskType());
+    builder.append(present_taskType);
+    if (present_taskType)
+      builder.append(taskType.getValue());
+
+    boolean present_taskAttributes = true && (isSetTaskAttributes());
+    builder.append(present_taskAttributes);
+    if (present_taskAttributes)
+      builder.append(taskAttributes);
+
+    boolean present_taskCounters = true && (isSetTaskCounters());
+    builder.append(present_taskCounters);
+    if (present_taskCounters)
+      builder.append(taskCounters);
+
+    boolean present_operatorGraph = true && (isSetOperatorGraph());
+    builder.append(present_operatorGraph);
+    if (present_operatorGraph)
+      builder.append(operatorGraph);
+
+    boolean present_operatorList = true && (isSetOperatorList());
+    builder.append(present_operatorList);
+    if (present_operatorList)
+      builder.append(operatorList);
+
+    boolean present_done = true;
+    builder.append(present_done);
+    if (present_done)
+      builder.append(done);
+
+    boolean present_started = true;
+    builder.append(present_started);
+    if (present_started)
+      builder.append(started);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(Task other) {
diff --git a/src/serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde/Constants.java b/src/serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde/Constants.java
index 0d7bcd6..2c32999 100644
--- a/src/serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde/Constants.java
+++ b/src/serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde/Constants.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.serde;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
diff --git a/src/service/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/service/HiveClusterStatus.java b/src/service/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/service/HiveClusterStatus.java
index 00f3323..b4f6d75 100644
--- a/src/service/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/service/HiveClusterStatus.java
+++ b/src/service/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/service/HiveClusterStatus.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.service;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -514,7 +515,39 @@ public class HiveClusterStatus implements org.apache.thrift.TBase<HiveClusterSta
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_taskTrackers = true;
+    builder.append(present_taskTrackers);
+    if (present_taskTrackers)
+      builder.append(taskTrackers);
+
+    boolean present_mapTasks = true;
+    builder.append(present_mapTasks);
+    if (present_mapTasks)
+      builder.append(mapTasks);
+
+    boolean present_reduceTasks = true;
+    builder.append(present_reduceTasks);
+    if (present_reduceTasks)
+      builder.append(reduceTasks);
+
+    boolean present_maxMapTasks = true;
+    builder.append(present_maxMapTasks);
+    if (present_maxMapTasks)
+      builder.append(maxMapTasks);
+
+    boolean present_maxReduceTasks = true;
+    builder.append(present_maxReduceTasks);
+    if (present_maxReduceTasks)
+      builder.append(maxReduceTasks);
+
+    boolean present_state = true && (isSetState());
+    builder.append(present_state);
+    if (present_state)
+      builder.append(state.getValue());
+
+    return builder.toHashCode();
   }
 
   public int compareTo(HiveClusterStatus other) {
diff --git a/src/service/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/service/HiveServerException.java b/src/service/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/service/HiveServerException.java
index 77dd0f3..69919b1 100644
--- a/src/service/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/service/HiveServerException.java
+++ b/src/service/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/service/HiveServerException.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.service;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -328,7 +329,24 @@ public class HiveServerException extends Exception implements org.apache.thrift.
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_message = true && (isSetMessage());
+    builder.append(present_message);
+    if (present_message)
+      builder.append(message);
+
+    boolean present_errorCode = true;
+    builder.append(present_errorCode);
+    if (present_errorCode)
+      builder.append(errorCode);
+
+    boolean present_SQLState = true && (isSetSQLState());
+    builder.append(present_SQLState);
+    if (present_SQLState)
+      builder.append(SQLState);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(HiveServerException other) {
diff --git a/src/service/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/service/ThriftHive.java b/src/service/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/service/ThriftHive.java
index c70eed9..b7e5c1d 100644
--- a/src/service/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/service/ThriftHive.java
+++ b/src/service/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/service/ThriftHive.java
@@ -5,6 +5,7 @@
  */
 package org.apache.hadoop.hive.service;
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -981,7 +982,14 @@ public class ThriftHive {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_query = true && (isSetQuery());
+      builder.append(present_query);
+      if (present_query)
+        builder.append(query);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(execute_args other) {
@@ -1275,7 +1283,14 @@ public class ThriftHive {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_ex = true && (isSetEx());
+      builder.append(present_ex);
+      if (present_ex)
+        builder.append(ex);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(execute_result other) {
@@ -1504,7 +1519,9 @@ public class ThriftHive {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      return builder.toHashCode();
     }
 
     public int compareTo(fetchOne_args other) {
@@ -1827,7 +1844,19 @@ public class ThriftHive {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ex = true && (isSetEx());
+      builder.append(present_ex);
+      if (present_ex)
+        builder.append(ex);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(fetchOne_result other) {
@@ -2153,7 +2182,14 @@ public class ThriftHive {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_numRows = true;
+      builder.append(present_numRows);
+      if (present_numRows)
+        builder.append(numRows);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(fetchN_args other) {
@@ -2522,7 +2558,19 @@ public class ThriftHive {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ex = true && (isSetEx());
+      builder.append(present_ex);
+      if (present_ex)
+        builder.append(ex);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(fetchN_result other) {
@@ -2797,7 +2845,9 @@ public class ThriftHive {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      return builder.toHashCode();
     }
 
     public int compareTo(fetchAll_args other) {
@@ -3140,7 +3190,19 @@ public class ThriftHive {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ex = true && (isSetEx());
+      builder.append(present_ex);
+      if (present_ex)
+        builder.append(ex);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(fetchAll_result other) {
@@ -3415,7 +3477,9 @@ public class ThriftHive {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      return builder.toHashCode();
     }
 
     public int compareTo(getSchema_args other) {
@@ -3738,7 +3802,19 @@ public class ThriftHive {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ex = true && (isSetEx());
+      builder.append(present_ex);
+      if (present_ex)
+        builder.append(ex);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(getSchema_result other) {
@@ -3997,7 +4073,9 @@ public class ThriftHive {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      return builder.toHashCode();
     }
 
     public int compareTo(getThriftSchema_args other) {
@@ -4320,7 +4398,19 @@ public class ThriftHive {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ex = true && (isSetEx());
+      builder.append(present_ex);
+      if (present_ex)
+        builder.append(ex);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(getThriftSchema_result other) {
@@ -4579,7 +4669,9 @@ public class ThriftHive {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      return builder.toHashCode();
     }
 
     public int compareTo(getClusterStatus_args other) {
@@ -4902,7 +4994,19 @@ public class ThriftHive {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ex = true && (isSetEx());
+      builder.append(present_ex);
+      if (present_ex)
+        builder.append(ex);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(getClusterStatus_result other) {
@@ -5161,7 +5265,9 @@ public class ThriftHive {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      return builder.toHashCode();
     }
 
     public int compareTo(getQueryPlan_args other) {
@@ -5484,7 +5590,19 @@ public class ThriftHive {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ex = true && (isSetEx());
+      builder.append(present_ex);
+      if (present_ex)
+        builder.append(ex);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(getQueryPlan_result other) {
@@ -5743,7 +5861,9 @@ public class ThriftHive {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      return builder.toHashCode();
     }
 
     public int compareTo(clean_args other) {
@@ -5943,7 +6063,9 @@ public class ThriftHive {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      return builder.toHashCode();
     }
 
     public int compareTo(clean_result other) {
-- 
1.7.0.4

