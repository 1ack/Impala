From f3f51c8f106c767ae1a30bf12032c0d3965f379a Mon Sep 17 00:00:00 2001
From: Kevin Wilfong <kevinwilfong@apache.org>
Date: Tue, 8 May 2012 16:45:35 +0000
Subject: [PATCH 053/148] HIVE-2971 GET_JSON_OBJECT fails on some valid JSON keys (gangtimliu via kevinwilfong)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1335630 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit 7ad797c64a823f9ac36f90c003073893160c00a0)
---
 data/files/json.txt                                |    2 +-
 .../org/apache/hadoop/hive/ql/udf/UDFJson.java     |    8 ++++----
 .../queries/clientpositive/udf_get_json_object.q   |    4 ++++
 .../clientpositive/udf_get_json_object.q.out       |   20 ++++++++++++++++++++
 4 files changed, 29 insertions(+), 5 deletions(-)

diff --git a/src/data/files/json.txt b/src/data/files/json.txt
index 6bb8a0a..1dcda43 100644
--- a/src/data/files/json.txt
+++ b/src/data/files/json.txt
@@ -1 +1 @@
-{"store":{"fruit":[{"weight":8,"type":"apple"},{"weight":9,"type":"pear"}],"basket":[[1,2,{"b":"y","a":"x"}],[3,4],[5,6]],"book":[{"author":"Nigel Rees","title":"Sayings of the Century","category":"reference","price":8.95},{"author":"Herman Melville","title":"Moby Dick","category":"fiction","price":8.99,"isbn":"0-553-21311-3"},{"author":"J. R. R. Tolkien","title":"The Lord of the Rings","category":"fiction","reader":[{"age":25,"name":"bob"},{"age":26,"name":"jack"}],"price":22.99,"isbn":"0-395-19395-8"}],"bicycle":{"price":19.95,"color":"red"}},"email":"amy@only_for_json_udf_test.net","owner":"amy"}
+{"store":{"fruit":[{"weight":8,"type":"apple"},{"weight":9,"type":"pear"}],"basket":[[1,2,{"b":"y","a":"x"}],[3,4],[5,6]],"book":[{"author":"Nigel Rees","title":"Sayings of the Century","category":"reference","price":8.95},{"author":"Herman Melville","title":"Moby Dick","category":"fiction","price":8.99,"isbn":"0-553-21311-3"},{"author":"J. R. R. Tolkien","title":"The Lord of the Rings","category":"fiction","reader":[{"age":25,"name":"bob"},{"age":26,"name":"jack"}],"price":22.99,"isbn":"0-395-19395-8"}],"bicycle":{"price":19.95,"color":"red"}},"email":"amy@only_for_json_udf_test.net","owner":"amy","zip code":"94025","fb:testid":"1234"}
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFJson.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFJson.java
index 649a41f..12ff482 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFJson.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFJson.java
@@ -55,7 +55,7 @@ import org.json.JSONObject;
     + "  [,] : Union operator\n"
     + "  [start:end:step] : array slice operator\n")
 public class UDFJson extends UDF {
-  private final Pattern patternKey = Pattern.compile("^([a-zA-Z0-9_\\-]+).*");
+  private final Pattern patternKey = Pattern.compile("^([a-zA-Z0-9_\\-\\:\\s]+).*");
   private final Pattern patternIndex = Pattern.compile("\\[([0-9]+|\\*)\\]");
 
   // An LRU cache using a linked hash map
@@ -93,15 +93,15 @@ public class UDFJson extends UDF {
    * Extract json object from a json string based on json path specified, and
    * return json string of the extracted json object. It will return null if the
    * input json string is invalid.
-   * 
+   *
    * A limited version of JSONPath supported: $ : Root object . : Child operator
    * [] : Subscript operator for array * : Wildcard for []
-   * 
+   *
    * Syntax not supported that's worth noticing: '' : Zero length string as key
    * .. : Recursive descent &amp;#064; : Current object/element () : Script
    * expression ?() : Filter (script) expression. [,] : Union operator
    * [start:end:step] : array slice operator
-   * 
+   *
    * @param jsonString
    *          the json string.
    * @param pathString
diff --git a/src/ql/src/test/queries/clientpositive/udf_get_json_object.q b/src/ql/src/test/queries/clientpositive/udf_get_json_object.q
index 7a0a1bd..13194da 100644
--- a/src/ql/src/test/queries/clientpositive/udf_get_json_object.q
+++ b/src/ql/src/test/queries/clientpositive/udf_get_json_object.q
@@ -23,3 +23,7 @@ SELECT get_json_object(src_json.json, '$.store.book[*].reader[0].age'), get_json
 SELECT get_json_object(src_json.json, '$.store.basket[0][1]'), get_json_object(src_json.json, '$.store.basket[*]'), get_json_object(src_json.json, '$.store.basket[*][0]'), get_json_object(src_json.json, '$.store.basket[0][*]'), get_json_object(src_json.json, '$.store.basket[*][*]'), get_json_object(src_json.json, '$.store.basket[0][2].b'), get_json_object(src_json.json, '$.store.basket[0][*].b') FROM src_json;
 
 SELECT get_json_object(src_json.json, '$.non_exist_key'),  get_json_object(src_json.json, '$..no_recursive'), get_json_object(src_json.json, '$.store.book[10]'), get_json_object(src_json.json, '$.store.book[0].non_exist_key'), get_json_object(src_json.json, '$.store.basket[*].non_exist_key'), get_json_object(src_json.json, '$.store.basket[0][*].non_exist_key') FROM src_json;
+
+SELECT get_json_object(src_json.json, '$.zip code') FROM src_json;
+
+SELECT get_json_object(src_json.json, '$.fb:testid') FROM src_json;
\ No newline at end of file
diff --git a/src/ql/src/test/results/clientpositive/udf_get_json_object.q.out b/src/ql/src/test/results/clientpositive/udf_get_json_object.q.out
index e3b0960..36162ab 100644
--- a/src/ql/src/test/results/clientpositive/udf_get_json_object.q.out
+++ b/src/ql/src/test/results/clientpositive/udf_get_json_object.q.out
@@ -153,3 +153,23 @@ POSTHOOK: Input: default@src_json
 #### A masked pattern was here ####
 POSTHOOK: Lineage: dest1.c1 SIMPLE []
 NULL	NULL	NULL	NULL	NULL	NULL
+PREHOOK: query: SELECT get_json_object(src_json.json, '$.zip code') FROM src_json
+PREHOOK: type: QUERY
+PREHOOK: Input: default@src_json
+#### A masked pattern was here ####
+POSTHOOK: query: SELECT get_json_object(src_json.json, '$.zip code') FROM src_json
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@src_json
+#### A masked pattern was here ####
+POSTHOOK: Lineage: dest1.c1 SIMPLE []
+94025
+PREHOOK: query: SELECT get_json_object(src_json.json, '$.fb:testid') FROM src_json
+PREHOOK: type: QUERY
+PREHOOK: Input: default@src_json
+#### A masked pattern was here ####
+POSTHOOK: query: SELECT get_json_object(src_json.json, '$.fb:testid') FROM src_json
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@src_json
+#### A masked pattern was here ####
+POSTHOOK: Lineage: dest1.c1 SIMPLE []
+1234
-- 
1.7.0.4

