From 70a7889a28dfc5792389616d4e5c1fc17d983b90 Mon Sep 17 00:00:00 2001
From: Zhenxiao Luo <zhenxiao@cloudera.com>
Date: Thu, 21 Jun 2012 10:04:55 -0700
Subject: [PATCH 038/148] HIVE-3164. Fix and Backport HIVE-3164: Fix non-deterministic testcases failures when running Hive0.9.0 on MapReduce2

Reason: Bug
Author: Zhenxiao Luo
Ref: CDH-6377
---
 .../groupby7_noskew_multi_single_reducer.q         |    4 +-
 .../groupby_complex_types_multi_single_reducer.q   |    4 +-
 .../clientpositive/groupby_multi_single_reducer.q  |   16 +++---
 ql/src/test/queries/clientpositive/leftsemijoin.q  |    6 +-
 .../groupby7_noskew_multi_single_reducer.q.out     |   12 ++--
 ...roupby_complex_types_multi_single_reducer.q.out |   18 +++---
 .../groupby_multi_single_reducer.q.out             |   62 ++++++++++----------
 .../test/results/clientpositive/leftsemijoin.q.out |   16 +++---
 8 files changed, 69 insertions(+), 69 deletions(-)

diff --git a/src/ql/src/test/queries/clientpositive/groupby7_noskew_multi_single_reducer.q b/src/ql/src/test/queries/clientpositive/groupby7_noskew_multi_single_reducer.q
index bccdc76..802aea2 100644
--- a/src/ql/src/test/queries/clientpositive/groupby7_noskew_multi_single_reducer.q
+++ b/src/ql/src/test/queries/clientpositive/groupby7_noskew_multi_single_reducer.q
@@ -17,5 +17,5 @@ FROM SRC
 INSERT OVERWRITE TABLE DEST1 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key limit 10
 INSERT OVERWRITE TABLE DEST2 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key limit 10;
 
-SELECT DEST1.* FROM DEST1;
-SELECT DEST2.* FROM DEST2;
+SELECT DEST1.* FROM DEST1 ORDER BY key ASC, value ASC;
+SELECT DEST2.* FROM DEST2 ORDER BY key ASC, value ASC;
diff --git a/src/ql/src/test/queries/clientpositive/groupby_complex_types_multi_single_reducer.q b/src/ql/src/test/queries/clientpositive/groupby_complex_types_multi_single_reducer.q
index 4c372d2..22c5a38 100644
--- a/src/ql/src/test/queries/clientpositive/groupby_complex_types_multi_single_reducer.q
+++ b/src/ql/src/test/queries/clientpositive/groupby_complex_types_multi_single_reducer.q
@@ -12,6 +12,6 @@ FROM SRC
 INSERT OVERWRITE TABLE DEST1 SELECT ARRAY(SRC.key), COUNT(1) GROUP BY ARRAY(SRC.key) limit 10
 INSERT OVERWRITE TABLE DEST2 SELECT MAP(SRC.key, SRC.value), COUNT(1) GROUP BY MAP(SRC.key, SRC.value) limit 10;
 
-SELECT DEST1.* FROM DEST1;
-SELECT DEST2.* FROM DEST2;
+SELECT DEST1.* FROM DEST1 ORDER BY key[0] ASC, value ASC;
+SELECT DEST2.* FROM DEST2 ORDER BY 1 ASC, value ASC;
 
diff --git a/src/ql/src/test/queries/clientpositive/groupby_multi_single_reducer.q b/src/ql/src/test/queries/clientpositive/groupby_multi_single_reducer.q
index 1cdb254..145aab8 100644
--- a/src/ql/src/test/queries/clientpositive/groupby_multi_single_reducer.q
+++ b/src/ql/src/test/queries/clientpositive/groupby_multi_single_reducer.q
@@ -17,9 +17,9 @@ INSERT OVERWRITE TABLE dest_g2 SELECT substr(src.key,1,1), count(DISTINCT substr
 INSERT OVERWRITE TABLE dest_g3 SELECT substr(src.key,1,1), count(DISTINCT substr(src.value,5)), concat(substr(src.key,1,1),sum(substr(src.value,5))), sum(DISTINCT substr(src.value, 5)), count(src.value) WHERE substr(src.key,1,1) < 5 GROUP BY substr(src.key,1,1)
 INSERT OVERWRITE TABLE dest_g4 SELECT substr(src.key,1,1), count(DISTINCT substr(src.value,5)), concat(substr(src.key,1,1),sum(substr(src.value,5))), sum(DISTINCT substr(src.value, 5)), count(src.value) GROUP BY substr(src.key,1,1);
 
-SELECT * FROM dest_g2;
-SELECT * FROM dest_g3;
-SELECT * FROM dest_g4;
+SELECT * FROM dest_g2 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC;
+SELECT * FROM dest_g3 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC;
+SELECT * FROM dest_g4 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC;
 
 EXPLAIN
 FROM src
@@ -36,11 +36,11 @@ INSERT OVERWRITE TABLE dest_g4 SELECT substr(src.key,1,1), count(DISTINCT substr
 INSERT OVERWRITE TABLE dest_h2 SELECT substr(src.key,1,1), count(DISTINCT substr(src.value,5)), concat(substr(src.key,1,1),sum(substr(src.value,5))), sum(substr(src.value, 5)), count(src.value) GROUP BY substr(src.key,1,1), substr(src.key,2,1) LIMIT 10
 INSERT OVERWRITE TABLE dest_h3 SELECT substr(src.key,1,1), count(DISTINCT substr(src.value,5)), concat(substr(src.key,1,1),sum(substr(src.value,5))), sum(substr(src.value, 5)), count(src.value) WHERE substr(src.key,1,1) >= 5 GROUP BY substr(src.key,1,1), substr(src.key,2,1);
 
-SELECT * FROM dest_g2;
-SELECT * FROM dest_g3;
-SELECT * FROM dest_g4;
-SELECT * FROM dest_h2;
-SELECT * FROM dest_h3;
+SELECT * FROM dest_g2 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC;
+SELECT * FROM dest_g3 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC;
+SELECT * FROM dest_g4 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC;
+SELECT * FROM dest_h2 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC;
+SELECT * FROM dest_h3 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC;
 
 DROP TABLE dest_g2;
 DROP TABLE dest_g3;
diff --git a/src/ql/src/test/queries/clientpositive/leftsemijoin.q b/src/ql/src/test/queries/clientpositive/leftsemijoin.q
index 853267d..abe3d33 100644
--- a/src/ql/src/test/queries/clientpositive/leftsemijoin.q
+++ b/src/ql/src/test/queries/clientpositive/leftsemijoin.q
@@ -13,11 +13,11 @@ load data local inpath '../data/files/sales.txt' INTO TABLE sales;
 load data local inpath '../data/files/things.txt' INTO TABLE things partition(ds='2011-10-23');
 load data local inpath '../data/files/things2.txt' INTO TABLE things partition(ds='2011-10-24');
 
-SELECT name,id FROM sales;
+SELECT name,id FROM sales ORDER BY name ASC, id ASC;
 
-SELECT id,name FROM things;
+SELECT id,name FROM things ORDER BY id ASC, name ASC;
 
-SELECT name,id FROM sales LEFT SEMI JOIN things ON (sales.id = things.id);
+SELECT name,id FROM sales LEFT SEMI JOIN things ON (sales.id = things.id) ORDER BY name ASC, id ASC;
 
 drop table sales;
 drop table things;
diff --git a/src/ql/src/test/results/clientpositive/groupby7_noskew_multi_single_reducer.q.out b/src/ql/src/test/results/clientpositive/groupby7_noskew_multi_single_reducer.q.out
index f25a1c2..461f8d6 100644
--- a/src/ql/src/test/results/clientpositive/groupby7_noskew_multi_single_reducer.q.out
+++ b/src/ql/src/test/results/clientpositive/groupby7_noskew_multi_single_reducer.q.out
@@ -212,11 +212,11 @@ POSTHOOK: Lineage: dest1.key EXPRESSION [(src)src.FieldSchema(name:key, type:str
 POSTHOOK: Lineage: dest1.value EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
 POSTHOOK: Lineage: dest2.value EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
-PREHOOK: query: SELECT DEST1.* FROM DEST1
+PREHOOK: query: SELECT DEST1.* FROM DEST1 ORDER BY key ASC, value ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@dest1
 #### A masked pattern was here ####
-POSTHOOK: query: SELECT DEST1.* FROM DEST1
+POSTHOOK: query: SELECT DEST1.* FROM DEST1 ORDER BY key ASC, value ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@dest1
 #### A masked pattern was here ####
@@ -226,19 +226,19 @@ POSTHOOK: Lineage: dest2.key EXPRESSION [(src)src.FieldSchema(name:key, type:str
 POSTHOOK: Lineage: dest2.value EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 0	0.0
 10	10.0
+11	11.0
 100	200.0
 103	206.0
 104	208.0
 105	105.0
-11	11.0
 111	111.0
 113	226.0
 114	114.0
-PREHOOK: query: SELECT DEST2.* FROM DEST2
+PREHOOK: query: SELECT DEST2.* FROM DEST2 ORDER BY key ASC, value ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@dest2
 #### A masked pattern was here ####
-POSTHOOK: query: SELECT DEST2.* FROM DEST2
+POSTHOOK: query: SELECT DEST2.* FROM DEST2 ORDER BY key ASC, value ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@dest2
 #### A masked pattern was here ####
@@ -248,11 +248,11 @@ POSTHOOK: Lineage: dest2.key EXPRESSION [(src)src.FieldSchema(name:key, type:str
 POSTHOOK: Lineage: dest2.value EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 0	0.0
 10	10.0
+11	11.0
 100	200.0
 103	206.0
 104	208.0
 105	105.0
-11	11.0
 111	111.0
 113	226.0
 114	114.0
diff --git a/src/ql/src/test/results/clientpositive/groupby_complex_types_multi_single_reducer.q.out b/src/ql/src/test/results/clientpositive/groupby_complex_types_multi_single_reducer.q.out
index c7d77ab..9e2979a 100644
--- a/src/ql/src/test/results/clientpositive/groupby_complex_types_multi_single_reducer.q.out
+++ b/src/ql/src/test/results/clientpositive/groupby_complex_types_multi_single_reducer.q.out
@@ -245,11 +245,11 @@ POSTHOOK: Lineage: dest1.key EXPRESSION [(src)src.FieldSchema(name:key, type:str
 POSTHOOK: Lineage: dest1.value EXPRESSION [(src)src.null, ]
 POSTHOOK: Lineage: dest2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest2.value EXPRESSION [(src)src.null, ]
-PREHOOK: query: SELECT DEST1.* FROM DEST1
+PREHOOK: query: SELECT DEST1.* FROM DEST1 ORDER BY key[0] ASC, value ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@dest1
 #### A masked pattern was here ####
-POSTHOOK: query: SELECT DEST1.* FROM DEST1
+POSTHOOK: query: SELECT DEST1.* FROM DEST1 ORDER BY key[0] ASC, value ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@dest1
 #### A masked pattern was here ####
@@ -267,11 +267,11 @@ POSTHOOK: Lineage: dest2.value EXPRESSION [(src)src.null, ]
 ["111"]	1
 ["113"]	2
 ["114"]	1
-PREHOOK: query: SELECT DEST2.* FROM DEST2
+PREHOOK: query: SELECT DEST2.* FROM DEST2 ORDER BY 1 ASC, value ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@dest2
 #### A masked pattern was here ####
-POSTHOOK: query: SELECT DEST2.* FROM DEST2
+POSTHOOK: query: SELECT DEST2.* FROM DEST2 ORDER BY 1 ASC, value ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@dest2
 #### A masked pattern was here ####
@@ -279,13 +279,13 @@ POSTHOOK: Lineage: dest1.key EXPRESSION [(src)src.FieldSchema(name:key, type:str
 POSTHOOK: Lineage: dest1.value EXPRESSION [(src)src.null, ]
 POSTHOOK: Lineage: dest2.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest2.value EXPRESSION [(src)src.null, ]
-{"0":"val_0"}	3
 {"10":"val_10"}	1
-{"100":"val_100"}	2
-{"103":"val_103"}	2
-{"104":"val_104"}	2
 {"105":"val_105"}	1
 {"11":"val_11"}	1
 {"111":"val_111"}	1
-{"113":"val_113"}	2
 {"114":"val_114"}	1
+{"100":"val_100"}	2
+{"103":"val_103"}	2
+{"104":"val_104"}	2
+{"113":"val_113"}	2
+{"0":"val_0"}	3
diff --git a/src/ql/src/test/results/clientpositive/groupby_multi_single_reducer.q.out b/src/ql/src/test/results/clientpositive/groupby_multi_single_reducer.q.out
index 37aa6dc..7830697 100644
--- a/src/ql/src/test/results/clientpositive/groupby_multi_single_reducer.q.out
+++ b/src/ql/src/test/results/clientpositive/groupby_multi_single_reducer.q.out
@@ -297,11 +297,11 @@ POSTHOOK: Lineage: dest_g4.c2 EXPRESSION [(src)src.FieldSchema(name:value, type:
 POSTHOOK: Lineage: dest_g4.c3 EXPRESSION [(src)src.null, ]
 POSTHOOK: Lineage: dest_g4.c4 EXPRESSION [(src)src.null, ]
 POSTHOOK: Lineage: dest_g4.key SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
-PREHOOK: query: SELECT * FROM dest_g2
+PREHOOK: query: SELECT * FROM dest_g2 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@dest_g2
 #### A masked pattern was here ####
-POSTHOOK: query: SELECT * FROM dest_g2
+POSTHOOK: query: SELECT * FROM dest_g2 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@dest_g2
 #### A masked pattern was here ####
@@ -325,11 +325,11 @@ POSTHOOK: Lineage: dest_g4.key SIMPLE [(src)src.FieldSchema(name:value, type:str
 7	6	7735.0	447	10
 8	8	8762.0	595	10
 9	7	91047.0	577	12
-PREHOOK: query: SELECT * FROM dest_g3
+PREHOOK: query: SELECT * FROM dest_g3 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@dest_g3
 #### A masked pattern was here ####
-POSTHOOK: query: SELECT * FROM dest_g3
+POSTHOOK: query: SELECT * FROM dest_g3 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@dest_g3
 #### A masked pattern was here ####
@@ -353,11 +353,11 @@ POSTHOOK: Lineage: dest_g4.key SIMPLE [(src)src.FieldSchema(name:value, type:str
 2	69	225571.0	15780	111
 3	62	332004.0	20119	99
 4	74	452763.0	30965	124
-PREHOOK: query: SELECT * FROM dest_g4
+PREHOOK: query: SELECT * FROM dest_g4 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@dest_g4
 #### A masked pattern was here ####
-POSTHOOK: query: SELECT * FROM dest_g4
+POSTHOOK: query: SELECT * FROM dest_g4 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@dest_g4
 #### A masked pattern was here ####
@@ -909,11 +909,11 @@ POSTHOOK: Lineage: dest_h3.c2 EXPRESSION [(src)src.FieldSchema(name:key, type:st
 POSTHOOK: Lineage: dest_h3.c3 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest_h3.c4 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest_h3.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
-PREHOOK: query: SELECT * FROM dest_g2
+PREHOOK: query: SELECT * FROM dest_g2 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@dest_g2
 #### A masked pattern was here ####
-POSTHOOK: query: SELECT * FROM dest_g2
+POSTHOOK: query: SELECT * FROM dest_g2 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@dest_g2
 #### A masked pattern was here ####
@@ -962,11 +962,11 @@ POSTHOOK: Lineage: dest_h3.key EXPRESSION [(src)src.FieldSchema(name:key, type:s
 7	6	7735.0	447	10
 8	8	8762.0	595	10
 9	7	91047.0	577	12
-PREHOOK: query: SELECT * FROM dest_g3
+PREHOOK: query: SELECT * FROM dest_g3 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@dest_g3
 #### A masked pattern was here ####
-POSTHOOK: query: SELECT * FROM dest_g3
+POSTHOOK: query: SELECT * FROM dest_g3 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@dest_g3
 #### A masked pattern was here ####
@@ -1015,11 +1015,11 @@ POSTHOOK: Lineage: dest_h3.key EXPRESSION [(src)src.FieldSchema(name:key, type:s
 2	69	225571.0	15780	111
 3	62	332004.0	20119	99
 4	74	452763.0	30965	124
-PREHOOK: query: SELECT * FROM dest_g4
+PREHOOK: query: SELECT * FROM dest_g4 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@dest_g4
 #### A masked pattern was here ####
-POSTHOOK: query: SELECT * FROM dest_g4
+POSTHOOK: query: SELECT * FROM dest_g4 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@dest_g4
 #### A masked pattern was here ####
@@ -1073,11 +1073,11 @@ POSTHOOK: Lineage: dest_h3.key EXPRESSION [(src)src.FieldSchema(name:key, type:s
 7	6	7735.0	447	10
 8	8	8762.0	595	10
 9	7	91047.0	577	12
-PREHOOK: query: SELECT * FROM dest_h2
+PREHOOK: query: SELECT * FROM dest_h2 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@dest_h2
 #### A masked pattern was here ####
-POSTHOOK: query: SELECT * FROM dest_h2
+POSTHOOK: query: SELECT * FROM dest_h2 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@dest_h2
 #### A masked pattern was here ####
@@ -1122,20 +1122,20 @@ POSTHOOK: Lineage: dest_h3.c3 EXPRESSION [(src)src.FieldSchema(name:value, type:
 POSTHOOK: Lineage: dest_h3.c4 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest_h3.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
 0	1	00.0	0	3
+1	4	1878.0	878	6
 1	5	1729.0	729	8
-1	7	11171.0	1171	11
 1	6	11282.0	1282	12
 1	6	11494.0	1494	11
-1	4	1878.0	878	6
+1	7	11171.0	1171	11
+1	7	11516.0	1516	10
 1	8	11263.0	1263	10
-1	9	12654.0	2654	16
 1	9	12294.0	2294	14
-1	7	11516.0	1516	10
-PREHOOK: query: SELECT * FROM dest_h3
+1	9	12654.0	2654	16
+PREHOOK: query: SELECT * FROM dest_h3 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@dest_h3
 #### A masked pattern was here ####
-POSTHOOK: query: SELECT * FROM dest_h3
+POSTHOOK: query: SELECT * FROM dest_h3 ORDER BY key ASC, c1 ASC, c2 ASC, c3 ASC, c4 ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@dest_h3
 #### A masked pattern was here ####
@@ -1179,38 +1179,38 @@ POSTHOOK: Lineage: dest_h3.c2 EXPRESSION [(src)src.FieldSchema(name:key, type:st
 POSTHOOK: Lineage: dest_h3.c3 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest_h3.c4 EXPRESSION [(src)src.FieldSchema(name:value, type:string, comment:default), ]
 POSTHOOK: Lineage: dest_h3.key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
-5	1	515.0	15	3
 5	1	5102.0	102	2
+5	1	5116.0	116	2
+5	1	515.0	15	3
 5	1	553.0	53	1
 5	1	554.0	54	1
 5	1	557.0	57	1
-5	1	5116.0	116	2
+6	1	6134.0	134	2
 6	1	664.0	64	1
 6	1	665.0	65	1
 6	1	666.0	66	1
-6	1	6134.0	134	2
 6	1	669.0	69	1
-7	1	7210.0	210	3
 7	1	7144.0	144	2
-7	1	774.0	74	1
 7	1	7152.0	152	2
+7	1	7210.0	210	3
+7	1	774.0	74	1
 7	1	777.0	77	1
 7	1	778.0	78	1
+8	1	8166.0	166	2
+8	1	8168.0	168	2
 8	1	88.0	8	1
 8	1	880.0	80	1
 8	1	882.0	82	1
-8	1	8166.0	166	2
-8	1	8168.0	168	2
 8	1	885.0	85	1
 8	1	886.0	86	1
 8	1	887.0	87	1
-9	1	99.0	9	1
-9	1	9270.0	270	3
-9	1	992.0	92	1
 9	1	9190.0	190	2
-9	1	996.0	96	1
 9	1	9194.0	194	2
 9	1	9196.0	196	2
+9	1	9270.0	270	3
+9	1	99.0	9	1
+9	1	992.0	92	1
+9	1	996.0	96	1
 PREHOOK: query: DROP TABLE dest_g2
 PREHOOK: type: DROPTABLE
 PREHOOK: Input: default@dest_g2
diff --git a/src/ql/src/test/results/clientpositive/leftsemijoin.q.out b/src/ql/src/test/results/clientpositive/leftsemijoin.q.out
index ce81225..4425bd2 100644
--- a/src/ql/src/test/results/clientpositive/leftsemijoin.q.out
+++ b/src/ql/src/test/results/clientpositive/leftsemijoin.q.out
@@ -40,42 +40,42 @@ POSTHOOK: query: load data local inpath '../data/files/things2.txt' INTO TABLE t
 POSTHOOK: type: LOAD
 POSTHOOK: Output: default@things
 POSTHOOK: Output: default@things@ds=2011-10-24
-PREHOOK: query: SELECT name,id FROM sales
+PREHOOK: query: SELECT name,id FROM sales ORDER BY name ASC, id ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@sales
 #### A masked pattern was here ####
-POSTHOOK: query: SELECT name,id FROM sales
+POSTHOOK: query: SELECT name,id FROM sales ORDER BY name ASC, id ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@sales
 #### A masked pattern was here ####
-Joe	2
 Hank	2
-PREHOOK: query: SELECT id,name FROM things
+Joe	2
+PREHOOK: query: SELECT id,name FROM things ORDER BY id ASC, name ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@things@ds=2011-10-23
 PREHOOK: Input: default@things@ds=2011-10-24
 #### A masked pattern was here ####
-POSTHOOK: query: SELECT id,name FROM things
+POSTHOOK: query: SELECT id,name FROM things ORDER BY id ASC, name ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@things@ds=2011-10-23
 POSTHOOK: Input: default@things@ds=2011-10-24
 #### A masked pattern was here ####
 2	Tie
 2	Tie
-PREHOOK: query: SELECT name,id FROM sales LEFT SEMI JOIN things ON (sales.id = things.id)
+PREHOOK: query: SELECT name,id FROM sales LEFT SEMI JOIN things ON (sales.id = things.id) ORDER BY name ASC, id ASC
 PREHOOK: type: QUERY
 PREHOOK: Input: default@sales
 PREHOOK: Input: default@things@ds=2011-10-23
 PREHOOK: Input: default@things@ds=2011-10-24
 #### A masked pattern was here ####
-POSTHOOK: query: SELECT name,id FROM sales LEFT SEMI JOIN things ON (sales.id = things.id)
+POSTHOOK: query: SELECT name,id FROM sales LEFT SEMI JOIN things ON (sales.id = things.id) ORDER BY name ASC, id ASC
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@sales
 POSTHOOK: Input: default@things@ds=2011-10-23
 POSTHOOK: Input: default@things@ds=2011-10-24
 #### A masked pattern was here ####
-Joe	2
 Hank	2
+Joe	2
 PREHOOK: query: drop table sales
 PREHOOK: type: DROPTABLE
 PREHOOK: Input: default@sales
-- 
1.7.0.4

