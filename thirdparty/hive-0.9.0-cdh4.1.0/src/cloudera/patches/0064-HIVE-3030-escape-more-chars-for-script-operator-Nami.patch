From 539c068df5e71b280557198d8fc71be7b3fdefe8 Mon Sep 17 00:00:00 2001
From: Siying Dong <sdong@apache.org>
Date: Tue, 22 May 2012 18:37:37 +0000
Subject: [PATCH 064/144] HIVE-3030 escape more chars for script operator (Namit Jain via Siying Dong)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1341589 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit 54abc308164314a6fae0ef0b2f2241a6d4d9f058)
---
 bin/hive                                           |    1 +
 .../java/org/apache/hadoop/hive/conf/HiveConf.java |    2 +-
 conf/hive-default.xml.template                     |    8 +-
 data/scripts/doubleescapedtab.py                   |   24 ++
 data/scripts/escapedcarriagereturn.py              |   23 ++
 data/scripts/escapednewline.py                     |   23 ++
 data/scripts/escapedtab.py                         |   23 ++
 data/scripts/newline.py                            |    2 +
 .../hadoop/hive/ql/exec/TextRecordReader.java      |    4 +-
 .../hadoop/hive/ql/exec/TextRecordWriter.java      |    4 +-
 .../apache/hadoop/hive/ql/metadata/HiveUtils.java  |   73 +++++-
 ql/src/test/queries/clientpositive/newline.q       |   50 ++++-
 ql/src/test/results/clientpositive/newline.q.out   |  269 +++++++++++++++++++-
 13 files changed, 484 insertions(+), 22 deletions(-)
 create mode 100644 data/scripts/doubleescapedtab.py
 create mode 100644 data/scripts/escapedcarriagereturn.py
 create mode 100644 data/scripts/escapednewline.py
 create mode 100644 data/scripts/escapedtab.py

diff --git a/src/bin/hive b/src/bin/hive
index 995d1a0..0766274 100755
--- a/src/bin/hive
+++ b/src/bin/hive
@@ -216,6 +216,7 @@ if [ "$DEBUG" ]; then
   else
     get_debug_params "$DEBUG"
     export HADOOP_CLIENT_OPTS="$HADOOP_CLIENT_OPTS $HIVE_MAIN_CLIENT_DEBUG_OPTS"
+    export HADOOP_OPTS="$HADOOP_OPTS $HADOOP_CLIENT_OPTS"
   fi
 fi
 
diff --git a/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java b/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
index b89d1e3..185d495 100644
--- a/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
+++ b/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
@@ -389,7 +389,7 @@ public class HiveConf extends Configuration {
         "org.apache.hadoop.hive.ql.exec.TextRecordReader"),
     HIVESCRIPTRECORDWRITER("hive.script.recordwriter",
         "org.apache.hadoop.hive.ql.exec.TextRecordWriter"),
-    HIVESCRIPTESCAPENEWLINES("hive.script.escape.newlines", false),
+    HIVESCRIPTESCAPE("hive.transform.escape.input", false),
 
     // HWI
     HIVEHWILISTENHOST("hive.hwi.listen.host", "0.0.0.0"),
diff --git a/src/conf/hive-default.xml.template b/src/conf/hive-default.xml.template
index a60a84b..09560b8 100644
--- a/src/conf/hive-default.xml.template
+++ b/src/conf/hive-default.xml.template
@@ -1273,12 +1273,12 @@
 </property>
 
 <property>
-  <name>hive.script.escape.newlines</name>
+  <name>hive.transform.escape.input</name>
   <value>false</value>
   <description>
-    This adds an option to escape the newlines when they are passed to the 
-    user script. This is useful is the hive tables can contain data that
-    can contain newlines.
+    This adds an option to escape special chars (newlines, carriage returns and
+    tabs) when they are passed to the user script. This is useful if the hive tables
+    can contain data that contains special characters.
   </description>
 </property>
 
diff --git a/src/data/scripts/doubleescapedtab.py b/src/data/scripts/doubleescapedtab.py
new file mode 100644
index 0000000..d373067
--- /dev/null
+++ b/src/data/scripts/doubleescapedtab.py
@@ -0,0 +1,24 @@
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements. See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership. The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License. You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied. See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+import sys
+
+for line in sys.stdin:
+  print "1\\\\\\t2"
+  print "1\\\\\\\\t2"
+
diff --git a/src/data/scripts/escapedcarriagereturn.py b/src/data/scripts/escapedcarriagereturn.py
new file mode 100644
index 0000000..475928a
--- /dev/null
+++ b/src/data/scripts/escapedcarriagereturn.py
@@ -0,0 +1,23 @@
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements. See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership. The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License. You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied. See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+import sys
+
+for line in sys.stdin:
+  print "1\\\\r2"
+
diff --git a/src/data/scripts/escapednewline.py b/src/data/scripts/escapednewline.py
new file mode 100644
index 0000000..0d57514
--- /dev/null
+++ b/src/data/scripts/escapednewline.py
@@ -0,0 +1,23 @@
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements. See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership. The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License. You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied. See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+import sys
+
+for line in sys.stdin:
+  print "1\\\\n2"
+
diff --git a/src/data/scripts/escapedtab.py b/src/data/scripts/escapedtab.py
new file mode 100644
index 0000000..549c91e
--- /dev/null
+++ b/src/data/scripts/escapedtab.py
@@ -0,0 +1,23 @@
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements. See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership. The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License. You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied. See the License for the
+# specific language governing permissions and limitations
+# under the License.
+#
+import sys
+
+for line in sys.stdin:
+  print "1\\\\t2"
+
diff --git a/src/data/scripts/newline.py b/src/data/scripts/newline.py
index 6ce9993..6500d90 100644
--- a/src/data/scripts/newline.py
+++ b/src/data/scripts/newline.py
@@ -20,3 +20,5 @@ import sys
 
 for line in sys.stdin:
   print "1\\n2"
+  print "1\\r2"
+  print "1\\t2"
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/exec/TextRecordReader.java b/src/ql/src/java/org/apache/hadoop/hive/ql/exec/TextRecordReader.java
index 0c24e7d..8319f11 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/exec/TextRecordReader.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/exec/TextRecordReader.java
@@ -60,8 +60,8 @@ public class TextRecordReader implements RecordReader {
 
     int bytesConsumed = lineReader.readLine((Text) row);
 
-    if (HiveConf.getBoolVar(conf, HiveConf.ConfVars.HIVESCRIPTESCAPENEWLINES)) {
-      return HiveUtils.unescapeNewLine((Text) row);
+    if (HiveConf.getBoolVar(conf, HiveConf.ConfVars.HIVESCRIPTESCAPE)) {
+      return HiveUtils.unescapeText((Text) row);
     }
     return bytesConsumed;
   }
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/exec/TextRecordWriter.java b/src/ql/src/java/org/apache/hadoop/hive/ql/exec/TextRecordWriter.java
index 61a5fbd..10b4594 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/exec/TextRecordWriter.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/exec/TextRecordWriter.java
@@ -46,8 +46,8 @@ public class TextRecordWriter implements RecordWriter {
     Text text = (Text) row;
     Text escapeText = text;
 
-    if (HiveConf.getBoolVar(conf, HiveConf.ConfVars.HIVESCRIPTESCAPENEWLINES)) {
-      escapeText = HiveUtils.escapeNewLine(text);
+    if (HiveConf.getBoolVar(conf, HiveConf.ConfVars.HIVESCRIPTESCAPE)) {
+      escapeText = HiveUtils.escapeText(text);
     }
 
     out.write(escapeText.getBytes(), 0, escapeText.getLength());
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/metadata/HiveUtils.java b/src/ql/src/java/org/apache/hadoop/hive/ql/metadata/HiveUtils.java
index a55dcc4..c75de84 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/metadata/HiveUtils.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/metadata/HiveUtils.java
@@ -97,10 +97,16 @@ public final class HiveUtils {
     return (escape.toString());
   }
 
+  static final byte[] escapeEscapeBytes = "\\\\".getBytes();;
+  static final byte[] escapeUnescapeBytes = "\\".getBytes();
   static final byte[] newLineEscapeBytes = "\\n".getBytes();;
   static final byte[] newLineUnescapeBytes = "\n".getBytes();
+  static final byte[] carriageReturnEscapeBytes = "\\r".getBytes();;
+  static final byte[] carriageReturnUnescapeBytes = "\r".getBytes();
+  static final byte[] tabEscapeBytes = "\\t".getBytes();;
+  static final byte[] tabUnescapeBytes = "\t".getBytes();
 
-  public static Text escapeNewLine(Text text) {
+  public static Text escapeText(Text text) {
     int length = text.getLength();
     byte[] textBytes = text.getBytes();
 
@@ -109,20 +115,50 @@ public final class HiveUtils {
 
     for (int i = 0; i < length; ++i) {
       int c = text.charAt(i);
+      byte[] escaped;
+      int start;
+      int len;
+
       switch (c) {
+
+      case '\\':
+        escaped = escapeEscapeBytes;
+        start = 0;
+        len = escaped.length;
+        break;
+
       case '\n':
-        byte[] escaped = newLineEscapeBytes;
-        escape.append(escaped, 0, escaped.length);
+        escaped = newLineEscapeBytes;
+        start = 0;
+        len = escaped.length;
         break;
+
+      case '\r':
+        escaped = carriageReturnEscapeBytes;
+        start = 0;
+        len = escaped.length;
+        break;
+
+      case '\t':
+        escaped = tabEscapeBytes;
+        start = 0;
+        len = escaped.length;
+        break;
+
       default:
-        escape.append(textBytes, i, 1);
+        escaped = textBytes;
+        start = i;
+        len = 1;
         break;
       }
+
+      escape.append(escaped, start, len);
+
     }
     return escape;
   }
 
-  public static int unescapeNewLine(Text text) {
+  public static int unescapeText(Text text) {
     Text escape = new Text(text);
     text.clear();
 
@@ -136,8 +172,11 @@ public final class HiveUtils {
       case '\\':
         if (hadSlash) {
           text.append(textBytes, i, 1);
+          hadSlash = false;
+        }
+        else {
+          hadSlash = true;
         }
-        hadSlash = true;
         break;
       case 'n':
         if (hadSlash) {
@@ -149,6 +188,28 @@ public final class HiveUtils {
         }
         hadSlash = false;
         break;
+      case 'r':
+        if (hadSlash) {
+          byte[] carriageReturn = carriageReturnUnescapeBytes;
+          text.append(carriageReturn, 0, carriageReturn.length);
+        }
+        else {
+          text.append(textBytes, i, 1);
+        }
+        hadSlash = false;
+        break;
+
+      case 't':
+        if (hadSlash) {
+          byte[] tab = tabUnescapeBytes;
+          text.append(tab, 0, tab.length);
+        }
+        else {
+          text.append(textBytes, i, 1);
+        }
+        hadSlash = false;
+        break;
+
       default:
         if (hadSlash) {
           text.append(textBytes, i-1, 1);
diff --git a/src/ql/src/test/queries/clientpositive/newline.q b/src/ql/src/test/queries/clientpositive/newline.q
index 0a58cff..e51917a 100644
--- a/src/ql/src/test/queries/clientpositive/newline.q
+++ b/src/ql/src/test/queries/clientpositive/newline.q
@@ -1,9 +1,53 @@
 add file ../data/scripts/newline.py;
-set hive.script.escape.newlines=true;
+set hive.transform.escape.input=true;
 
 create table tmp_tmp(key string, value string) stored as rcfile;
 insert overwrite table tmp_tmp
 SELECT TRANSFORM(key, value) USING
-'python newline.py' AS key, value FROM src limit 5;
+'python newline.py' AS key, value FROM src limit 6;
 
-select * from tmp_tmp;
\ No newline at end of file
+select * from tmp_tmp;
+
+drop table tmp_tmp;
+
+add file ../data/scripts/escapednewline.py;
+add file ../data/scripts/escapedtab.py;
+add file ../data/scripts/doubleescapedtab.py;
+add file ../data/scripts/escapedcarriagereturn.py;
+
+create table tmp_tmp(key string, value string) stored as rcfile;
+insert overwrite table tmp_tmp
+SELECT TRANSFORM(key, value) USING
+'python escapednewline.py' AS key, value FROM src limit 5;
+
+select * from tmp_tmp;
+
+SELECT TRANSFORM(key, value) USING
+'/bin/cat' AS (key, value) FROM tmp_tmp;
+
+insert overwrite table tmp_tmp
+SELECT TRANSFORM(key, value) USING
+'python escapedcarriagereturn.py' AS key, value FROM src limit 5;
+
+select * from tmp_tmp;
+
+SELECT TRANSFORM(key, value) USING
+'/bin/cat' AS (key, value) FROM tmp_tmp;
+
+insert overwrite table tmp_tmp
+SELECT TRANSFORM(key, value) USING
+'python escapedtab.py' AS key, value FROM src limit 5;
+
+select * from tmp_tmp;
+
+SELECT TRANSFORM(key, value) USING
+'/bin/cat' AS (key, value) FROM tmp_tmp;
+
+insert overwrite table tmp_tmp
+SELECT TRANSFORM(key, value) USING
+'python doubleescapedtab.py' AS key, value FROM src limit 5;
+
+select * from tmp_tmp;
+
+SELECT TRANSFORM(key, value) USING
+'/bin/cat' AS (key, value) FROM tmp_tmp;
diff --git a/src/ql/src/test/results/clientpositive/newline.q.out b/src/ql/src/test/results/clientpositive/newline.q.out
index 9510372..8237310 100644
--- a/src/ql/src/test/results/clientpositive/newline.q.out
+++ b/src/ql/src/test/results/clientpositive/newline.q.out
@@ -5,13 +5,13 @@ POSTHOOK: type: CREATETABLE
 POSTHOOK: Output: default@tmp_tmp
 PREHOOK: query: insert overwrite table tmp_tmp
 SELECT TRANSFORM(key, value) USING
-'python newline.py' AS key, value FROM src limit 5
+'python newline.py' AS key, value FROM src limit 6
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
 PREHOOK: Output: default@tmp_tmp
 POSTHOOK: query: insert overwrite table tmp_tmp
 SELECT TRANSFORM(key, value) USING
-'python newline.py' AS key, value FROM src limit 5
+'python newline.py' AS key, value FROM src limit 6
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 POSTHOOK: Output: default@tmp_tmp
@@ -31,9 +31,270 @@ POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:str
 2	NULL
 1
 2	NULL
+1	2
 1
 2	NULL
 1
 2	NULL
-1
-2	NULL
+1	2
+PREHOOK: query: drop table tmp_tmp
+PREHOOK: type: DROPTABLE
+PREHOOK: Input: default@tmp_tmp
+PREHOOK: Output: default@tmp_tmp
+POSTHOOK: query: drop table tmp_tmp
+POSTHOOK: type: DROPTABLE
+POSTHOOK: Input: default@tmp_tmp
+POSTHOOK: Output: default@tmp_tmp
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+PREHOOK: query: create table tmp_tmp(key string, value string) stored as rcfile
+PREHOOK: type: CREATETABLE
+POSTHOOK: query: create table tmp_tmp(key string, value string) stored as rcfile
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: default@tmp_tmp
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+PREHOOK: query: insert overwrite table tmp_tmp
+SELECT TRANSFORM(key, value) USING
+'python escapednewline.py' AS key, value FROM src limit 5
+PREHOOK: type: QUERY
+PREHOOK: Input: default@src
+PREHOOK: Output: default@tmp_tmp
+POSTHOOK: query: insert overwrite table tmp_tmp
+SELECT TRANSFORM(key, value) USING
+'python escapednewline.py' AS key, value FROM src limit 5
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@src
+POSTHOOK: Output: default@tmp_tmp
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+PREHOOK: query: select * from tmp_tmp
+PREHOOK: type: QUERY
+PREHOOK: Input: default@tmp_tmp
+#### A masked pattern was here ####
+POSTHOOK: query: select * from tmp_tmp
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@tmp_tmp
+#### A masked pattern was here ####
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+1\n2	NULL
+1\n2	NULL
+1\n2	NULL
+1\n2	NULL
+1\n2	NULL
+PREHOOK: query: SELECT TRANSFORM(key, value) USING
+'/bin/cat' AS (key, value) FROM tmp_tmp
+PREHOOK: type: QUERY
+PREHOOK: Input: default@tmp_tmp
+#### A masked pattern was here ####
+POSTHOOK: query: SELECT TRANSFORM(key, value) USING
+'/bin/cat' AS (key, value) FROM tmp_tmp
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@tmp_tmp
+#### A masked pattern was here ####
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+1\n2	NULL
+1\n2	NULL
+1\n2	NULL
+1\n2	NULL
+1\n2	NULL
+PREHOOK: query: insert overwrite table tmp_tmp
+SELECT TRANSFORM(key, value) USING
+'python escapedcarriagereturn.py' AS key, value FROM src limit 5
+PREHOOK: type: QUERY
+PREHOOK: Input: default@src
+PREHOOK: Output: default@tmp_tmp
+POSTHOOK: query: insert overwrite table tmp_tmp
+SELECT TRANSFORM(key, value) USING
+'python escapedcarriagereturn.py' AS key, value FROM src limit 5
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@src
+POSTHOOK: Output: default@tmp_tmp
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+PREHOOK: query: select * from tmp_tmp
+PREHOOK: type: QUERY
+PREHOOK: Input: default@tmp_tmp
+#### A masked pattern was here ####
+POSTHOOK: query: select * from tmp_tmp
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@tmp_tmp
+#### A masked pattern was here ####
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+1\r2	NULL
+1\r2	NULL
+1\r2	NULL
+1\r2	NULL
+1\r2	NULL
+PREHOOK: query: SELECT TRANSFORM(key, value) USING
+'/bin/cat' AS (key, value) FROM tmp_tmp
+PREHOOK: type: QUERY
+PREHOOK: Input: default@tmp_tmp
+#### A masked pattern was here ####
+POSTHOOK: query: SELECT TRANSFORM(key, value) USING
+'/bin/cat' AS (key, value) FROM tmp_tmp
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@tmp_tmp
+#### A masked pattern was here ####
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+1\r2	NULL
+1\r2	NULL
+1\r2	NULL
+1\r2	NULL
+1\r2	NULL
+PREHOOK: query: insert overwrite table tmp_tmp
+SELECT TRANSFORM(key, value) USING
+'python escapedtab.py' AS key, value FROM src limit 5
+PREHOOK: type: QUERY
+PREHOOK: Input: default@src
+PREHOOK: Output: default@tmp_tmp
+POSTHOOK: query: insert overwrite table tmp_tmp
+SELECT TRANSFORM(key, value) USING
+'python escapedtab.py' AS key, value FROM src limit 5
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@src
+POSTHOOK: Output: default@tmp_tmp
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+PREHOOK: query: select * from tmp_tmp
+PREHOOK: type: QUERY
+PREHOOK: Input: default@tmp_tmp
+#### A masked pattern was here ####
+POSTHOOK: query: select * from tmp_tmp
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@tmp_tmp
+#### A masked pattern was here ####
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+1\t2	NULL
+1\t2	NULL
+1\t2	NULL
+1\t2	NULL
+1\t2	NULL
+PREHOOK: query: SELECT TRANSFORM(key, value) USING
+'/bin/cat' AS (key, value) FROM tmp_tmp
+PREHOOK: type: QUERY
+PREHOOK: Input: default@tmp_tmp
+#### A masked pattern was here ####
+POSTHOOK: query: SELECT TRANSFORM(key, value) USING
+'/bin/cat' AS (key, value) FROM tmp_tmp
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@tmp_tmp
+#### A masked pattern was here ####
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+1\t2	NULL
+1\t2	NULL
+1\t2	NULL
+1\t2	NULL
+1\t2	NULL
+PREHOOK: query: insert overwrite table tmp_tmp
+SELECT TRANSFORM(key, value) USING
+'python doubleescapedtab.py' AS key, value FROM src limit 5
+PREHOOK: type: QUERY
+PREHOOK: Input: default@src
+PREHOOK: Output: default@tmp_tmp
+POSTHOOK: query: insert overwrite table tmp_tmp
+SELECT TRANSFORM(key, value) USING
+'python doubleescapedtab.py' AS key, value FROM src limit 5
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@src
+POSTHOOK: Output: default@tmp_tmp
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+PREHOOK: query: select * from tmp_tmp
+PREHOOK: type: QUERY
+PREHOOK: Input: default@tmp_tmp
+#### A masked pattern was here ####
+POSTHOOK: query: select * from tmp_tmp
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@tmp_tmp
+#### A masked pattern was here ####
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+1\	2
+1\\t2	NULL
+1\	2
+1\\t2	NULL
+1\	2
+PREHOOK: query: SELECT TRANSFORM(key, value) USING
+'/bin/cat' AS (key, value) FROM tmp_tmp
+PREHOOK: type: QUERY
+PREHOOK: Input: default@tmp_tmp
+#### A masked pattern was here ####
+POSTHOOK: query: SELECT TRANSFORM(key, value) USING
+'/bin/cat' AS (key, value) FROM tmp_tmp
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@tmp_tmp
+#### A masked pattern was here ####
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.key SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+POSTHOOK: Lineage: tmp_tmp.value SCRIPT [(src)src.FieldSchema(name:key, type:string, comment:default), (src)src.FieldSchema(name:value, type:string, comment:default), ]
+1\	2
+1\\t2	NULL
+1\	2
+1\\t2	NULL
+1\	2
-- 
1.7.0.4

