From 51b6783b6216fbcdaae6c446da18d24fe1ca20e1 Mon Sep 17 00:00:00 2001
From: Kevin Wilfong <kevinwilfong@apache.org>
Date: Mon, 7 May 2012 16:36:12 +0000
Subject: [PATCH 052/144] HIVE-3000 Potential infinite loop / log spew in ZookeeperHiveLockManager (njain via kevinwilfong)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1335106 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit ed4f45aa96ed66de0b1f36a564d0df2018e5b1ca)
---
 .../zookeeper/ZooKeeperHiveLockManager.java        |   23 ++++++++++---------
 1 files changed, 12 insertions(+), 11 deletions(-)

diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/lockmgr/zookeeper/ZooKeeperHiveLockManager.java b/src/ql/src/java/org/apache/hadoop/hive/ql/lockmgr/zookeeper/ZooKeeperHiveLockManager.java
index fa6602f..1812e25 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/lockmgr/zookeeper/ZooKeeperHiveLockManager.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/lockmgr/zookeeper/ZooKeeperHiveLockManager.java
@@ -68,11 +68,11 @@ public class ZooKeeperHiveLockManager implements HiveLockManager {
 
   private int sessionTimeout;
   private String quorumServers;
-  
+
   private int sleepTime;
   private int numRetriesForLock;
   private int numRetriesForUnLock;
-  
+
   private String clientIp;
 
   public ZooKeeperHiveLockManager() {
@@ -100,8 +100,8 @@ public class ZooKeeperHiveLockManager implements HiveLockManager {
     quorumServers = ZooKeeperHiveLockManager.getQuorumServers(conf);
 
     sleepTime = conf.getIntVar(HiveConf.ConfVars.HIVE_LOCK_SLEEP_BETWEEN_RETRIES) * 1000;
-    numRetriesForLock = conf.getIntVar(HiveConf.ConfVars.HIVE_LOCK_NUMRETRIES);    
-    numRetriesForUnLock = conf.getIntVar(HiveConf.ConfVars.HIVE_UNLOCK_NUMRETRIES);    
+    numRetriesForLock = conf.getIntVar(HiveConf.ConfVars.HIVE_LOCK_NUMRETRIES);
+    numRetriesForUnLock = conf.getIntVar(HiveConf.ConfVars.HIVE_UNLOCK_NUMRETRIES);
     clientIp = "UNKNOWN";
     try {
       InetAddress clientAddr = InetAddress.getLocalHost();
@@ -277,8 +277,8 @@ public class ZooKeeperHiveLockManager implements HiveLockManager {
    *          The data for the zookeeper child
    * @param mode
    *          The mode in which the child needs to be created
-   * @throws KeeperException 
-   * @throws InterruptedException 
+   * @throws KeeperException
+   * @throws InterruptedException
    **/
   private String createChild(String name, byte[] data, CreateMode mode)
       throws KeeperException, InterruptedException {
@@ -288,12 +288,12 @@ public class ZooKeeperHiveLockManager implements HiveLockManager {
   private String getLockName(String parent, HiveLockMode mode) {
     return parent + "/" + "LOCK-" + mode + "-";
   }
-  
+
   private ZooKeeperHiveLock lock (HiveLockObject key, HiveLockMode mode,
       boolean keepAlive, boolean parentCreated) throws LockException {
     int tryNum = 1;
     ZooKeeperHiveLock ret = null;
-    
+
     do {
       try {
         if (tryNum > 1) {
@@ -306,6 +306,7 @@ public class ZooKeeperHiveLockManager implements HiveLockManager {
         }
         tryNum++;
       } catch (Exception e1) {
+        tryNum++;
         if (e1 instanceof KeeperException) {
           KeeperException e = (KeeperException) e1;
           switch (e.code()) {
@@ -350,7 +351,7 @@ public class ZooKeeperHiveLockManager implements HiveLockManager {
     // Create the parents first
     for (String name : names) {
       try {
-        res = createChild(name, new byte[0], CreateMode.PERSISTENT);        
+        res = createChild(name, new byte[0], CreateMode.PERSISTENT);
       } catch (KeeperException e) {
         if (e.code() != KeeperException.Code.NODEEXISTS) {
           //if the exception is not 'NODEEXISTS', re-throw it
@@ -468,7 +469,7 @@ public class ZooKeeperHiveLockManager implements HiveLockManager {
           }
         }
       }
-      
+
       // if we got exception during doing the unlock, rethrow it here
       if(lastExceptionGot != null) {
         throw lastExceptionGot;
@@ -621,7 +622,7 @@ public class ZooKeeperHiveLockManager implements HiveLockManager {
         zooKeeper.close();
         zooKeeper = null;
       }
-      
+
       if (HiveConf.getBoolVar(ctx.getConf(), HiveConf.ConfVars.HIVE_ZOOKEEPER_CLEAN_EXTRA_NODES)) {
         removeAllRedundantNodes();
       }
-- 
1.7.0.4

