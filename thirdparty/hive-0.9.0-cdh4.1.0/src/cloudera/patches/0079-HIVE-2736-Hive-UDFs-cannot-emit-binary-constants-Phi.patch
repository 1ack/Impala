From 940e30d476aa79df89ea2c068ccea0e8270d9e79 Mon Sep 17 00:00:00 2001
From: Ashutosh Chauhan <hashutosh@apache.org>
Date: Thu, 7 Jun 2012 14:55:49 +0000
Subject: [PATCH 079/144] HIVE-2736 : Hive UDFs cannot emit binary constants (Philip Tromans via Ashutosh Chauhan)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1347654 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit 01e16ef139b8fa55246c9aa83a9a43f8f2562121)
---
 .../test/queries/clientpositive/binary_constant.q  |    1 +
 .../results/clientpositive/binary_constant.q.out   |    9 ++++
 .../primitive/PrimitiveObjectInspectorFactory.java |   15 ++++---
 .../WritableConstantBinaryObjectInspector.java     |   43 ++++++++++++++++++++
 4 files changed, 62 insertions(+), 6 deletions(-)
 create mode 100644 ql/src/test/queries/clientpositive/binary_constant.q
 create mode 100644 ql/src/test/results/clientpositive/binary_constant.q.out
 create mode 100644 serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableConstantBinaryObjectInspector.java

diff --git a/src/ql/src/test/queries/clientpositive/binary_constant.q b/src/ql/src/test/queries/clientpositive/binary_constant.q
new file mode 100644
index 0000000..e0a8b95
--- /dev/null
+++ b/src/ql/src/test/queries/clientpositive/binary_constant.q
@@ -0,0 +1 @@
+select cast(cast('a' as binary) as string) from src limit 1;
diff --git a/src/ql/src/test/results/clientpositive/binary_constant.q.out b/src/ql/src/test/results/clientpositive/binary_constant.q.out
new file mode 100644
index 0000000..2b13471
--- /dev/null
+++ b/src/ql/src/test/results/clientpositive/binary_constant.q.out
@@ -0,0 +1,9 @@
+PREHOOK: query: select cast(cast('a' as binary) as string) from src limit 1
+PREHOOK: type: QUERY
+PREHOOK: Input: default@src
+#### A masked pattern was here ####
+POSTHOOK: query: select cast(cast('a' as binary) as string) from src limit 1
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@src
+#### A masked pattern was here ####
+a
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorFactory.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorFactory.java
index 94849e2..7f61344 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorFactory.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorFactory.java
@@ -20,20 +20,21 @@ package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
 import java.util.HashMap;
 
+import org.apache.hadoop.hive.serde2.io.ByteWritable;
+import org.apache.hadoop.hive.serde2.io.DoubleWritable;
+import org.apache.hadoop.hive.serde2.io.ShortWritable;
+import org.apache.hadoop.hive.serde2.io.TimestampWritable;
 import org.apache.hadoop.hive.serde2.objectinspector.ConstantObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils.PrimitiveTypeEntry;
-import org.apache.hadoop.io.Writable;
 import org.apache.hadoop.io.BooleanWritable;
-import org.apache.hadoop.hive.serde2.io.ByteWritable;
-import org.apache.hadoop.hive.serde2.io.ShortWritable;
+import org.apache.hadoop.io.BytesWritable;
+import org.apache.hadoop.io.FloatWritable;
 import org.apache.hadoop.io.IntWritable;
 import org.apache.hadoop.io.LongWritable;
-import org.apache.hadoop.io.FloatWritable;
-import org.apache.hadoop.hive.serde2.io.DoubleWritable;
-import org.apache.hadoop.hive.serde2.io.TimestampWritable;
 import org.apache.hadoop.io.Text;
+import org.apache.hadoop.io.Writable;
 
 /**
  * PrimitiveObjectInspectorFactory is the primary way to create new
@@ -190,6 +191,8 @@ public final class PrimitiveObjectInspectorFactory {
       return new WritableConstantStringObjectInspector((Text)value);
     case TIMESTAMP:
       return new WritableConstantTimestampObjectInspector((TimestampWritable)value);
+    case BINARY:
+      return new WritableConstantBinaryObjectInspector((BytesWritable)value);
     case VOID:
       return new WritableVoidObjectInspector();
     default:
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableConstantBinaryObjectInspector.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableConstantBinaryObjectInspector.java
new file mode 100644
index 0000000..9709213
--- /dev/null
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/WritableConstantBinaryObjectInspector.java
@@ -0,0 +1,43 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hive.serde2.objectinspector.primitive;
+
+import org.apache.hadoop.hive.serde2.objectinspector.ConstantObjectInspector;
+import org.apache.hadoop.io.BytesWritable;
+
+/**
+ * A WritableConstantBinaryObjectInspector is a WritableBinaryObjectInspector
+ * that implements ConstantObjectInspector.
+ */
+public class WritableConstantBinaryObjectInspector extends
+    WritableBinaryObjectInspector implements
+    ConstantObjectInspector {
+
+  private final BytesWritable value;
+
+  public WritableConstantBinaryObjectInspector(BytesWritable value) {
+    super();
+    this.value = value;
+  }
+
+  @Override
+  public BytesWritable getWritableConstantValue() {
+    return value;
+  }
+
+}
-- 
1.7.0.4

