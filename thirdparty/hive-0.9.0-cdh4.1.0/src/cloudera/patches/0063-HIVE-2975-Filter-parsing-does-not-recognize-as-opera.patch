From 13805c4cfb9543d52c98b65b01e8aebf8896bdeb Mon Sep 17 00:00:00 2001
From: Ashutosh Chauhan <hashutosh@apache.org>
Date: Fri, 18 May 2012 21:31:33 +0000
Subject: [PATCH 063/144] HIVE-2975 : Filter parsing does not recognize '!=' as operator and silently ignores invalid tokens (Thomas Weise via Ashutosh Chauhan)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1340264 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit a59e328cab2aec7f92cd6f9fd290ca1cdfe5e743)
---
 .../apache/hadoop/hive/metastore/ObjectStore.java  |    5 +++
 .../hive/metastore/parser/ExpressionTree.java      |   27 +++++++++++++++----
 .../apache/hadoop/hive/metastore/parser/Filter.g   |   12 ++++++++-
 .../hadoop/hive/metastore/TestHiveMetaStore.java   |   14 ++++++++++
 4 files changed, 51 insertions(+), 7 deletions(-)

diff --git a/src/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java b/src/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
index 777e525..a156eaa 100644
--- a/src/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
+++ b/src/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
@@ -1617,6 +1617,11 @@ public class ObjectStore implements RawStore, Configurable {
     } catch(RecognitionException re) {
       throw new MetaException("Error parsing partition filter : " + re);
     }
+
+    if (lexer.errorMsg != null) {
+      throw new MetaException("Error parsing partition filter : " + lexer.errorMsg);
+    }
+
     return parser;
   }
 
diff --git a/src/metastore/src/java/org/apache/hadoop/hive/metastore/parser/ExpressionTree.java b/src/metastore/src/java/org/apache/hadoop/hive/metastore/parser/ExpressionTree.java
index 3945f1e..39267fe 100644
--- a/src/metastore/src/java/org/apache/hadoop/hive/metastore/parser/ExpressionTree.java
+++ b/src/metastore/src/java/org/apache/hadoop/hive/metastore/parser/ExpressionTree.java
@@ -17,8 +17,11 @@
  */
 package org.apache.hadoop.hive.metastore.parser;
 
+import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.Stack;
 
 import org.antlr.runtime.ANTLRStringStream;
@@ -29,6 +32,8 @@ import org.apache.hadoop.hive.metastore.api.Constants;
 import org.apache.hadoop.hive.metastore.api.MetaException;
 import org.apache.hadoop.hive.metastore.api.Table;
 
+import com.google.common.collect.Sets;
+
 /**
  * The Class representing the filter as a  binary tree. The tree has TreeNode's
  * at intermediate level and the leaf level nodes are of type LeafNode.
@@ -49,6 +54,7 @@ public class ExpressionTree {
     LESSTHANOREQUALTO ("<="),
     GREATERTHANOREQUALTO (">="),
     LIKE ("LIKE", "matches"),
+    NOTEQUALS2 ("!=", "!="),
     NOTEQUALS ("<>", "!=");
 
     private final String op;
@@ -83,6 +89,12 @@ public class ExpressionTree {
       throw new Error("Invalid value " + inputOperator +
           " for " + Operator.class.getSimpleName());
     }
+
+    @Override
+    public String toString() {
+      return op;
+    }
+
   }
 
 
@@ -161,6 +173,11 @@ public class ExpressionTree {
       }
     }
 
+    //can only support "=" and "!=" for now, because our JDO lib is buggy when
+    // using objects from map.get()
+    private static final Set<Operator> TABLE_FILTER_OPS = Sets.newHashSet(
+        Operator.EQUALS, Operator.NOTEQUALS, Operator.NOTEQUALS2);
+
     private String generateJDOFilterOverTables(Map<String, Object> params)
         throws MetaException {
       if (keyName.equals(Constants.HIVE_FILTER_FIELD_OWNER)) {
@@ -172,11 +189,9 @@ public class ExpressionTree {
         }
         keyName = "this.lastAccessTime";
       } else if (keyName.startsWith(Constants.HIVE_FILTER_FIELD_PARAMS)) {
-        //can only support "=" and "<>" for now, because our JDO lib is buggy when
-        // using objects from map.get()
-        if (!(operator == Operator.EQUALS || operator == Operator.NOTEQUALS)) {
-          throw new MetaException("Only = and <> are supported " +
-          		"opreators for HIVE_FILTER_FIELD_PARAMS");
+        if (!TABLE_FILTER_OPS.contains(operator)) {
+          throw new MetaException("Only " + TABLE_FILTER_OPS + " are supported " +
+            "operators for HIVE_FILTER_FIELD_PARAMS");
         }
         String paramKeyName = keyName.substring(Constants.HIVE_FILTER_FIELD_PARAMS.length());
         keyName = "this.parameters.get(\"" + paramKeyName + "\")";
@@ -185,7 +200,7 @@ public class ExpressionTree {
         value = value.toString();
       } else {
         throw new MetaException("Invalid key name in filter.  " +
-        		"Use constants from org.apache.hadoop.hive.metastore.api");
+          "Use constants from org.apache.hadoop.hive.metastore.api");
       }
       return generateJDOFilterGeneral(params);
     }
diff --git a/src/metastore/src/java/org/apache/hadoop/hive/metastore/parser/Filter.g b/src/metastore/src/java/org/apache/hadoop/hive/metastore/parser/Filter.g
index 2a80b9a..eae2cd6 100644
--- a/src/metastore/src/java/org/apache/hadoop/hive/metastore/parser/Filter.g
+++ b/src/metastore/src/java/org/apache/hadoop/hive/metastore/parser/Filter.g
@@ -33,6 +33,16 @@ import org.apache.hadoop.hive.metastore.parser.ExpressionTree.LogicalOperator;
 }
 @lexer::header {package org.apache.hadoop.hive.metastore.parser;}
 
+@lexer::members {
+  public String errorMsg;
+
+  @Override
+  public void emitErrorMessage(String msg) {
+    // save for caller to detect invalid filter
+	errorMsg = msg;
+  }
+}
+
 @members {
   public ExpressionTree tree = new ExpressionTree();
 
@@ -121,7 +131,7 @@ KW_LIKE : 'LIKE';
 LPAREN : '(' ;
 RPAREN : ')' ;
 EQUAL : '=';
-NOTEQUAL : '<>';
+NOTEQUAL : '<>' | '!=';
 LESSTHANOREQUALTO : '<=';
 LESSTHAN : '<';
 GREATERTHANOREQUALTO : '>=';
diff --git a/src/metastore/src/test/org/apache/hadoop/hive/metastore/TestHiveMetaStore.java b/src/metastore/src/test/org/apache/hadoop/hive/metastore/TestHiveMetaStore.java
index 554e3d1..5ec7a67 100644
--- a/src/metastore/src/test/org/apache/hadoop/hive/metastore/TestHiveMetaStore.java
+++ b/src/metastore/src/test/org/apache/hadoop/hive/metastore/TestHiveMetaStore.java
@@ -1836,9 +1836,17 @@ public abstract class TestHiveMetaStore extends TestCase {
       checkFilter(client, dbName, tblName, "p2 >= \"p21\"", 3);
       checkFilter(client, dbName, tblName, "p2 <= \"p21\"", 2);
       checkFilter(client, dbName, tblName, "p2 <> \"p12\"", 3);
+      checkFilter(client, dbName, tblName, "p2 != \"p12\"", 3);
       checkFilter(client, dbName, tblName, "p2 like \"p2.*\"", 3);
       checkFilter(client, dbName, tblName, "p2 like \"p.*2\"", 1);
 
+      try {
+        checkFilter(client, dbName, tblName, "p2 !< 'dd'", 0);
+        fail("Invalid operator not detected");
+      } catch (MetaException e) {
+        // expected exception due to lexer error
+      }
+
       cleanUp(dbName, tblName, null);
   }
 
@@ -1974,6 +1982,12 @@ public abstract class TestHiveMetaStore extends TestCase {
       tableNames = client.listTableNamesByFilter(dbName, filter, (short) 2);
       assertEquals(2, tableNames.size());
 
+      filter = org.apache.hadoop.hive.metastore.api.Constants.HIVE_FILTER_FIELD_PARAMS +
+          "test_param_1 != \"yellow\"";
+
+      tableNames = client.listTableNamesByFilter(dbName, filter, (short) 2);
+      assertEquals(2, tableNames.size());
+
       //owner = "testOwner1" and (lastAccessTime = 30 or test_param_1 = "hi")
       filter = org.apache.hadoop.hive.metastore.api.Constants.HIVE_FILTER_FIELD_OWNER +
         " = \"testOwner1\" and (" +
-- 
1.7.0.4

