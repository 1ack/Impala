From 0b964b61c946044dfb7bbf80254d56a2d6cd2e4c Mon Sep 17 00:00:00 2001
From: Edward Capriolo <ecapriolo@apache.org>
Date: Fri, 25 May 2012 23:51:13 +0000
Subject: [PATCH 066/144] HIVE-2372 Argument list too long when streaming (Sergey Tryuber via egc)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1342841 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit 1d17a911ff8ee1dcb490409f4bb995df2eb1a8e8)
---
 .../java/org/apache/hadoop/hive/conf/HiveConf.java |    1 +
 conf/hive-default.xml.template                     |    6 ++
 .../apache/hadoop/hive/ql/exec/ScriptOperator.java |   41 +++++++++++++---
 .../apache/hadoop/hive/ql/exec/TestOperators.java  |   49 ++++++++++++++++++-
 4 files changed, 86 insertions(+), 11 deletions(-)

diff --git a/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java b/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
index 185d495..d446028 100644
--- a/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
+++ b/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
@@ -355,6 +355,7 @@ public class HiveConf extends Configuration {
     HIVEPARTITIONNAME("hive.partition.name", ""),
     HIVESCRIPTAUTOPROGRESS("hive.script.auto.progress", false),
     HIVESCRIPTIDENVVAR("hive.script.operator.id.env.var", "HIVE_SCRIPT_OPERATOR_ID"),
+    HIVESCRIPTTRUNCATEENV("hive.script.operator.truncate.env", false),
     HIVEMAPREDMODE("hive.mapred.mode", "nonstrict"),
     HIVEALIAS("hive.alias", ""),
     HIVEMAPSIDEAGGREGATE("hive.map.aggr", true),
diff --git a/src/conf/hive-default.xml.template b/src/conf/hive-default.xml.template
index 09560b8..b5d14bf 100644
--- a/src/conf/hive-default.xml.template
+++ b/src/conf/hive-default.xml.template
@@ -495,6 +495,12 @@
 </property>
 
 <property>
+  <name>hive.script.operator.truncate.env</name>
+  <value>false</value>
+  <description>Truncate each environment variable for external script in scripts operator to 20KB (to fit system limits)</description>
+</property>
+
+<property>
   <name>hive.exec.compress.output</name>
   <value>false</value>
   <description> This controls whether the final outputs of a query (to a local/hdfs file or a hive table) is compressed. The compression codec and other options are determined from hadoop config variables mapred.output.compress* </description>
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/exec/ScriptOperator.java b/src/ql/src/java/org/apache/hadoop/hive/ql/exec/ScriptOperator.java
index 8f56082..7f04159 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/exec/ScriptOperator.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/exec/ScriptOperator.java
@@ -91,14 +91,13 @@ public class ScriptOperator extends Operator<ScriptDesc> implements
   // of the user assumptions.
   transient boolean firstRow;
 
-  /**
-   * addJobConfToEnvironment is shamelessly copied from hadoop streaming.
-   */
-  static String safeEnvVarName(String var) {
+
+  String safeEnvVarName(String name) {
     StringBuilder safe = new StringBuilder();
-    int len = var.length();
+    int len = name.length();
+
     for (int i = 0; i < len; i++) {
-      char c = var.charAt(i);
+      char c = name.charAt(i);
       char s;
       if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z')
           || (c >= 'a' && c <= 'z')) {
@@ -111,8 +110,32 @@ public class ScriptOperator extends Operator<ScriptDesc> implements
     return safe.toString();
   }
 
-  static void addJobConfToEnvironment(Configuration conf,
-      Map<String, String> env) {
+  /**
+   * Most UNIX implementations impose some limit on the total size of environment variables and
+   * size of strings. To fit in this limit we need sometimes to truncate strings.
+   * @param value environment variable value to check
+   * @param name name of variable (used only for logging purposes)
+   * @param truncate truncate value or not
+   * @return original value, or truncated one if it's length is more then 20KB and
+   * truncate flag is set
+   * @see <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/execve.2.html">Linux
+   * Man page</a> for more details
+   */
+  String safeEnvVarValue(String value, String name, boolean truncate) {
+    final int lenLimit = 20*1024;
+    if (truncate && value.length() > lenLimit) {
+      value = value.substring(0, lenLimit);
+      LOG.warn("Length of environment variable " + name + " was truncated to " + lenLimit
+          + " bytes to fit system limits.");
+    }
+    return value;
+  }
+
+  /**
+   * addJobConfToEnvironment is mostly shamelessly copied from hadoop streaming. Added additional
+   * check on environment variable length
+   */
+  void addJobConfToEnvironment(Configuration conf, Map<String, String> env) {
     Iterator<Map.Entry<String, String>> it = conf.iterator();
     while (it.hasNext()) {
       Map.Entry<String, String> en = it.next();
@@ -121,6 +144,8 @@ public class ScriptOperator extends Operator<ScriptDesc> implements
       // expansion
       String value = conf.get(name); // does variable expansion
       name = safeEnvVarName(name);
+      boolean truncate = conf.getBoolean(HiveConf.ConfVars.HIVESCRIPTTRUNCATEENV.toString(), false);
+      value = safeEnvVarValue(value, name, truncate);
       env.put(name, value);
     }
   }
diff --git a/src/ql/src/test/org/apache/hadoop/hive/ql/exec/TestOperators.java b/src/ql/src/test/org/apache/hadoop/hive/ql/exec/TestOperators.java
index 0ee9aeb..1e0b460 100644
--- a/src/ql/src/test/org/apache/hadoop/hive/ql/exec/TestOperators.java
+++ b/src/ql/src/test/org/apache/hadoop/hive/ql/exec/TestOperators.java
@@ -19,9 +19,7 @@
 package org.apache.hadoop.hive.ql.exec;
 
 import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.LinkedHashMap;
-import java.util.Map;
+import java.util.*;
 
 import junit.framework.TestCase;
 
@@ -185,6 +183,51 @@ public class TestOperators extends TestCase {
     }
   }
 
+  /**
+   *  When ScriptOperator runs external script, it passes job configuration as environment
+   *  variables. But environment variables have some system limitations and we have to check
+   *  job configuration properties firstly. This test checks that staff.
+   */
+  public void testScriptOperatorEnvVarsProcessing() throws Throwable {
+    try {
+      ScriptOperator scriptOperator = new ScriptOperator();
+
+      //Environment Variables name
+      assertEquals("a_b_c", scriptOperator.safeEnvVarName("a.b.c"));
+      assertEquals("a_b_c", scriptOperator.safeEnvVarName("a-b-c"));
+
+      //Environment Variables short values
+      assertEquals("value", scriptOperator.safeEnvVarValue("value", "name", false));
+      assertEquals("value", scriptOperator.safeEnvVarValue("value", "name", true));
+
+      //Environment Variables long values
+      char [] array = new char[20*1024+1];
+      Arrays.fill(array, 'a');
+      String hugeEnvVar = new String(array);
+      assertEquals(20*1024+1, hugeEnvVar.length());
+      assertEquals(20*1024+1, scriptOperator.safeEnvVarValue(hugeEnvVar, "name", false).length());
+      assertEquals(20*1024, scriptOperator.safeEnvVarValue(hugeEnvVar, "name", true).length());
+
+      //Full test
+      Configuration hconf = new JobConf(ScriptOperator.class);
+      hconf.set("name", hugeEnvVar);
+      Map<String, String> env = new HashMap<String, String>();
+
+      HiveConf.setBoolVar(hconf, HiveConf.ConfVars.HIVESCRIPTTRUNCATEENV, false);
+      scriptOperator.addJobConfToEnvironment(hconf, env);
+      assertEquals(20*1024+1, env.get("name").length());
+
+      HiveConf.setBoolVar(hconf, HiveConf.ConfVars.HIVESCRIPTTRUNCATEENV, true);
+      scriptOperator.addJobConfToEnvironment(hconf, env);
+      assertEquals(20*1024, env.get("name").length());
+
+      System.out.println("Script Operator Environment Variables processing ok");
+    } catch (Throwable e) {
+      e.printStackTrace();
+      throw e;
+    }
+  }
+
   public void testScriptOperator() throws Throwable {
     try {
       System.out.println("Testing Script Operator");
-- 
1.7.0.4

