From 2d4ea26e435dcb8b41a50589905e139b522aff58 Mon Sep 17 00:00:00 2001
From: Nick Dimiduk <ndimiduk@apache.org>
Date: Wed, 13 Aug 2014 21:07:31 -0700
Subject: [PATCH 29/31] HBASE-11550 Custom value for BUCKET_CACHE_BUCKETS_KEY should be sorted (Gustavo Anatoly)

Reason: Bug
Author: Esteban Gutierrez
Ref: CDH-20795
---
 .../apache/hadoop/hbase/io/hfile/CacheConfig.java  |    2 +-
 .../hbase/io/hfile/bucket/BucketAllocator.java     |   10 +++++-----
 .../hadoop/hbase/io/hfile/bucket/BucketCache.java  |    6 ++----
 3 files changed, 8 insertions(+), 10 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/CacheConfig.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/CacheConfig.java
index 03d11ae..9153c8a 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/CacheConfig.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/CacheConfig.java
@@ -426,7 +426,7 @@ public class CacheConfig {
         if (configuredBucketSizes != null) {
           bucketSizes = new int[configuredBucketSizes.length];
           for (int i = 0; i < configuredBucketSizes.length; i++) {
-            bucketSizes[i] = Integer.parseInt(configuredBucketSizes[i]);
+            bucketSizes[i] = Integer.parseInt(configuredBucketSizes[i].trim());
           }
         }
         if (combinedWithLru) {
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketAllocator.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketAllocator.java
index 289ef48..4727e76 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketAllocator.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketAllocator.java
@@ -21,12 +21,15 @@
 package org.apache.hadoop.hbase.io.hfile.bucket;
 
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicLong;
 
 import com.google.common.base.Objects;
 import com.google.common.base.Preconditions;
+import com.google.common.primitives.Ints;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.classification.InterfaceAudience;
@@ -298,11 +301,8 @@ public final class BucketAllocator {
   BucketAllocator(long availableSpace, int[] bucketSizes)
       throws BucketAllocatorException {
     this.bucketSizes = bucketSizes == null ? DEFAULT_BUCKET_SIZES : bucketSizes;
-    int largestBucket = this.bucketSizes[0];
-    for (int i : this.bucketSizes) {
-      largestBucket = Math.max(largestBucket, i);
-    }
-    this.bigItemSize = largestBucket;
+    Arrays.sort(this.bucketSizes);
+    this.bigItemSize = Ints.max(this.bucketSizes);
     this.bucketCapacity = FEWEST_ITEMS_IN_BUCKET * bigItemSize;
     buckets = new Bucket[(int) (availableSpace / bucketCapacity)];
     if (buckets.length < this.bucketSizes.length)
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketCache.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketCache.java
index 6fd5354..72a60f1 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketCache.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketCache.java
@@ -169,7 +169,6 @@ public class BucketCache implements BlockCache, HeapSize {
   private long cacheCapacity;
   /** Approximate block size */
   private final long blockSize;
-  private final int[] bucketSizes;
 
   /** Duration of IO errors tolerated before we disable cache, 1 min as default */
   private final int ioErrorsTolerationDuration;
@@ -235,7 +234,6 @@ public class BucketCache implements BlockCache, HeapSize {
     this.cacheCapacity = capacity;
     this.persistencePath = persistencePath;
     this.blockSize = blockSize;
-    this.bucketSizes = bucketSizes;
     this.ioErrorsTolerationDuration = ioErrorsTolerationDuration;
 
     bucketAllocator = new BucketAllocator(capacity, bucketSizes);
@@ -251,7 +249,7 @@ public class BucketCache implements BlockCache, HeapSize {
 
     if (ioEngine.isPersistent() && persistencePath != null) {
       try {
-        retrieveFromFile();
+        retrieveFromFile(bucketSizes);
       } catch (IOException ioex) {
         LOG.error("Can't restore from file because of", ioex);
       } catch (ClassNotFoundException cnfe) {
@@ -867,7 +865,7 @@ public class BucketCache implements BlockCache, HeapSize {
   }
 
   @SuppressWarnings("unchecked")
-  private void retrieveFromFile() throws IOException, BucketAllocatorException,
+  private void retrieveFromFile(int[] bucketSizes) throws IOException, BucketAllocatorException,
       ClassNotFoundException {
     File persistenceFile = new File(persistencePath);
     if (!persistenceFile.exists()) {
-- 
1.7.0.4

