From 512faa296f54514a2beeed712fc01404ebc8128c Mon Sep 17 00:00:00 2001
From: Matteo Bertozzi <matteo.bertozzi@cloudera.com>
Date: Tue, 3 Apr 2012 07:07:24 +0200
Subject: [PATCH 014/151] HBASE-5665 Repeated split causes HRegionServer failures and breaks table

Reason: Bug
Author: Cosmin Lehene
Ref: CDH-4771

git-svn-id: https://svn.apache.org/repos/asf/hbase/branches/0.92@1308549 13f79535-47bb-0310-9956-ffa450edef68
---
 .../apache/hadoop/hbase/regionserver/HRegion.java  |   10 ++++++++
 .../hadoop/hbase/regionserver/HRegionServer.java   |    5 +--
 .../hbase/regionserver/SplitTransaction.java       |    2 +-
 .../hbase/regionserver/TestSplitTransaction.java   |   24 ++++++++++++++++++++
 4 files changed, 37 insertions(+), 4 deletions(-)

diff --git a/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java b/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
index ddcdc3f..8e7e6b3 100644
--- a/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
+++ b/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
@@ -668,6 +668,16 @@ public class HRegion implements HeapSize { // , Writable{
     return this.closing.get();
   }
 
+  /** @return true if region is available (not closed and not closing) */
+  public boolean isAvailable() {
+    return !isClosed() && !isClosing();
+  }
+
+  /** @return true if region is splittable */
+  public boolean isSplittable() {
+    return isAvailable() && !hasReferences();
+  }
+
   boolean areWritesEnabled() {
     synchronized(this.writestate) {
       return this.writestate.writesEnabled;
diff --git a/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java b/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
index ea49006..9982b86 100644
--- a/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
+++ b/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
@@ -1740,8 +1740,7 @@ public class HRegionServer implements HRegionInterface, HBaseRPCErrorHandler,
     try {
       for (Map.Entry<String, HRegion> e: this.onlineRegions.entrySet()) {
         HRegion r = e.getValue();
-        if (!r.getRegionInfo().isMetaRegion()) {
-          if (r.isClosed() || r.isClosing()) continue;
+        if (!r.getRegionInfo().isMetaRegion() && r.isAvailable()) {
           // Don't update zk with this close transition; pass false.
           closeRegion(r.getRegionInfo(), abort, false);
         }
@@ -2845,7 +2844,7 @@ public class HRegionServer implements HRegionInterface, HBaseRPCErrorHandler,
   protected HRegionInfo[] getMostLoadedRegions() {
     ArrayList<HRegionInfo> regions = new ArrayList<HRegionInfo>();
     for (HRegion r : onlineRegions.values()) {
-      if (r.isClosed() || r.isClosing()) {
+      if (!r.isAvailable()) {
         continue;
       }
       if (regions.size() < numRegionsToReport) {
diff --git a/src/main/java/org/apache/hadoop/hbase/regionserver/SplitTransaction.java b/src/main/java/org/apache/hadoop/hbase/regionserver/SplitTransaction.java
index 9926f01..ea8f530 100644
--- a/src/main/java/org/apache/hadoop/hbase/regionserver/SplitTransaction.java
+++ b/src/main/java/org/apache/hadoop/hbase/regionserver/SplitTransaction.java
@@ -161,7 +161,7 @@ public class SplitTransaction {
    * <code>false</code> if it is not (e.g. its already closed, etc.).
    */
   public boolean prepare() {
-    if (this.parent.isClosed() || this.parent.isClosing()) return false;
+    if (!this.parent.isSplittable()) return false;
     // Split key can be null if this region is unsplittable; i.e. has refs.
     if (this.splitrow == null) return false;
     HRegionInfo hri = this.parent.getRegionInfo();
diff --git a/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransaction.java b/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransaction.java
index 408edc6..789e991 100644
--- a/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransaction.java
+++ b/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransaction.java
@@ -19,6 +19,8 @@
  */
 package org.apache.hadoop.hbase.regionserver;
 
+import com.google.common.collect.ImmutableList;
+
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -142,6 +144,28 @@ public class TestSplitTransaction {
   }
 
   /**
+   * Pass a reference store
+   */
+  @Test public void testPrepareWithRegionsWithReference() throws IOException {
+    // create a mock that will act as a reference StoreFile
+    StoreFile storeFileMock  = Mockito.mock(StoreFile.class);
+    when(storeFileMock.isReference()).thenReturn(true);
+
+    // add the mock to the parent stores
+    Store storeMock = Mockito.mock(Store.class);
+    List<StoreFile> storeFileList = new ArrayList<StoreFile>(1);
+    storeFileList.add(storeFileMock);
+    when(storeMock.getStorefiles()).thenReturn(storeFileList);
+    when(storeMock.close()).thenReturn(ImmutableList.copyOf(storeFileList));
+    this.parent.stores.put(Bytes.toBytes(""), storeMock);
+
+    SplitTransaction st = new SplitTransaction(this.parent, GOOD_SPLIT_ROW);
+
+    assertFalse("a region should not be splittable if it has instances of store file references",
+                st.prepare());
+  }
+
+  /**
    * Pass an unreasonable split row.
    */
   @Test public void testPrepareWithBadSplitRow() throws IOException {
-- 
1.7.0.4

