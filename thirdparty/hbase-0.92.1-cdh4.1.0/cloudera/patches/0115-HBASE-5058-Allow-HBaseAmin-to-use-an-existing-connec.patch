From 39e7449fc4cf530de991524b9842e55bdaf157ae Mon Sep 17 00:00:00 2001
From: Gregory Chanan <gchanan@cloudera.com>
Date: Fri, 27 Jul 2012 15:56:03 -0700
Subject: [PATCH 115/154] HBASE-5058 Allow HBaseAmin to use an existing connection (Lars H)

Reason: Backport
Author: Lars Hofhansl
Ref: CDH-5549
---
 .../org/apache/hadoop/hbase/client/HBaseAdmin.java |   28 +++++++++++++++++---
 .../hadoop/hbase/client/HConnectionManager.java    |   28 +++++++++++++------
 .../hadoop/hbase/client/TestFromClientSide.java    |   26 ++++++++++++++++++
 3 files changed, 69 insertions(+), 13 deletions(-)

diff --git a/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java b/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
index 1247126..a675a87 100644
--- a/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
+++ b/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
@@ -96,7 +96,7 @@ public class HBaseAdmin implements Abortable, Closeable {
   public HBaseAdmin(Configuration c)
   throws MasterNotRunningException, ZooKeeperConnectionException {
     this.conf = HBaseConfiguration.create(c);
-      this.connection = HConnectionManager.getConnection(this.conf);
+    this.connection = HConnectionManager.getConnection(this.conf);
     this.pause = this.conf.getLong("hbase.client.pause", 1000);
     this.numRetries = this.conf.getInt("hbase.client.retries.number", 10);
     this.retryLongerMultiplier = this.conf.getInt(
@@ -109,9 +109,6 @@ public class HBaseAdmin implements Abortable, Closeable {
       } catch (MasterNotRunningException mnre) {
         HConnectionManager.deleteStaleConnection(this.connection);
         this.connection = HConnectionManager.getConnection(this.conf);
-      } catch (UndeclaredThrowableException ute) {
-        HConnectionManager.deleteStaleConnection(this.connection);
-        this.connection = HConnectionManager.getConnection(this.conf);
       }
       try { // Sleep
         Thread.sleep(getPauseTime(tries));
@@ -129,6 +126,29 @@ public class HBaseAdmin implements Abortable, Closeable {
     }
   }
 
+ /**
+   * Constructor for externally managed HConnections.
+   * This constructor fails fast if the HMaster is not running.
+   * The HConnection can be re-used again in another attempt.
+   * This constructor fails fast.
+   *
+   * @param connection The HConnection instance to use
+   * @throws MasterNotRunningException if the master is not running
+   * @throws ZooKeeperConnectionException if unable to connect to zookeeper
+   */
+  public HBaseAdmin(HConnection connection)
+      throws MasterNotRunningException, ZooKeeperConnectionException {
+    this.conf = connection.getConfiguration();
+    this.connection = connection;
+
+    this.pause = this.conf.getLong("hbase.client.pause", 1000);
+    this.numRetries = this.conf.getInt("hbase.client.retries.number", 10);
+    this.retryLongerMultiplier = this.conf.getInt(
+        "hbase.client.retries.longer.multiplier", 10);
+
+    this.connection.getMaster();
+  }
+
   /**
    * @return A new CatalogTracker instance; call {@link #cleanupCatalogTracker(CatalogTracker)}
    * to cleanup the returned catalog tracker.
diff --git a/src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java b/src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java
index 052637f..567c6e2 100644
--- a/src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java
+++ b/src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java
@@ -613,14 +613,20 @@ public class HConnectionManager {
     throws MasterNotRunningException, ZooKeeperConnectionException {
 
       // Check if we already have a good master connection
-      if (master != null) {
-        if (master.isMasterRunning()) {
+      try {
+        if (master != null && master.isMasterRunning()) {
           return master;
         }
+      } catch (UndeclaredThrowableException ute) {
+        // log, but ignore, the loop below will attempt to reconnect
+        LOG.info("Exception contacting master. Retrying...", ute.getCause());
       }
+
       checkIfBaseNodeAvailable();
       ServerName sn = null;
       synchronized (this.masterLock) {
+        this.master = null;
+
         for (int tries = 0;
           !this.closed &&
           !this.masterChecked && this.master == null &&
@@ -669,15 +675,19 @@ public class HConnectionManager {
             throw new RuntimeException("Thread was interrupted while trying to connect to master.");
           }
         }
-        this.masterChecked = true;
-      }
-      if (this.master == null) {
-        if (sn == null) {
-          throw new MasterNotRunningException();
+        // Avoid re-checking in the future if this is a managed HConnection,
+        // even if we failed to acquire a master.
+        // (this is to retain the existing behavior before HBASE-5058)
+        this.masterChecked = managed;
+
+        if (this.master == null) {
+          if (sn == null) {
+            throw new MasterNotRunningException();
+          }
+          throw new MasterNotRunningException(sn.toString());
         }
-        throw new MasterNotRunningException(sn.toString());
+        return this.master;
       }
-      return this.master;
     }
 
     private void checkIfBaseNodeAvailable() throws MasterNotRunningException {
diff --git a/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java b/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java
index 79b0d34..a0af1d7 100644
--- a/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java
+++ b/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java
@@ -44,6 +44,8 @@ import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.SynchronousQueue;
 import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
@@ -76,6 +78,7 @@ import org.apache.hadoop.hbase.regionserver.HRegionServer;
 import org.apache.hadoop.hbase.regionserver.Store;
 import org.apache.hadoop.hbase.regionserver.compactions.CompactionRequest;
 import org.apache.hadoop.hbase.util.Bytes;
+import org.apache.hadoop.hbase.client.HTable.DaemonThreadFactory;
 import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Before;
@@ -3781,6 +3784,29 @@ public class TestFromClientSide {
     }
   }
 
+  /**
+   * simple test that just executes parts of the client
+   * API that accept a pre-created HConnction instance
+   *
+   * @throws IOException
+   */
+  @Test
+  public void testUnmanagedHConnection() throws IOException {
+    final byte[] tableName = Bytes.toBytes("testUnmanagedHConnection");
+    TEST_UTIL.createTable(tableName, HConstants.CATALOG_FAMILY);
+    HConnection conn = HConnectionManager.createConnection(TEST_UTIL
+        .getConfiguration());
+    ExecutorService pool = new ThreadPoolExecutor(1, Integer.MAX_VALUE,
+        60, TimeUnit.SECONDS,
+        new SynchronousQueue<Runnable>(),
+        new DaemonThreadFactory());
+    ((ThreadPoolExecutor)pool).allowCoreThreadTimeOut(true);
+    HTable t = new HTable(tableName, conn, pool);
+    HBaseAdmin ha = new HBaseAdmin(conn);
+    assertTrue(ha.tableExists(tableName));
+    assertTrue(t.get(new Get(ROW)).isEmpty());
+  }
+
   @Test
   public void testMiscHTableStuff() throws IOException {
     final byte[] tableAname = Bytes.toBytes("testMiscHTableStuffA");
-- 
1.7.0.4

