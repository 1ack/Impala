From cdad1e25c797adc7fbd79cbb2b2df3d2ed300c5c Mon Sep 17 00:00:00 2001
From: Lars Hofhansl <larsh@apache.org>
Date: Sat, 25 Aug 2012 05:30:23 +0000
Subject: [PATCH 131/154] HBASE-6663 NPE race in HConnection if zookeeper is reset (Gregory Chanan)

Reason: Supportability
Author: Gregory Chanan
Ref: CDH-5549
---
 .../hadoop/hbase/client/HConnectionManager.java    |   12 +-
 .../hadoop/hbase/client/TestHConnection.java       |  157 ++++++++++++++++++++
 2 files changed, 163 insertions(+), 6 deletions(-)
 create mode 100644 src/test/java/org/apache/hadoop/hbase/client/TestHConnection.java

diff --git a/src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java b/src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java
index 675fbeb..60add9b 100644
--- a/src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java
+++ b/src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java
@@ -770,13 +770,13 @@ public class HConnectionManager {
         // The root region is always enabled
         return online;
       }
-      getZooKeeperWatcher();
+      ZooKeeperWatcher zkw = getZooKeeperWatcher();
       String tableNameStr = Bytes.toString(tableName);
       try {
         if (online) {
-          return ZKTable.isEnabledTable(this.zooKeeper, tableNameStr);
+          return ZKTable.isEnabledTable(zkw, tableNameStr);
         }
-        return ZKTable.isDisabledTable(this.zooKeeper, tableNameStr);
+        return ZKTable.isDisabledTable(zkw, tableNameStr);
       } catch (KeeperException e) {
         throw new IOException("Enable/Disable failed", e);
       }
@@ -1762,11 +1762,11 @@ public class HConnectionManager {
 
     public int getCurrentNrHRS() throws IOException {
       try {
-        getZooKeeperWatcher();
+        ZooKeeperWatcher zkw = getZooKeeperWatcher();
         // We go to zk rather than to master to get count of regions to avoid
         // HTable having a Master dependency.  See HBase-2828
-        return ZKUtil.getNumberOfChildren(this.zooKeeper,
-            this.zooKeeper.rsZNode);
+        return ZKUtil.getNumberOfChildren(zkw,
+            zkw.rsZNode);
       } catch (KeeperException ke) {
         throw new IOException("Unexpected ZooKeeper exception", ke);
       }
diff --git a/src/test/java/org/apache/hadoop/hbase/client/TestHConnection.java b/src/test/java/org/apache/hadoop/hbase/client/TestHConnection.java
new file mode 100644
index 0000000..32e34a1
--- /dev/null
+++ b/src/test/java/org/apache/hadoop/hbase/client/TestHConnection.java
@@ -0,0 +1,157 @@
+/**
+ * Copyright The Apache Software Foundation
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.client;
+
+import java.io.IOException;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hbase.HBaseTestingUtility;
+import org.apache.hadoop.hbase.MultithreadedTestUtil;
+import org.apache.hadoop.hbase.MultithreadedTestUtil.RepeatingTestThread;
+import org.apache.hadoop.hbase.ZooKeeperConnectionException;
+import org.apache.hadoop.hbase.client.HConnectionManager.HConnectionImplementation;
+import org.apache.hadoop.hbase.util.Bytes;
+import org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher;
+import org.apache.zookeeper.KeeperException;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+/**
+ * Various tests of using HConnection
+ */
+public class TestHConnection {
+  final Log LOG = LogFactory.getLog(getClass());
+  private final static HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();
+  private final long MILLIS_TO_WAIT_FOR_RACE = 1000;
+
+  /**
+   * @throws java.lang.Exception
+   */
+  @BeforeClass
+  public static void setUpBeforeClass() throws Exception {
+    TEST_UTIL.startMiniCluster();
+  }
+
+  /**
+   * @throws java.lang.Exception
+   */
+  @AfterClass
+  public static void tearDownAfterClass() throws Exception {
+    TEST_UTIL.shutdownMiniCluster();
+  }
+
+  /**
+   * Thread that periodically aborts the connection
+   */
+  class AbortThread extends RepeatingTestThread {
+    final HConnection connection;
+
+    public AbortThread(MultithreadedTestUtil.TestContext ctx, HConnection connection) {
+      super(ctx);
+      this.connection = connection;
+    }
+
+    @Override
+    public void doAnAction() throws IOException {
+      connection.abort("test session expired", new KeeperException.SessionExpiredException());
+    }
+  };
+
+  class HConnectionRaceTester extends HConnectionImplementation {
+    public HConnectionRaceTester(Configuration configuration, boolean managed) throws ZooKeeperConnectionException {
+      super(configuration, managed);
+    }
+
+    /**
+     * Sleep after calling getZookeeperWatcher to attempt to trigger a race condition.
+     * If the HConnection retrieves the ZooKeeperWatcher but does not cache the value,
+     * by the time the new watcher is used, it could be null if the connection was aborted.
+     * This sleep will increase the time between when the watcher is retrieved and when it is used.
+     */
+    public ZooKeeperWatcher getZooKeeperWatcher() throws ZooKeeperConnectionException {
+      ZooKeeperWatcher zkw = super.getZooKeeperWatcher();
+      try {
+        Thread.sleep(10);
+      } catch (InterruptedException ie) {
+        // Ignore
+      }
+      return zkw;
+    }
+  }
+
+  /**
+   * Test that a connection that is aborted while calling isTableDisabled doesn't NPE
+   */
+  @Test
+  public void testTableDisabledRace() throws Exception {
+    final HConnection connection = new HConnectionRaceTester(TEST_UTIL.getConfiguration(), true);
+    MultithreadedTestUtil.TestContext ctx =
+      new MultithreadedTestUtil.TestContext(TEST_UTIL.getConfiguration());
+    RepeatingTestThread disabledChecker = new RepeatingTestThread(ctx) {
+      @Override
+      public void doAnAction() throws IOException {
+        try {
+          connection.isTableDisabled(Bytes.toBytes("tableToCheck"));
+        } catch (IOException ioe) {
+          // Ignore.  ZK can legitimately fail, only care if we get a NullPointerException
+        }
+      }
+    };
+    AbortThread abortThread = new AbortThread(ctx, connection);
+
+    ctx.addThread(disabledChecker);
+    ctx.addThread(abortThread);
+    ctx.startThreads();
+    ctx.waitFor(MILLIS_TO_WAIT_FOR_RACE);
+    ctx.stop();
+  }
+
+  /**
+   * Test that a connection that is aborted while calling getCurrentNrNRS doesn't NPE
+   */
+  @Test
+  public void testGetCurrentNrHRSRace() throws Exception {
+    final HConnection connection = new HConnectionRaceTester(TEST_UTIL.getConfiguration(), true);
+    MultithreadedTestUtil.TestContext ctx =
+      new MultithreadedTestUtil.TestContext(TEST_UTIL.getConfiguration());
+    RepeatingTestThread getCurrentNrHRSCaller = new RepeatingTestThread(ctx) {
+      @Override
+      public void doAnAction() throws IOException {
+        try {
+          connection.getCurrentNrHRS();
+        } catch (IOException ioe) {
+          // Ignore.  ZK can legitimately fail, only care if we get a NullPointerException
+        }
+      }
+    };
+    AbortThread abortThread = new AbortThread(ctx, connection);
+
+    ctx.addThread(getCurrentNrHRSCaller);
+    ctx.addThread(abortThread);
+    ctx.startThreads();
+    ctx.waitFor(MILLIS_TO_WAIT_FOR_RACE);
+    ctx.stop();
+  }
+
+}
-- 
1.7.0.4

