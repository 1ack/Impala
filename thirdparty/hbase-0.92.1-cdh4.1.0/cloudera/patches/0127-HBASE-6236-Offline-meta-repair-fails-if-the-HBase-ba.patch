From 661e3635eda8ab4c9555c87938a67692eb8cf41a Mon Sep 17 00:00:00 2001
From: Gregory Chanan <gchanan@cloudera.com>
Date: Tue, 28 Aug 2012 12:51:34 -0700
Subject: [PATCH 127/154] HBASE-6236 Offline meta repair fails if the HBase base mount point is on a different cluster/volume than its parent in a ViewFS or similar FS (Aditya)

Reason: Bug
Author: Aditya Kishore
Ref: CDH-5549
---
 .../java/org/apache/hadoop/hbase/HConstants.java   |    6 ++-
 .../org/apache/hadoop/hbase/util/HBaseFsck.java    |   41 ++++++++++++++-----
 .../hadoop/hbase/util/hbck/OfflineMetaRepair.java  |   30 ++++++++++----
 3 files changed, 57 insertions(+), 20 deletions(-)

diff --git a/src/main/java/org/apache/hadoop/hbase/HConstants.java b/src/main/java/org/apache/hadoop/hbase/HConstants.java
index 0746b84..5c82849 100644
--- a/src/main/java/org/apache/hadoop/hbase/HConstants.java
+++ b/src/main/java/org/apache/hadoop/hbase/HConstants.java
@@ -213,6 +213,9 @@ public final class HConstants {
   /** Like the previous, but for old logs that are about to be deleted */
   public static final String HREGION_OLDLOGDIR_NAME = ".oldlogs";
 
+  /** Used by HBCK to sideline backup data */
+  public static final String HBCK_SIDELINEDIR_NAME = ".hbck";
+
   /** Used to construct the name of the compaction directory during compaction */
   public static final String HREGION_COMPACTIONDIR_NAME = "compaction.dir";
 
@@ -549,7 +552,8 @@ public final class HConstants {
   public static final List<String> HBASE_NON_USER_TABLE_DIRS = new ArrayList<String>(
       Arrays.asList(new String[]{ HREGION_LOGDIR_NAME, HREGION_OLDLOGDIR_NAME,
           CORRUPT_DIR_NAME, Bytes.toString(META_TABLE_NAME),
-          Bytes.toString(ROOT_TABLE_NAME), SPLIT_LOGDIR_NAME }));
+          Bytes.toString(ROOT_TABLE_NAME), SPLIT_LOGDIR_NAME,
+          HBCK_SIDELINEDIR_NAME }));
 
   public static final Pattern CP_HTD_ATTR_KEY_PATTERN = Pattern.compile
       ("^coprocessor\\$([0-9]+)$", Pattern.CASE_INSENSITIVE);
diff --git a/src/main/java/org/apache/hadoop/hbase/util/HBaseFsck.java b/src/main/java/org/apache/hadoop/hbase/util/HBaseFsck.java
index 09e665c..3d91e60 100644
--- a/src/main/java/org/apache/hadoop/hbase/util/HBaseFsck.java
+++ b/src/main/java/org/apache/hadoop/hbase/util/HBaseFsck.java
@@ -184,6 +184,7 @@ public class HBaseFsck {
   private int maxMerge = DEFAULT_MAX_MERGE; // maximum number of overlapping regions to merge
   private int maxOverlapsToSideline = DEFAULT_OVERLAPS_TO_SIDELINE; // maximum number of overlapping regions to sideline
   private boolean sidelineBigOverlaps = false; // sideline overlaps with >maxMerge regions
+  private Path sidelineDir = null;
 
   private boolean rerun = false; // if we tried to fix something, rerun hbck
   private static boolean summary = false; // if we want to print less output
@@ -845,7 +846,7 @@ public class HBaseFsck {
 
     // we can rebuild, move old root and meta out of the way and start
     LOG.info("HDFS regioninfo's seems good.  Sidelining old .META.");
-    sidelineOldRootAndMeta();
+    Path backupDir = sidelineOldRootAndMeta();
 
     LOG.info("Creating new .META.");
     HRegion meta = createNewRootAndMeta();
@@ -861,6 +862,7 @@ public class HBaseFsck {
     meta.close();
     meta.getLog().closeAndDelete();
     LOG.info("Success! .META. table rebuilt.");
+    LOG.info("Old -ROOT- and .META. are moved into " + backupDir);
     return true;
   }
 
@@ -884,11 +886,13 @@ public class HBaseFsck {
   }
 
   private Path getSidelineDir() throws IOException {
-    Path hbaseDir = FSUtils.getRootDir(conf);
-    Path hbckDir = new Path(hbaseDir.getParent(), "hbck");
-    Path backupDir = new Path(hbckDir, hbaseDir.getName() + "-"
-        + startMillis);
-    return backupDir;
+    if (sidelineDir == null) {
+      Path hbaseDir = FSUtils.getRootDir(conf);
+      Path hbckDir = new Path(hbaseDir, HConstants.HBCK_SIDELINEDIR_NAME);
+      sidelineDir = new Path(hbckDir, hbaseDir.getName() + "-"
+          + startMillis);
+    }
+    return sidelineDir;
   }
 
   /**
@@ -1002,8 +1006,7 @@ public class HBaseFsck {
     // put current -ROOT- and .META. aside.
     Path hbaseDir = new Path(conf.get(HConstants.HBASE_DIR));
     FileSystem fs = hbaseDir.getFileSystem(conf);
-    Path backupDir = new Path(hbaseDir.getParent(), hbaseDir.getName() + "-"
-        + startMillis);
+    Path backupDir = getSidelineDir();
     fs.mkdirs(backupDir);
 
     sidelineTable(fs, HConstants.ROOT_TABLE_NAME, hbaseDir, backupDir);
@@ -3109,6 +3112,14 @@ public class HBaseFsck {
     timelag = seconds * 1000; // convert to milliseconds
   }
 
+  /**
+   *
+   * @param sidelineDir - HDFS path to sideline data
+   */
+  public void setSidelineDir(String sidelineDir) {
+    this.sidelineDir = new Path(sidelineDir);
+  }
+
   protected HFileCorruptionChecker createHFileCorruptionChecker(boolean sidelineCorruptHFiles) throws IOException {
     return new HFileCorruptionChecker(conf, executor, sidelineCorruptHFiles);
   }
@@ -3134,13 +3145,14 @@ public class HBaseFsck {
     System.err.println(" where [opts] are:");
     System.err.println("   -help Display help options (this)");
     System.err.println("   -details Display full report of all regions.");
-    System.err.println("   -timelag {timeInSeconds}  Process only regions that " +
+    System.err.println("   -timelag <timeInSeconds>  Process only regions that " +
                        " have not experienced any metadata updates in the last " +
-                       " {{timeInSeconds} seconds.");
-    System.err.println("   -sleepBeforeRerun {timeInSeconds} Sleep this many seconds" +
+                       " <timeInSeconds> seconds.");
+    System.err.println("   -sleepBeforeRerun <timeInSeconds> Sleep this many seconds" +
         " before checking if the fix worked if run with -fix");
     System.err.println("   -summary Print only summary of the tables and status.");
     System.err.println("   -metaonly Only check the state of ROOT and META tables.");
+    System.err.println("   -sidelineDir <hdfs://> HDFS path to backup existing meta and root.");
 
     System.err.println("");
     System.err.println("  Metadata Repair options: (expert features, use with caution!)");
@@ -3234,6 +3246,13 @@ public class HBaseFsck {
           return printUsageAndExit();
         }
         i++;
+      } else if (cmd.equals("-sidelineDir")) {
+        if (i == args.length - 1) {
+          System.err.println("HBaseFsck: -sidelineDir needs a value.");
+          printUsageAndExit();
+        }
+        i++;
+        setSidelineDir(args[i]);
       } else if (cmd.equals("-fix")) {
         System.err.println("This option is deprecated, please use " +
           "-fixAssignments instead.");
diff --git a/src/main/java/org/apache/hadoop/hbase/util/hbck/OfflineMetaRepair.java b/src/main/java/org/apache/hadoop/hbase/util/hbck/OfflineMetaRepair.java
index 468f19d..c586fd1 100644
--- a/src/main/java/org/apache/hadoop/hbase/util/hbck/OfflineMetaRepair.java
+++ b/src/main/java/org/apache/hadoop/hbase/util/hbck/OfflineMetaRepair.java
@@ -42,13 +42,15 @@ public class OfflineMetaRepair {
   private static final Log LOG = LogFactory.getLog(HBaseFsck.class.getName());
 
   protected static void printUsageAndExit() {
-    System.err.println("Usage: OfflineMetaRepair [opts] ");
-    System.err.println(" where [opts] are:");
-    System.err
-        .println("   -details          Display full report of all regions.");
-    System.err.println("   -base <hdfs://>   Base Hbase Data directory");
-    System.err.println("   -fix              Auto fix as many problems as possible");
-    System.err.println("   -fixHoles         Auto fix as region holes");
+    StringBuilder sb = new StringBuilder();
+    sb.append("Usage: OfflineMetaRepair [opts]\n").
+       append(" where [opts] are:\n").
+       append("   -details               Display full report of all regions.\n").
+       append("   -base <hdfs://>        Base Hbase Data directory.\n").
+       append("   -sidelineDir <hdfs://> HDFS path to backup existing meta and root.\n").
+       append("   -fix                   Auto fix as many problems as possible.\n").
+       append("   -fixHoles              Auto fix as region holes.");
+    System.err.println(sb.toString());
     Runtime.getRuntime().exit(-2);
   }
 
@@ -75,12 +77,24 @@ public class OfflineMetaRepair {
       if (cmd.equals("-details")) {
         fsck.setDisplayFullReport();
       } else if (cmd.equals("-base")) {
+        if (i == args.length - 1) {
+          System.err.println("OfflineMetaRepair: -base needs an HDFS path.");
+          printUsageAndExit();
+        }
         // update hbase root dir to user-specified base
         i++;
         String path = args[i];
         conf.set(HConstants.HBASE_DIR, path);
-        conf.set("fs.default.name", conf.get(HConstants.HBASE_DIR));
         conf.set("fs.defaultFS", conf.get(HConstants.HBASE_DIR));
+        conf.set("fs.default.name", conf.get(HConstants.HBASE_DIR));
+      } else if (cmd.equals("-sidelineDir")) {
+        if (i == args.length - 1) {
+          System.err.println("OfflineMetaRepair: -sidelineDir needs an HDFS path.");
+          printUsageAndExit();
+        }
+        // set the hbck sideline dir to user-specified one
+        i++;
+        fsck.setSidelineDir(args[i]);
       } else if (cmd.equals("-fixHoles")) {
         fixHoles = true;
       } else if (cmd.equals("-fix")) {
-- 
1.7.0.4

