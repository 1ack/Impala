From 921810c92d53bfb5c9af596ee1cbce800b94de19 Mon Sep 17 00:00:00 2001
From: Matteo Bertozzi <matteo.bertozzi@cloudera.com>
Date: Mon, 7 Jan 2013 20:21:12 -0800
Subject: [PATCH 134/202] HBASE-7214 CleanerChore logs too much, so much so it obscures all else that is going on

Reason: Snapshots
Author: Jesse Yates
Ref: CDH-9551
---
 .../hadoop/hbase/master/cleaner/CleanerChore.java  |   13 ++++++++++---
 .../master/cleaner/TimeToLiveHFileCleaner.java     |    5 ++++-
 2 files changed, 14 insertions(+), 4 deletions(-)

diff --git a/src/main/java/org/apache/hadoop/hbase/master/cleaner/CleanerChore.java b/src/main/java/org/apache/hadoop/hbase/master/cleaner/CleanerChore.java
index 805dcc4..367d499 100644
--- a/src/main/java/org/apache/hadoop/hbase/master/cleaner/CleanerChore.java
+++ b/src/main/java/org/apache/hadoop/hbase/master/cleaner/CleanerChore.java
@@ -146,7 +146,10 @@ public abstract class CleanerChore<T extends FileCleanerDelegate> extends Chore
    * @throws IOException if there is an unexpected filesystem error
    */
   public boolean checkAndDeleteDirectory(Path toCheck) throws IOException {
-    LOG.debug("Checking directory: " + toCheck);
+    if (LOG.isTraceEnabled()) {
+      LOG.trace("Checking directory: " + toCheck);
+    }
+
     FileStatus[] children = FSUtils.listStatus(fs, toCheck, null);
     // if the directory doesn't exist, then we are done
     if (children == null) {
@@ -221,12 +224,16 @@ public abstract class CleanerChore<T extends FileCleanerDelegate> extends Chore
 
       if (!cleaner.isFileDeletable(filePath)) {
         // this file is not deletable, then we are done
-        LOG.debug(filePath + " is not deletable according to:" + cleaner);
+        if (LOG.isTraceEnabled()) {
+          LOG.trace(filePath + " is not deletable according to:" + cleaner);
+        }
         return false;
       }
     }
     // delete this file if it passes all the cleaners
-    LOG.debug("Removing:" + filePath + " from archive");
+    if (LOG.isTraceEnabled()) {
+      LOG.trace("Removing:" + filePath + " from archive");
+    }
     boolean success = this.fs.delete(filePath, false);
     if (!success) {
       LOG.warn("Attempted to delete:" + filePath
diff --git a/src/main/java/org/apache/hadoop/hbase/master/cleaner/TimeToLiveHFileCleaner.java b/src/main/java/org/apache/hadoop/hbase/master/cleaner/TimeToLiveHFileCleaner.java
index 40877b7..82231af 100644
--- a/src/main/java/org/apache/hadoop/hbase/master/cleaner/TimeToLiveHFileCleaner.java
+++ b/src/main/java/org/apache/hadoop/hbase/master/cleaner/TimeToLiveHFileCleaner.java
@@ -65,7 +65,10 @@ public class TimeToLiveHFileCleaner extends BaseHFileCleanerDelegate {
       return false;
     }
     long life = currentTime - time;
-    LOG.debug("Life:" + life + ", ttl:" + ttl + ", current:" + currentTime + ", from: " + time);
+    if (LOG.isTraceEnabled()) {
+      LOG.trace("HFile life:" + life + ", ttl:" + ttl + ", current:" + currentTime + ", from: "
+          + time);
+    }
     if (life < 0) {
       LOG.warn("Found a log (" + filePath + ") newer than current time (" + currentTime + " < "
           + time + "), probably a clock skew");
-- 
1.7.0.4

