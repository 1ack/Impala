From b2a3107050c46cd54fcfce2d674089130f8eecbe Mon Sep 17 00:00:00 2001
From: Matteo Bertozzi <matteo.bertozzi@cloudera.com>
Date: Tue, 15 Jan 2013 12:47:10 -0800
Subject: [PATCH 153/196] HBASE-7547 Fix findbugs warnings in snapshot classes

Reason: Snapshots
Author: Ted Yu
Ref: CDH-9551
---
 .../master/snapshot/MasterSnapshotVerifier.java    |    2 +-
 .../hbase/master/snapshot/SnapshotFileCache.java   |    2 +-
 .../hadoop/hbase/snapshot/ExportSnapshot.java      |    2 +-
 .../hbase/snapshot/ReferenceServerWALsTask.java    |   11 +++++++----
 .../hbase/snapshot/RestoreSnapshotHelper.java      |   12 +++---------
 .../apache/hadoop/hbase/snapshot/SnapshotInfo.java |   14 +++++++-------
 .../hadoop/hbase/snapshot/TakeSnapshotUtils.java   |    2 +-
 7 files changed, 21 insertions(+), 24 deletions(-)

diff --git a/src/main/java/org/apache/hadoop/hbase/master/snapshot/MasterSnapshotVerifier.java b/src/main/java/org/apache/hadoop/hbase/master/snapshot/MasterSnapshotVerifier.java
index 53ad856..707e2c5 100644
--- a/src/main/java/org/apache/hadoop/hbase/master/snapshot/MasterSnapshotVerifier.java
+++ b/src/main/java/org/apache/hadoop/hbase/master/snapshot/MasterSnapshotVerifier.java
@@ -220,7 +220,7 @@ public final class MasterSnapshotVerifier {
         String fileName = hfile.getPath().getName();
         Path file = new Path(realCfDir, fileName);
         Path archived = new Path(archivedCfDir, fileName);
-        if (!fs.exists(file) && !fs.equals(archived)) {
+        if (!fs.exists(file) && !file.equals(archived)) {
           throw new CorruptedSnapshotException("Can't find hfile: " + hfile.getPath()
               + " in the real (" + archivedCfDir + ") or archive (" + archivedCfDir
               + ") directory for the primary table.", snapshot);
diff --git a/src/main/java/org/apache/hadoop/hbase/master/snapshot/SnapshotFileCache.java b/src/main/java/org/apache/hadoop/hbase/master/snapshot/SnapshotFileCache.java
index c47ab0b..0c9217b 100644
--- a/src/main/java/org/apache/hadoop/hbase/master/snapshot/SnapshotFileCache.java
+++ b/src/main/java/org/apache/hadoop/hbase/master/snapshot/SnapshotFileCache.java
@@ -275,7 +275,7 @@ public class SnapshotFileCache implements Stoppable {
   /**
    * Information about a snapshot directory
    */
-  public class SnapshotDirectoryInfo {
+  private static class SnapshotDirectoryInfo {
     long lastModified;
     Collection<String> files;
 
diff --git a/src/main/java/org/apache/hadoop/hbase/snapshot/ExportSnapshot.java b/src/main/java/org/apache/hadoop/hbase/snapshot/ExportSnapshot.java
index e1a844c..a7c50d2 100644
--- a/src/main/java/org/apache/hadoop/hbase/snapshot/ExportSnapshot.java
+++ b/src/main/java/org/apache/hadoop/hbase/snapshot/ExportSnapshot.java
@@ -665,7 +665,7 @@ public final class ExportSnapshot extends Configured implements Tool {
 
   // ExportSnapshot
   private void printUsageAndExit() {
-    System.err.printf("Usage: bin/hbase %s [options]\n", getClass().getName());
+    System.err.printf("Usage: bin/hbase %s [options]%n", getClass().getName());
     System.err.println(" where [options] are:");
     System.err.println("  -h|-help                Show this help and exit.");
     System.err.println("  -snapshot NAME          Snapshot to restore.");
diff --git a/src/main/java/org/apache/hadoop/hbase/snapshot/ReferenceServerWALsTask.java b/src/main/java/org/apache/hadoop/hbase/snapshot/ReferenceServerWALsTask.java
index b0bdbfa..9c987ab 100644
--- a/src/main/java/org/apache/hadoop/hbase/snapshot/ReferenceServerWALsTask.java
+++ b/src/main/java/org/apache/hadoop/hbase/snapshot/ReferenceServerWALsTask.java
@@ -76,11 +76,14 @@ public class ReferenceServerWALsTask extends SnapshotTask {
     // Iterate through each of the log files and add a reference to it.
     // assumes that all the files under the server's logs directory is a log
     FileStatus[] serverLogs = FSUtils.listStatus(fs, logDir, null);
-    if (serverLogs == null) LOG.info("No logs for server directory:" + logDir
-        + ", done referencing files.");
+    if (serverLogs == null) {
+      LOG.debug("No logs for server directory:" + logDir + ", done referencing files.");
+      return null;
+    }
 
-    if (LOG.isDebugEnabled()) LOG.debug("Adding references for WAL files:"
-        + Arrays.toString(serverLogs));
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Adding references for WAL files:" + Arrays.toString(serverLogs));
+    }
 
     for (FileStatus file : serverLogs) {
       this.rethrowException();
diff --git a/src/main/java/org/apache/hadoop/hbase/snapshot/RestoreSnapshotHelper.java b/src/main/java/org/apache/hadoop/hbase/snapshot/RestoreSnapshotHelper.java
index be3d8bd..e7bebe9 100644
--- a/src/main/java/org/apache/hadoop/hbase/snapshot/RestoreSnapshotHelper.java
+++ b/src/main/java/org/apache/hadoop/hbase/snapshot/RestoreSnapshotHelper.java
@@ -41,14 +41,12 @@ import org.apache.hadoop.hbase.HColumnDescriptor;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.HTableDescriptor;
 import org.apache.hadoop.hbase.backup.HFileArchiver;
-import org.apache.hadoop.hbase.catalog.MetaEditor;
 import org.apache.hadoop.hbase.errorhandling.ForeignExceptionDispatcher;
 import org.apache.hadoop.hbase.io.HFileLink;
 import org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.SnapshotDescription;
 import org.apache.hadoop.hbase.regionserver.HRegion;
 import org.apache.hadoop.hbase.regionserver.StoreFile;
 import org.apache.hadoop.hbase.util.Bytes;
-import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;
 import org.apache.hadoop.hbase.util.FSUtils;
 import org.apache.hadoop.hbase.util.FSVisitor;
 import org.apache.hadoop.hbase.util.ModifyRegionUtils;
@@ -132,8 +130,6 @@ public class RestoreSnapshotHelper {
    * @return the set of regions touched by the restore operation
    */
   public RestoreMetaChanges restoreHdfsRegions() throws IOException {
-    long startTime = EnvironmentEdgeManager.currentTimeMillis();
-
     LOG.debug("starting restore");
     Set<String> snapshotRegionNames = SnapshotReferenceUtil.getSnapshotRegionNames(fs, snapshotDir);
     if (snapshotRegionNames == null) {
@@ -152,7 +148,7 @@ public class RestoreSnapshotHelper {
         String regionName = regionInfo.getEncodedName();
         if (snapshotRegionNames.contains(regionName)) {
           LOG.info("region to restore: " + regionName);
-          snapshotRegionNames.remove(regionInfo);
+          snapshotRegionNames.remove(regionName);
           metaChanges.addRegionToRestore(regionInfo);
         } else {
           LOG.info("region to remove: " + regionName);
@@ -196,7 +192,7 @@ public class RestoreSnapshotHelper {
   /**
    * Describe the set of operations needed to update META after restore.
    */
-  public class RestoreMetaChanges {
+  public static class RestoreMetaChanges {
     private List<HRegionInfo> regionsToRestore = null;
     private List<HRegionInfo> regionsToRemove = null;
     private List<HRegionInfo> regionsToAdd = null;
@@ -325,13 +321,11 @@ public class RestoreSnapshotHelper {
 
     // Add families not present in the table
     for (Map.Entry<String, List<String>> familyEntry: snapshotFiles.entrySet()) {
-      byte[] family = Bytes.toBytes(familyEntry.getKey());
       Path familyDir = new Path(regionDir, familyEntry.getKey());
       if (!fs.mkdirs(familyDir)) {
         throw new IOException("Unable to create familyDir=" + familyDir);
       }
 
-      List<String> hfilesToAdd = new LinkedList<String>();
       for (String hfileName: familyEntry.getValue()) {
         LOG.trace("Adding HFileLink " + hfileName + " to table=" + tableName);
         restoreStoreFile(familyDir, regionInfo, hfileName);
@@ -384,7 +378,7 @@ public class RestoreSnapshotHelper {
     }
 
     // create the regions on disk
-    List<HRegionInfo> clonedRegions = ModifyRegionUtils.createRegions(conf, tableDir.getParent(),
+    ModifyRegionUtils.createRegions(conf, tableDir.getParent(),
       tableDesc, clonedRegionsInfo, new ModifyRegionUtils.RegionFillTask() {
         public void fillRegion(final HRegion region) throws IOException {
           cloneRegion(region, snapshotRegions.get(region.getRegionInfo().getEncodedName()));
diff --git a/src/main/java/org/apache/hadoop/hbase/snapshot/SnapshotInfo.java b/src/main/java/org/apache/hadoop/hbase/snapshot/SnapshotInfo.java
index 571a9be..d0256e2 100644
--- a/src/main/java/org/apache/hadoop/hbase/snapshot/SnapshotInfo.java
+++ b/src/main/java/org/apache/hadoop/hbase/snapshot/SnapshotInfo.java
@@ -210,7 +210,7 @@ public final class SnapshotInfo extends Configured implements Tool {
           }
 
           if (showFiles) {
-            System.out.printf("%8s %s/%s/%s/%s %s\n",
+            System.out.printf("%8s %s/%s/%s/%s %s%n",
               (size < 0 ? "-" : StringUtils.humanReadableInt(size)),
               table, region, family, hfile,
               (inArchive ? "(archive)" : (size < 0) ? "(NOT FOUND)" : ""));
@@ -225,7 +225,7 @@ public final class SnapshotInfo extends Configured implements Tool {
           logsCount.addAndGet(1);
 
           if (showFiles) {
-            System.out.printf("%8s recovered.edits %s on region %s\n",
+            System.out.printf("%8s recovered.edits %s on region %s%n",
               StringUtils.humanReadableInt(size), logfile, region);
           }
         }
@@ -243,7 +243,7 @@ public final class SnapshotInfo extends Configured implements Tool {
           }
 
           if (showFiles) {
-            System.out.printf("%8s log %s on server %s %s\n",
+            System.out.printf("%8s log %s on server %s %s%n",
               (size < 0 ? "-" : StringUtils.humanReadableInt(size)),
               logfile, server,
               (size < 0 ? "(NOT FOUND)" : ""));
@@ -255,24 +255,24 @@ public final class SnapshotInfo extends Configured implements Tool {
     System.out.println();
     if (hfilesMissing.get() > 0 || logsMissing.get() > 0) {
       System.out.println("**************************************************************");
-      System.out.printf("BAD SNAPSHOT: %d hfile(s) and %d log(s) missing.\n",
+      System.out.printf("BAD SNAPSHOT: %d hfile(s) and %d log(s) missing.%n",
         hfilesMissing.get(), logsMissing.get());
       System.out.println("**************************************************************");
     }
 
-    System.out.printf("%d HFiles (%d in archive), total size %s (%.2f%% %s shared with the source table)\n",
+    System.out.printf("%d HFiles (%d in archive), total size %s (%.2f%% %s shared with the source table)%n",
       hfilesCount.get() + hfileArchiveCount.get(), hfileArchiveCount.get(),
       StringUtils.humanReadableInt(hfileSize.get() + hfileArchiveSize.get()),
       ((float)hfileSize.get() / (hfileSize.get() + hfileArchiveSize.get())) * 100,
       StringUtils.humanReadableInt(hfileSize.get())
     );
-    System.out.printf("%d Logs, total size %s\n",
+    System.out.printf("%d Logs, total size %s%n",
       logsCount.get(), StringUtils.humanReadableInt(logSize.get()));
     System.out.println();
   }
 
   private void printUsageAndExit() {
-    System.err.printf("Usage: bin/hbase %s [options]\n", getClass().getName());
+    System.err.printf("Usage: bin/hbase %s [options]%n", getClass().getName());
     System.err.println(" where [options] are:");
     System.err.println("  -h|-help                Show this help and exit.");
     System.err.println("  -snapshot NAME          Snapshot to examine.");
diff --git a/src/main/java/org/apache/hadoop/hbase/snapshot/TakeSnapshotUtils.java b/src/main/java/org/apache/hadoop/hbase/snapshot/TakeSnapshotUtils.java
index eb64eaa..3b49268 100644
--- a/src/main/java/org/apache/hadoop/hbase/snapshot/TakeSnapshotUtils.java
+++ b/src/main/java/org/apache/hadoop/hbase/snapshot/TakeSnapshotUtils.java
@@ -139,7 +139,7 @@ public class TakeSnapshotUtils {
     Multimap<String, String> realLogs = getMapOfServersAndLogs(fs, logsDir, serverNames);
     if (realLogs != null) {
       assertNotNull(snapshot, "No server logs added to snapshot", snapshotLogs);
-    } else if (realLogs == null) {
+    } else {
       assertNull(snapshot, "Snapshotted server logs that don't exist", snapshotLogs);
     }
 
-- 
1.7.0.4

