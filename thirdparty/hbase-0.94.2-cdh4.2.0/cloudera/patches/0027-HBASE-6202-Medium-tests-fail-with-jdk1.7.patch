From 6529a822e051050f0f917e50c3844575d15dd12d Mon Sep 17 00:00:00 2001
From: Jimmy Xiang <jxiang@cloudera.com>
Date: Mon, 5 Nov 2012 21:00:13 -0800
Subject: [PATCH 027/196] HBASE-6202 Medium tests fail with jdk1.7

Reason: Bug
Author: Jimmy Xiang
Ref: CDH-8905
---
 .../hadoop/hbase/coprocessor/TestClassLoading.java |   12 ++-
 .../hbase/coprocessor/TestMasterObserver.java      |  123 ++++++++++----------
 .../hadoop/hbase/master/TestSplitLogManager.java   |   11 +-
 .../hbase/util/TestEnvironmentEdgeManager.java     |    1 +
 .../hadoop/hbase/util/TestFSTableDescriptors.java  |    2 +-
 5 files changed, 81 insertions(+), 68 deletions(-)

diff --git a/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java b/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java
index bea1fe1..bd56b4f 100644
--- a/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java
+++ b/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java
@@ -230,7 +230,9 @@ public class TestClassLoading {
       "|" + Coprocessor.PRIORITY_USER + "|k1=v1,k2=v2,k3=v3");
     HBaseAdmin admin = TEST_UTIL.getHBaseAdmin();
     if (admin.tableExists(tableName)) {
-      admin.disableTable(tableName);
+      if (admin.isTableEnabled(tableName)) {
+        admin.disableTable(tableName);
+      }
       admin.deleteTable(tableName);
     }
     admin.createTable(htd);
@@ -365,7 +367,9 @@ public class TestClassLoading {
 
     HBaseAdmin admin = TEST_UTIL.getHBaseAdmin();
     if (admin.tableExists(tableName)) {
-      admin.disableTable(tableName);
+      if (admin.isTableEnabled(tableName)) {
+        admin.disableTable(tableName);
+      }
       admin.deleteTable(tableName);
     }
     admin.createTable(htd);
@@ -468,7 +472,9 @@ public class TestClassLoading {
       "|" + Coprocessor.PRIORITY_USER + "|k1=v1,k2=v2,k3=v3");
     HBaseAdmin admin = TEST_UTIL.getHBaseAdmin();
     if (admin.tableExists(tableName)) {
-      admin.disableTable(tableName);
+      if (admin.isTableEnabled(tableName)) {
+        admin.disableTable(tableName);
+      }
       admin.deleteTable(tableName);
     }
     admin.createTable(htd);
diff --git a/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterObserver.java b/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterObserver.java
index 8910030..468ad89 100644
--- a/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterObserver.java
+++ b/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterObserver.java
@@ -31,8 +31,6 @@ import java.util.List;
 import java.util.Map;
 import java.util.NavigableMap;
 
-import junit.framework.Assert;
-
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
@@ -641,68 +639,73 @@ public class TestMasterObserver {
     cp.resetStates();
 
     HTable table = UTIL.createTable(TEST_TABLE, TEST_FAMILY);
-    int countOfRegions = UTIL.createMultiRegions(table, TEST_FAMILY);
-    UTIL.waitUntilAllRegionsAssigned(countOfRegions);
-    
-    NavigableMap<HRegionInfo, ServerName> regions = table.getRegionLocations();
-    Map.Entry<HRegionInfo, ServerName> firstGoodPair = null;
-    for (Map.Entry<HRegionInfo, ServerName> e: regions.entrySet()) {
-      if (e.getValue() != null) {
-        firstGoodPair = e;
-        break;
+
+    try {
+      int countOfRegions = UTIL.createMultiRegions(table, TEST_FAMILY);
+      UTIL.waitUntilAllRegionsAssigned(countOfRegions);
+      
+      NavigableMap<HRegionInfo, ServerName> regions = table.getRegionLocations();
+      Map.Entry<HRegionInfo, ServerName> firstGoodPair = null;
+      for (Map.Entry<HRegionInfo, ServerName> e: regions.entrySet()) {
+        if (e.getValue() != null) {
+          firstGoodPair = e;
+          break;
+        }
       }
-    }
-    assertNotNull("Found a non-null entry", firstGoodPair);
-    LOG.info("Found " + firstGoodPair.toString());
-    // Try to force a move
-    Collection<ServerName> servers = master.getClusterStatus().getServers();
-    String destName = null;
-    String firstRegionHostnamePortStr = firstGoodPair.getValue().toString();
-    LOG.info("firstRegionHostnamePortStr=" + firstRegionHostnamePortStr);
-    boolean found = false;
-    // Find server that is NOT carrying the first region
-    for (ServerName info : servers) {
-      LOG.info("ServerName=" + info);
-      if (!firstRegionHostnamePortStr.equals(info.getHostAndPort())) {
-        destName = info.toString();
-        found = true;
-        break;
+      assertNotNull("Found a non-null entry", firstGoodPair);
+      LOG.info("Found " + firstGoodPair.toString());
+      // Try to force a move
+      Collection<ServerName> servers = master.getClusterStatus().getServers();
+      String destName = null;
+      String firstRegionHostnamePortStr = firstGoodPair.getValue().toString();
+      LOG.info("firstRegionHostnamePortStr=" + firstRegionHostnamePortStr);
+      boolean found = false;
+      // Find server that is NOT carrying the first region
+      for (ServerName info : servers) {
+        LOG.info("ServerName=" + info);
+        if (!firstRegionHostnamePortStr.equals(info.getHostAndPort())) {
+          destName = info.toString();
+          found = true;
+          break;
+        }
       }
-    }
-    assertTrue("Found server", found);
-    LOG.info("Found " + destName);
-    master.move(firstGoodPair.getKey().getEncodedNameAsBytes(),
-      Bytes.toBytes(destName));
-    assertTrue("Coprocessor should have been called on region move",
-      cp.wasMoveCalled());
-
-    // make sure balancer is on
-    master.balanceSwitch(true);
-    assertTrue("Coprocessor should have been called on balance switch",
-        cp.wasBalanceSwitchCalled());
-
-    // force region rebalancing
-    master.balanceSwitch(false);
-    // move half the open regions from RS 0 to RS 1
-    HRegionServer rs = cluster.getRegionServer(0);
-    byte[] destRS = Bytes.toBytes(cluster.getRegionServer(1).getServerName().toString());
-    //Make sure no regions are in transition now
-    waitForRITtoBeZero(master);
-    List<HRegionInfo> openRegions = rs.getOnlineRegions();
-    int moveCnt = openRegions.size()/2;
-    for (int i=0; i<moveCnt; i++) {
-      HRegionInfo info = openRegions.get(i);
-      if (!info.isMetaTable()) {
-        master.move(openRegions.get(i).getEncodedNameAsBytes(), destRS);
+      assertTrue("Found server", found);
+      LOG.info("Found " + destName);
+      master.move(firstGoodPair.getKey().getEncodedNameAsBytes(),
+        Bytes.toBytes(destName));
+      assertTrue("Coprocessor should have been called on region move",
+        cp.wasMoveCalled());
+  
+      // make sure balancer is on
+      master.balanceSwitch(true);
+      assertTrue("Coprocessor should have been called on balance switch",
+          cp.wasBalanceSwitchCalled());
+  
+      // force region rebalancing
+      master.balanceSwitch(false);
+      // move half the open regions from RS 0 to RS 1
+      HRegionServer rs = cluster.getRegionServer(0);
+      byte[] destRS = Bytes.toBytes(cluster.getRegionServer(1).getServerName().toString());
+      //Make sure no regions are in transition now
+      waitForRITtoBeZero(master);
+      List<HRegionInfo> openRegions = rs.getOnlineRegions();
+      int moveCnt = openRegions.size()/2;
+      for (int i=0; i<moveCnt; i++) {
+        HRegionInfo info = openRegions.get(i);
+        if (!info.isMetaTable()) {
+          master.move(openRegions.get(i).getEncodedNameAsBytes(), destRS);
+        }
       }
+      //Make sure no regions are in transition now
+      waitForRITtoBeZero(master);
+      // now trigger a balance
+      master.balanceSwitch(true);
+      boolean balanceRun = master.balance();
+      assertTrue("Coprocessor should be called on region rebalancing",
+          cp.wasBalanceCalled());
+    } finally {
+      UTIL.deleteTable(TEST_TABLE);
     }
-    //Make sure no regions are in transition now
-    waitForRITtoBeZero(master);
-    // now trigger a balance
-    master.balanceSwitch(true);
-    boolean balanceRun = master.balance();
-    assertTrue("Coprocessor should be called on region rebalancing",
-        cp.wasBalanceCalled());
   }
 
   private void waitForRITtoBeZero(HMaster master) throws IOException {
diff --git a/src/test/java/org/apache/hadoop/hbase/master/TestSplitLogManager.java b/src/test/java/org/apache/hadoop/hbase/master/TestSplitLogManager.java
index 6602134..b8712fa 100644
--- a/src/test/java/org/apache/hadoop/hbase/master/TestSplitLogManager.java
+++ b/src/test/java/org/apache/hadoop/hbase/master/TestSplitLogManager.java
@@ -23,7 +23,6 @@ import static org.apache.hadoop.hbase.zookeeper.ZKSplitLog.Counters.*;
 
 import java.io.IOException;
 import java.util.Arrays;
-import java.util.List;
 import java.util.UUID;
 import java.util.concurrent.atomic.AtomicLong;
 
@@ -66,8 +65,7 @@ public class TestSplitLogManager {
   private SplitLogManager slm;
   private Configuration conf;
 
-  private final static HBaseTestingUtility TEST_UTIL =
-    new HBaseTestingUtility();
+  private static HBaseTestingUtility TEST_UTIL;
 
   static Stoppable stopper = new Stoppable() {
     @Override
@@ -92,6 +90,7 @@ public class TestSplitLogManager {
 
   @Before
   public void setup() throws Exception {
+    TEST_UTIL = new HBaseTestingUtility();
     TEST_UTIL.startMiniZKCluster();
     conf = TEST_UTIL.getConfiguration();
     zkw = new ZooKeeperWatcher(conf, "split-log-manager-tests", null);
@@ -199,7 +198,6 @@ public class TestSplitLogManager {
     conf.setInt("hbase.splitlog.manager.timeoutmonitor.period", 100);
     to = to + 2 * 100;
 
-
     slm = new SplitLogManager(zkw, conf, stopper, "dummy-master", null);
     slm.finishInitialization();
     waitForCounter(tot_mgr_orphan_task_acquired, 0, 1, 100);
@@ -459,7 +457,12 @@ public class TestSplitLogManager {
   @Test(timeout=45000)
   public void testVanishingTaskZNode() throws Exception {
     LOG.info("testVanishingTaskZNode");
+
+    int to = 1000;
+    conf.setInt("hbase.splitlog.manager.timeout", to);
+    conf.setInt("hbase.splitlog.manager.timeoutmonitor.period", 100);
     conf.setInt("hbase.splitlog.manager.unassigned.timeout", 0);
+
     slm = new SplitLogManager(zkw, conf, stopper, "dummy-master", null);
     slm.finishInitialization();
     FileSystem fs = TEST_UTIL.getTestFileSystem();
diff --git a/src/test/java/org/apache/hadoop/hbase/util/TestEnvironmentEdgeManager.java b/src/test/java/org/apache/hadoop/hbase/util/TestEnvironmentEdgeManager.java
index 59b2c2b..1c95e83 100644
--- a/src/test/java/org/apache/hadoop/hbase/util/TestEnvironmentEdgeManager.java
+++ b/src/test/java/org/apache/hadoop/hbase/util/TestEnvironmentEdgeManager.java
@@ -37,6 +37,7 @@ public class TestEnvironmentEdgeManager {
 
   @Test
   public void testManageSingleton() {
+    EnvironmentEdgeManager.reset();
     EnvironmentEdge edge = EnvironmentEdgeManager.getDelegate();
     assertNotNull(edge);
     assertTrue(edge instanceof DefaultEnvironmentEdge);
diff --git a/src/test/java/org/apache/hadoop/hbase/util/TestFSTableDescriptors.java b/src/test/java/org/apache/hadoop/hbase/util/TestFSTableDescriptors.java
index 0db4d42..028d288 100644
--- a/src/test/java/org/apache/hadoop/hbase/util/TestFSTableDescriptors.java
+++ b/src/test/java/org/apache/hadoop/hbase/util/TestFSTableDescriptors.java
@@ -54,7 +54,7 @@ public class TestFSTableDescriptors {
 
   @Test
   public void testCreateAndUpdate() throws IOException {
-    Path testdir = UTIL.getDataTestDir();
+    Path testdir = UTIL.getDataTestDir("testCreateAndUpdate");
     HTableDescriptor htd = new HTableDescriptor("testCreate");
     FileSystem fs = FileSystem.get(UTIL.getConfiguration());
     assertTrue(FSTableDescriptors.createTableDescriptor(fs, testdir, htd));
-- 
1.7.0.4

