From 8ba412311c4031e028ed6ac03abe52413a18c98a Mon Sep 17 00:00:00 2001
From: Matteo Bertozzi <matteo.bertozzi@cloudera.com>
Date: Tue, 15 Jan 2013 12:25:04 -0800
Subject: [PATCH 152/202] HBASE-7360 snapshot 0.94 backport, add takeSnasphotAsync

Reason: Snapshots
Author: Jonathan Hsieh
Ref: CDH-9551
---
 .../org/apache/hadoop/hbase/client/HBaseAdmin.java |   22 ++++++++++++++++++-
 1 files changed, 20 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java b/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
index 25b96e5..17d4fa1 100644
--- a/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
+++ b/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
@@ -73,6 +73,8 @@ import org.apache.hadoop.hbase.util.Pair;
 import org.apache.hadoop.ipc.RemoteException;
 import org.apache.hadoop.util.StringUtils;
 
+import com.google.protobuf.ServiceException;
+
 /**
  * Provides an interface to manage HBase database table metadata + general
  * administrative functions.  Use HBaseAdmin to create, drop, list, enable and
@@ -2027,12 +2029,11 @@ public class HBaseAdmin implements Abortable, Closeable {
       IllegalArgumentException {
     // make sure the snapshot is valid
     SnapshotDescriptionUtils.assertSnapshotRequestIsValid(snapshot);
-
     HSnapshotDescription snapshotWritable = new HSnapshotDescription(snapshot);
 
     try {
       // actually take the snapshot
-      long max = getMaster().snapshot(snapshotWritable);
+      long max = takeSnapshotAsync(snapshot);
       long start = EnvironmentEdgeManager.currentTimeMillis();
       long maxPauseTime = max / this.numRetries;
       boolean done = false;
@@ -2066,6 +2067,23 @@ public class HBaseAdmin implements Abortable, Closeable {
   }
 
   /**
+   * Take a snapshot and wait for the server to complete that snapshot (asynchronous)
+   * <p>
+   * Only a single snapshot should be taken at a time, or results may be undefined.
+   * @param snapshot snapshot to take
+   * @return the max time in millis to wait for the snapshot
+   * @throws IOException if the snapshot did not succeed or we lose contact with the master.
+   * @throws SnapshotCreationException if snapshot creation failed
+   * @throws IllegalArgumentException if the snapshot request is formatted incorrectly
+   */
+  public long takeSnapshotAsync(SnapshotDescription snapshot) throws IOException,
+      SnapshotCreationException {
+    SnapshotDescriptionUtils.assertSnapshotRequestIsValid(snapshot);
+    HSnapshotDescription snapshotWritable = new HSnapshotDescription(snapshot);
+    return getMaster().snapshot(snapshotWritable);
+  }
+
+  /**
    * Check the current state of the passed snapshot.
    * <p>
    * There are three possible states:
-- 
1.7.0.4

