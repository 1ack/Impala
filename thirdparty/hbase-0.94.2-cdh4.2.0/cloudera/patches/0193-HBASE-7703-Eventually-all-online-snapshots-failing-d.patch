From 1b6b95899551aa10a758da4b3a908074dda22048 Mon Sep 17 00:00:00 2001
From: Matteo Bertozzi <matteo.bertozzi@cloudera.com>
Date: Wed, 30 Jan 2013 12:58:29 -0800
Subject: [PATCH 193/202] HBASE-7703 Eventually all online snapshots failing due to Timeout at same regionserver.

Reason: Snapshots
Author: Jonathan Hsieh
Ref: CDH-10223
---
 .../snapshot/RegionServerSnapshotManager.java      |    6 +++++-
 1 files changed, 5 insertions(+), 1 deletions(-)

diff --git a/src/main/java/org/apache/hadoop/hbase/regionserver/snapshot/RegionServerSnapshotManager.java b/src/main/java/org/apache/hadoop/hbase/regionserver/snapshot/RegionServerSnapshotManager.java
index 3e5238e..1282585 100644
--- a/src/main/java/org/apache/hadoop/hbase/regionserver/snapshot/RegionServerSnapshotManager.java
+++ b/src/main/java/org/apache/hadoop/hbase/regionserver/snapshot/RegionServerSnapshotManager.java
@@ -347,7 +347,11 @@ public class RegionServerSnapshotManager {
       Collection<Future<Void>> tasks = futures;
       LOG.debug("cancelling " + tasks.size() + " tasks for snapshot " + name);
       for (Future<Void> f: tasks) {
-        f.cancel(true);
+        // TODO Ideally we'd interrupt hbase threads when we cancel.  However it seems that there
+        // are places in the HBase code where row/region locks are taken and not released in a
+        // finally block.  Thus we cancel without interrupting.  Cancellations will be slower to
+        // complete but we won't suffer from unreleased locks due to poor code discipline.
+        f.cancel(false);
       }
 
       // evict remaining tasks and futures from taskPool.
-- 
1.7.0.4

