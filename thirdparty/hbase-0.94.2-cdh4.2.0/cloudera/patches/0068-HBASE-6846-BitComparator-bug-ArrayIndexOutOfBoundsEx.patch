From c24f5b8255bce9a13fb3c24ad9c5c3af2b860d1f Mon Sep 17 00:00:00 2001
From: Himanshu <himanshu@cloudera.com>
Date: Mon, 17 Dec 2012 15:07:59 -0700
Subject: [PATCH 068/202] HBASE-6846  BitComparator bug - ArrayIndexOutOfBoundsException
 Reason: Bug
 Author: Lucian George Iordache
 Ref: CDH-9521

---
 .../apache/hadoop/hbase/filter/BitComparator.java  |    2 +-
 .../hadoop/hbase/filter/TestBitComparator.java     |   25 ++++++++++++++++++++
 2 files changed, 26 insertions(+), 1 deletions(-)

diff --git a/src/main/java/org/apache/hadoop/hbase/filter/BitComparator.java b/src/main/java/org/apache/hadoop/hbase/filter/BitComparator.java
index bc29a42..088a099 100644
--- a/src/main/java/org/apache/hadoop/hbase/filter/BitComparator.java
+++ b/src/main/java/org/apache/hadoop/hbase/filter/BitComparator.java
@@ -80,7 +80,7 @@ public class BitComparator extends WritableByteArrayComparable {
     }
     int b = 0;
     //Iterating backwards is faster because we can quit after one non-zero byte.
-    for (int i = value.length - 1; i >= 0 && b == 0; i--) {
+    for (int i = length - 1; i >= 0 && b == 0; i--) {
       switch (bitOperator) {
         case AND:
           b = (this.value[i] & value[i+offset]) & 0xff;
diff --git a/src/test/java/org/apache/hadoop/hbase/filter/TestBitComparator.java b/src/test/java/org/apache/hadoop/hbase/filter/TestBitComparator.java
index 9007f07..50888af 100644
--- a/src/test/java/org/apache/hadoop/hbase/filter/TestBitComparator.java
+++ b/src/test/java/org/apache/hadoop/hbase/filter/TestBitComparator.java
@@ -32,6 +32,11 @@ public class TestBitComparator extends TestCase {
   private static byte[] data1 = new byte[]{15, 0, 0, 0, 0, 0};
   private static byte[] data2 = new byte[]{0, 0, 0, 0, 0, 15};
   private static byte[] data3 = new byte[]{15, 15, 15, 15, 15};
+  
+  // data for testing compareTo method with offset and length parameters
+  private static byte[] data1_2 = new byte[]{15, 15, 0, 0, 0, 0, 0, 15};
+  private static byte[] data2_2 = new byte[]{15, 0, 0, 0, 0, 0, 15, 15};
+  
   private final int Equal = 0;
   private final int NotEqual = 1;
 
@@ -65,6 +70,26 @@ public class TestBitComparator extends TestCase {
     assertEquals(comparator.compareTo(data), expected);
   }
 
+  public void testANDOperationWithOffset() {
+    testOperationWithOffset(data1_2, ones, BitComparator.BitwiseOp.AND, Equal);
+    testOperationWithOffset(data1_2, data0, BitComparator.BitwiseOp.AND, NotEqual);
+    testOperationWithOffset(data2_2, data1, BitComparator.BitwiseOp.AND, NotEqual);
+  }
+
+  public void testOROperationWithOffset() {
+    testOperationWithOffset(data1_2, zeros, BitComparator.BitwiseOp.OR, Equal);
+    testOperationWithOffset(data2_2, data1, BitComparator.BitwiseOp.OR, Equal);
+  }
+
+  public void testXOROperationWithOffset() {
+    testOperationWithOffset(data2_2, data1, BitComparator.BitwiseOp.XOR, Equal);
+  }
+
+  private void testOperationWithOffset(byte[] data, byte[] comparatorBytes, BitComparator.BitwiseOp operator, int expected) {
+    BitComparator comparator = new BitComparator(comparatorBytes, operator);
+    assertEquals(comparator.compareTo(data, 1, comparatorBytes.length), expected);
+  }
+
   @org.junit.Rule
   public org.apache.hadoop.hbase.ResourceCheckerJUnitRule cu =
     new org.apache.hadoop.hbase.ResourceCheckerJUnitRule();
-- 
1.7.0.4

