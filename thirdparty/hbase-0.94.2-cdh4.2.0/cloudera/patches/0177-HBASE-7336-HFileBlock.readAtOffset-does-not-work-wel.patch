From 7a4ca9f8ebd4db8eb704494335597371b1174da0 Mon Sep 17 00:00:00 2001
From: David S. Wang <dsw@cloudera.com>
Date: Wed, 23 Jan 2013 10:35:15 -0800
Subject: [PATCH 177/202] HBASE-7336: HFileBlock.readAtOffset does not work well with multiple threads

Reason: Improvement
Author: Lars Hofhansl
Ref: CDH-9750

git-svn-id: https://svn.apache.org/repos/asf/hbase/branches/0.94@1423084 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit 7355e9b019406b44d339b02810d65e84aee7dcaa)
---
 .../apache/hadoop/hbase/io/hfile/HFileBlock.java   |   38 +++++++++++--------
 1 files changed, 22 insertions(+), 16 deletions(-)

diff --git a/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileBlock.java b/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileBlock.java
index d0904aa..edc633f 100644
--- a/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileBlock.java
+++ b/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileBlock.java
@@ -29,6 +29,8 @@ import java.io.DataOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.ByteBuffer;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
 
 import org.apache.hadoop.fs.FSDataInputStream;
 import org.apache.hadoop.fs.FSDataOutputStream;
@@ -1255,6 +1257,8 @@ public class HFileBlock extends SchemaConfigured implements Cacheable {
     /** The path (if any) where this data is coming from */
     protected Path path;
 
+    private final Lock streamLock = new ReentrantLock();
+
     /** The default buffer size for our buffered streams */
     public static final int DEFAULT_BUFFER_SIZE = 1 << 20;
 
@@ -1329,23 +1333,9 @@ public class HFileBlock extends SchemaConfigured implements Cacheable {
             "-byte array at offset " + destOffset);
       }
 
-      if (pread) {
-        // Positional read. Better for random reads.
-        int extraSize = peekIntoNextBlock ? hdrSize : 0;
-
-        int ret = istream.read(fileOffset, dest, destOffset, size + extraSize);
-        if (ret < size) {
-          throw new IOException("Positional read of " + size + " bytes " +
-              "failed at offset " + fileOffset + " (returned " + ret + ")");
-        }
-
-        if (ret == size || ret < size + extraSize) {
-          // Could not read the next block's header, or did not try.
-          return -1;
-        }
-      } else {
+      if (!pread && streamLock.tryLock()) {
         // Seek + read. Better for scanning.
-        synchronized (istream) {
+        try {
           istream.seek(fileOffset);
 
           long realOffset = istream.getPos();
@@ -1363,6 +1353,22 @@ public class HFileBlock extends SchemaConfigured implements Cacheable {
           // Try to read the next block header.
           if (!readWithExtra(istream, dest, destOffset, size, hdrSize))
             return -1;
+        } finally {
+          streamLock.unlock();
+        }
+      } else {
+        // Positional read. Better for random reads; or when the streamLock is already locked.
+        int extraSize = peekIntoNextBlock ? hdrSize : 0;
+
+        int ret = istream.read(fileOffset, dest, destOffset, size + extraSize);
+        if (ret < size) {
+          throw new IOException("Positional read of " + size + " bytes " +
+              "failed at offset " + fileOffset + " (returned " + ret + ")");
+        }
+
+        if (ret == size || ret < size + extraSize) {
+          // Could not read the next block's header, or did not try.
+          return -1;
         }
       }
 
-- 
1.7.0.4

