From ca3e723ad243a937b62e9b9cc404ec81aad53b37 Mon Sep 17 00:00:00 2001
From: Matteo Bertozzi <matteo.bertozzi@cloudera.com>
Date: Sat, 29 Dec 2012 10:55:30 +0000
Subject: [PATCH 110/202] HBASE-7452 Change ForeignExceptionListener#receive(String, FE)  to only be #receive(FE)

Reason: Snapshots
Author: Jonathan Hsieh
Ref: CDH-9551
---
 .../errorhandling/ForeignExceptionDispatcher.java  |   20 +++++-----------
 .../errorhandling/ForeignExceptionListener.java    |    2 +-
 .../errorhandling/TimeoutExceptionInjector.java    |    2 +-
 .../TestForeignExceptionDispatcher.java            |   24 ++++++++-----------
 .../TestTimeoutExceptionInjector.java              |    8 ++----
 5 files changed, 21 insertions(+), 35 deletions(-)

diff --git a/src/main/java/org/apache/hadoop/hbase/errorhandling/ForeignExceptionDispatcher.java b/src/main/java/org/apache/hadoop/hbase/errorhandling/ForeignExceptionDispatcher.java
index 17aceb0..684d63b 100644
--- a/src/main/java/org/apache/hadoop/hbase/errorhandling/ForeignExceptionDispatcher.java
+++ b/src/main/java/org/apache/hadoop/hbase/errorhandling/ForeignExceptionDispatcher.java
@@ -59,29 +59,21 @@ public class ForeignExceptionDispatcher implements ForeignExceptionListener, For
     return name;
   }
 
-  public synchronized void receive(String message) {
-    receive(new ForeignException(name, message));
-  }
-
-  public synchronized void receive(ForeignException e) {
-    receive(e);
-  }
-
   @Override
-  public synchronized void receive(String message, ForeignException e) {
+  public synchronized void receive(ForeignException e) {
     // if we already have an exception, then ignore it
     if (exception != null) return;
 
-    LOG.debug(name + " accepting received error:" + message);
+    LOG.debug(name + " accepting received exception" , e);
     // mark that we got the error
     if (e != null) {
       exception = e;
     } else {
-      exception = new ForeignException(name, message);
+      exception = new ForeignException(name, e);
     }
 
     // notify all the listeners
-    dispatch(message, e);
+    dispatch(e);
   }
 
   @Override
@@ -108,11 +100,11 @@ public class ForeignExceptionDispatcher implements ForeignExceptionListener, For
    * @param message human readable message passed to the listener
    * @param e {@link ForeignException} containing the cause.  Can be null.
    */
-  private void dispatch(String message, ForeignException e) {
+  private void dispatch(ForeignException e) {
     // update all the listeners with the passed error
     LOG.debug(name + " Recieved error, notifying listeners...");
     for (ForeignExceptionListener l: listeners) {
-      l.receive(message, e);
+      l.receive(e);
     }
   }
 
diff --git a/src/main/java/org/apache/hadoop/hbase/errorhandling/ForeignExceptionListener.java b/src/main/java/org/apache/hadoop/hbase/errorhandling/ForeignExceptionListener.java
index 97b8ca1..61832a6 100644
--- a/src/main/java/org/apache/hadoop/hbase/errorhandling/ForeignExceptionListener.java
+++ b/src/main/java/org/apache/hadoop/hbase/errorhandling/ForeignExceptionListener.java
@@ -37,5 +37,5 @@ public interface ForeignExceptionListener {
    * @param message reason for the error
    * @param e exception causing the error.  Implementations must accept and handle null here.
    */
-  public void receive(String message, ForeignException e);
+  public void receive(ForeignException e);
 }
\ No newline at end of file
diff --git a/src/main/java/org/apache/hadoop/hbase/errorhandling/TimeoutExceptionInjector.java b/src/main/java/org/apache/hadoop/hbase/errorhandling/TimeoutExceptionInjector.java
index 8e79dd6..25a1566 100644
--- a/src/main/java/org/apache/hadoop/hbase/errorhandling/TimeoutExceptionInjector.java
+++ b/src/main/java/org/apache/hadoop/hbase/errorhandling/TimeoutExceptionInjector.java
@@ -69,7 +69,7 @@ public class TimeoutExceptionInjector {
         TimeoutException tee =  new TimeoutException(
             "Timeout caused Foreign Exception", start, end, maxTime);
         String source = "timer-" + timer;
-        listener.receive("Timeout elapsed!", new ForeignException(source, tee));
+        listener.receive(new ForeignException(source, tee));
       }
     };
   }
diff --git a/src/test/java/org/apache/hadoop/hbase/errorhandling/TestForeignExceptionDispatcher.java b/src/test/java/org/apache/hadoop/hbase/errorhandling/TestForeignExceptionDispatcher.java
index 0e876a4..e5c47b1 100644
--- a/src/test/java/org/apache/hadoop/hbase/errorhandling/TestForeignExceptionDispatcher.java
+++ b/src/test/java/org/apache/hadoop/hbase/errorhandling/TestForeignExceptionDispatcher.java
@@ -56,12 +56,11 @@ public class TestForeignExceptionDispatcher {
     dispatcher.addListener(listener2);
 
     // create an artificial error
-    String message = "Some error";
-    dispatcher.receive(message, EXTEXN);
+    dispatcher.receive(EXTEXN);
 
     // make sure the listeners got the error
-    Mockito.verify(listener1, Mockito.times(1)).receive(message, EXTEXN);
-    Mockito.verify(listener2, Mockito.times(1)).receive(message, EXTEXN);
+    Mockito.verify(listener1, Mockito.times(1)).receive(EXTEXN);
+    Mockito.verify(listener2, Mockito.times(1)).receive(EXTEXN);
 
     // make sure that we get an exception
     try {
@@ -73,10 +72,9 @@ public class TestForeignExceptionDispatcher {
     }
 
     // push another error, which should be not be passed to listeners
-    message = "another error";
-    dispatcher.receive(message, EXTEXN2);
-    Mockito.verify(listener1, Mockito.never()).receive(message, EXTEXN2);
-    Mockito.verify(listener2, Mockito.never()).receive(message, EXTEXN2);
+    dispatcher.receive(EXTEXN2);
+    Mockito.verify(listener1, Mockito.never()).receive(EXTEXN2);
+    Mockito.verify(listener2, Mockito.never()).receive(EXTEXN2);
   }
 
   @Test
@@ -97,8 +95,8 @@ public class TestForeignExceptionDispatcher {
     assertTrue("Monitor didn't get timeout", monitor.hasException());
 
     // verify that that we propagated the error
-    Mockito.verify(listener1).receive(Mockito.anyString(), Mockito.any(ForeignException.class));
-    Mockito.verify(listener2).receive(Mockito.anyString(), Mockito.any(ForeignException.class));
+    Mockito.verify(listener1).receive(Mockito.any(ForeignException.class));
+    Mockito.verify(listener2).receive(Mockito.any(ForeignException.class));
   }
 
   /**
@@ -119,9 +117,7 @@ public class TestForeignExceptionDispatcher {
     timer.start();
     timer.trigger();
     // make sure that we got the timer error
-    Mockito.verify(listener1, Mockito.times(1)).receive(Mockito.anyString(),
-      Mockito.any(ForeignException.class));
-    Mockito.verify(listener2, Mockito.times(1)).receive(Mockito.anyString(),
-      Mockito.any(ForeignException.class));
+    Mockito.verify(listener1, Mockito.times(1)).receive(Mockito.any(ForeignException.class));
+    Mockito.verify(listener2, Mockito.times(1)).receive(Mockito.any(ForeignException.class));
   }
 }
\ No newline at end of file
diff --git a/src/test/java/org/apache/hadoop/hbase/errorhandling/TestTimeoutExceptionInjector.java b/src/test/java/org/apache/hadoop/hbase/errorhandling/TestTimeoutExceptionInjector.java
index f402a2b..ff72d91 100644
--- a/src/test/java/org/apache/hadoop/hbase/errorhandling/TestTimeoutExceptionInjector.java
+++ b/src/test/java/org/apache/hadoop/hbase/errorhandling/TestTimeoutExceptionInjector.java
@@ -44,8 +44,7 @@ public class TestTimeoutExceptionInjector {
     TimeoutExceptionInjector timer = new TimeoutExceptionInjector(listener, time);
     timer.start();
     timer.trigger();
-    Mockito.verify(listener, Mockito.times(1)).receive(Mockito.anyString(),
-      Mockito.any(ForeignException.class));
+    Mockito.verify(listener, Mockito.times(1)).receive(Mockito.any(ForeignException.class));
   }
 
   /**
@@ -58,7 +57,7 @@ public class TestTimeoutExceptionInjector {
     TimeoutExceptionInjector timer = new TimeoutExceptionInjector(listener, time);
     timer.start();
     timer.trigger();
-    Mockito.verify(listener).receive(Mockito.anyString(), Mockito.any(ForeignException.class));
+    Mockito.verify(listener).receive(Mockito.any(ForeignException.class));
   }
 
   /**
@@ -98,8 +97,7 @@ public class TestTimeoutExceptionInjector {
       LOG.debug("Correctly failed timer: " + e.getMessage());
     }
     Thread.sleep(time * 2);
-    Mockito.verify(listener, Mockito.times(1)).receive(Mockito.anyString(),
-      Mockito.any(ForeignException.class));
+    Mockito.verify(listener, Mockito.times(1)).receive(Mockito.any(ForeignException.class));
     Mockito.verifyNoMoreInteractions(listener);
   }
 }
-- 
1.7.0.4

